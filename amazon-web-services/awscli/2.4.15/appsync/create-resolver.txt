CREATE-RESOLVER()                                            CREATE-RESOLVER()



NAME
       create-resolver -

DESCRIPTION
       Creates a Resolver object.

       A  resolver converts incoming requests into a format that a data source
       can understand, and converts the data source's responses into  GraphQL.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-resolver
          --api-id <value>
          --type-name <value>
          --field-name <value>
          [--data-source-name <value>]
          [--request-mapping-template <value>]
          [--response-mapping-template <value>]
          [--kind <value>]
          [--pipeline-config <value>]
          [--sync-config <value>]
          [--caching-config <value>]
          [--max-batch-size <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --api-id (string)
          The  ID for the GraphQL API for which the resolver is being created.

       --type-name (string)
          The name of the Type .

       --field-name (string)
          The name of the field to attach the resolver to.

       --data-source-name (string)
          The name of the data source for which the resolver is being created.

       --request-mapping-template (string)
          The mapping template to use for requests.

          A  resolver  uses  a  request  mapping template to convert a GraphQL
          expression into a format that a data source can understand.  Mapping
          templates are written in Apache Velocity Template Language (VTL).

          VTL request mapping templates are optional when using an Lambda data
          source. For all other data sources, VTL request and response mapping
          templates are required.

       --response-mapping-template (string)
          The mapping template to use for responses from the data source.

       --kind (string)
          The resolver type.

          o UNIT  :  A  UNIT  resolver  type.  A  UNIT resolver is the default
            resolver type. You can use a UNIT resolver to run a GraphQL  query
            against a single data source.

          o PIPELINE  :  A  PIPELINE  resolver  type.  You  can use a PIPELINE
            resolver to invoke a series of Function objects in a  serial  man-
            ner.  You  can  use  a  pipeline  resolver  to run a GraphQL query
            against multiple data sources.

          Possible values:

          o UNIT

          o PIPELINE

       --pipeline-config (structure)
          The PipelineConfig .

          functions -> (list)
              A list of Function objects.

              (string)

       Shorthand Syntax:

          functions=string,string

       JSON Syntax:

          {
            "functions": ["string", ...]
          }

       --sync-config (structure)
          The SyncConfig for a resolver attached to a versioned data source.

          conflictHandler -> (string)
              The Conflict Resolution strategy to perform in the  event  of  a
              conflict.

              o OPTIMISTIC_CONCURRENCY  : Resolve conflicts by rejecting muta-
                tions when versions don't match  the  latest  version  at  the
                server.

              o AUTOMERGE : Resolve conflicts with the Automerge conflict res-
                olution strategy.

              o LAMBDA : Resolve conflicts with an Lambda function supplied in
                the LambdaConflictHandlerConfig .

          conflictDetection -> (string)
              The Conflict Detection strategy to use.

              o VERSION  :  Detect conflicts based on object versions for this
                resolver.

              o NONE : Do not detect conflicts when invoking this resolver.

          lambdaConflictHandlerConfig -> (structure)
              The LambdaConflictHandlerConfig when configuring LAMBDA  as  the
              Conflict Handler.

              lambdaConflictHandlerArn -> (string)
                 The Amazon Resource Name (ARN) for the Lambda function to use
                 as the Conflict Handler.

       Shorthand Syntax:

          conflictHandler=string,conflictDetection=string,lambdaConflictHandlerConfig={lambdaConflictHandlerArn=string}

       JSON Syntax:

          {
            "conflictHandler": "OPTIMISTIC_CONCURRENCY"|"LAMBDA"|"AUTOMERGE"|"NONE",
            "conflictDetection": "VERSION"|"NONE",
            "lambdaConflictHandlerConfig": {
              "lambdaConflictHandlerArn": "string"
            }
          }

       --caching-config (structure)
          The caching configuration for the resolver.

          ttl -> (long)
              The TTL in seconds for a resolver that has caching activated.

              Valid values are 13,600 seconds.

          cachingKeys -> (list)
              The caching keys for a resolver that has caching activated.

              Valid values are entries from  the  $context.arguments  ,  $con-
              text.source , and $context.identity maps.

              (string)

       Shorthand Syntax:

          ttl=long,cachingKeys=string,string

       JSON Syntax:

          {
            "ttl": long,
            "cachingKeys": ["string", ...]
          }

       --max-batch-size (integer)
          The maximum batching size for a resolver.

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       resolver -> (structure)
          The Resolver object.

          typeName -> (string)
              The resolver type name.

          fieldName -> (string)
              The resolver field name.

          dataSourceName -> (string)
              The resolver data source name.

          resolverArn -> (string)
              The resolver Amazon Resource Name (ARN).

          requestMappingTemplate -> (string)
              The request mapping template.

          responseMappingTemplate -> (string)
              The response mapping template.

          kind -> (string)
              The resolver type.

              o UNIT  :  A  UNIT resolver type. A UNIT resolver is the default
                resolver type. You can use a UNIT resolver to  run  a  GraphQL
                query against a single data source.

              o PIPELINE  :  A  PIPELINE resolver type. You can use a PIPELINE
                resolver to invoke a series of Function objects  in  a  serial
                manner. You can use a pipeline resolver to run a GraphQL query
                against multiple data sources.

          pipelineConfig -> (structure)
              The PipelineConfig .

              functions -> (list)
                 A list of Function objects.

                 (string)

          syncConfig -> (structure)
              The SyncConfig for a  resolver  attached  to  a  versioned  data
              source.

              conflictHandler -> (string)
                 The Conflict Resolution strategy to perform in the event of a
                 conflict.

                 o OPTIMISTIC_CONCURRENCY :  Resolve  conflicts  by  rejecting
                   mutations  when  versions don't match the latest version at
                   the server.

                 o AUTOMERGE : Resolve conflicts with the  Automerge  conflict
                   resolution strategy.

                 o LAMBDA : Resolve conflicts with an Lambda function supplied
                   in the LambdaConflictHandlerConfig .

              conflictDetection -> (string)
                 The Conflict Detection strategy to use.

                 o VERSION : Detect conflicts based  on  object  versions  for
                   this resolver.

                 o NONE : Do not detect conflicts when invoking this resolver.

              lambdaConflictHandlerConfig -> (structure)
                 The LambdaConflictHandlerConfig when  configuring  LAMBDA  as
                 the Conflict Handler.

                 lambdaConflictHandlerArn -> (string)
                     The Amazon Resource Name (ARN) for the Lambda function to
                     use as the Conflict Handler.

          cachingConfig -> (structure)
              The caching configuration for the resolver.

              ttl -> (long)
                 The TTL in seconds for a resolver that has caching activated.

                 Valid values are 13,600 seconds.

              cachingKeys -> (list)
                 The caching keys for a resolver that has caching activated.

                 Valid  values are entries from the $context.arguments , $con-
                 text.source , and $context.identity maps.

                 (string)

          maxBatchSize -> (integer)
              The maximum batching size for a resolver.



                                                             CREATE-RESOLVER()
