PUT-PORTFOLIO-PREFERENCES()                        PUT-PORTFOLIO-PREFERENCES()



NAME
       put-portfolio-preferences -

DESCRIPTION
       Saves the specified migration and modernization preferences.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            put-portfolio-preferences
          [--application-preferences <value>]
          [--database-preferences <value>]
          [--prioritize-business-goals <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --application-preferences (structure)
          The transformation preferences for non-database applications.

          managementPreference -> (structure)
              Application preferences that you specify to prefer managed envi-
              ronment.

              awsManagedResources -> (structure)
                 Indicates interest in solutions that are managed by AWS.

                 targetDestination -> (list)
                     The choice of application destination that you specify.

                     (string)

              noPreference -> (structure)
                 No specific preference.

                 targetDestination -> (list)
                     The choice of application destination that you specify.

                     (string)

              selfManageResources -> (structure)
                 Indicates interest in managing your own resources on AWS.

                 targetDestination -> (list)
                     Self-managed resources target destination.

                     (string)

       JSON Syntax:

          {
            "managementPreference": {
              "awsManagedResources": {
                "targetDestination": ["None specified"|"AWS Elastic BeanStalk"|"AWS Fargate", ...]
              },
              "noPreference": {
                "targetDestination": ["None specified"|"AWS Elastic BeanStalk"|"AWS Fargate"|"Amazon Elastic Cloud Compute (EC2)"|"Amazon Elastic Container Service (ECS)"|"Amazon Elastic Kubernetes Service (EKS)", ...]
              },
              "selfManageResources": {
                "targetDestination": ["None specified"|"Amazon Elastic Cloud Compute (EC2)"|"Amazon Elastic Container Service (ECS)"|"Amazon Elastic Kubernetes Service (EKS)", ...]
              }
            }
          }

       --database-preferences (structure)
          The transformation preferences for database applications.

          databaseManagementPreference -> (string)
              Specifies whether you're interested in self-managed databases or
              databases managed by AWS.

          databaseMigrationPreference -> (structure)
              Specifies your preferred migration path.

              heterogeneous -> (structure)
                 Indicates  whether you are interested in moving from one type
                 of database to another. For example, from SQL Server to  Ama-
                 zon Aurora MySQL-Compatible Edition.

                 targetDatabaseEngine -> (list)
                     The  target  database  engine  for heterogeneous database
                     migration preference.

                     (string)

              homogeneous -> (structure)
                 Indicates whether you are interested in moving  to  the  same
                 type  of  database  into AWS. For example, from SQL Server in
                 your environment to SQL Server on AWS.

                 targetDatabaseEngine -> (list)
                     The  target  database  engine  for  homogeneous  database
                     migration preferences.

                     (string)

              noPreference -> (structure)
                 Indicated  that  you  do  not prefer heterogeneous or homoge-
                 neous.

                 targetDatabaseEngine -> (list)
                     The target database engine for database migration prefer-
                     ence that you specify.

                     (string)

       JSON Syntax:

          {
            "databaseManagementPreference": "AWS-managed"|"Self-manage"|"No preference",
            "databaseMigrationPreference": {
              "heterogeneous": {
                "targetDatabaseEngine": ["None specified"|"Amazon Aurora"|"AWS PostgreSQL"|"MySQL"|"Microsoft SQL Server"|"Oracle Database"|"MariaDB"|"SAP"|"Db2 LUW"|"MongoDB", ...]
              },
              "homogeneous": {
                "targetDatabaseEngine": ["None specified", ...]
              },
              "noPreference": {
                "targetDatabaseEngine": ["None specified"|"Amazon Aurora"|"AWS PostgreSQL"|"MySQL"|"Microsoft SQL Server"|"Oracle Database"|"MariaDB"|"SAP"|"Db2 LUW"|"MongoDB", ...]
              }
            }
          }

       --prioritize-business-goals (structure)
          The rank of the business goals based on priority.

          businessGoals -> (structure)
              Rank of business goals based on priority.

              licenseCostReduction -> (integer)
                 Business goal to reduce license costs.

              modernizeInfrastructureWithCloudNativeTechnologies -> (integer)
                 Business  goal to modernize infrastructure by moving to cloud
                 native technologies.

              reduceOperationalOverheadWithManagedServices -> (integer)
                 Business goal to reduce the operational overhead on the  team
                 by moving into managed services.

              speedOfMigration -> (integer)
                 Business goal to achieve migration at a fast pace.

       Shorthand Syntax:

          businessGoals={licenseCostReduction=integer,modernizeInfrastructureWithCloudNativeTechnologies=integer,reduceOperationalOverheadWithManagedServices=integer,speedOfMigration=integer}

       JSON Syntax:

          {
            "businessGoals": {
              "licenseCostReduction": integer,
              "modernizeInfrastructureWithCloudNativeTechnologies": integer,
              "reduceOperationalOverheadWithManagedServices": integer,
              "speedOfMigration": integer
            }
          }

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       None



                                                   PUT-PORTFOLIO-PREFERENCES()
