INITIATE-AUTH()                                                INITIATE-AUTH()



NAME
       initiate-auth -

DESCRIPTION
       Initiates the authentication flow.

       NOTE:
          This  action  might  generate  an SMS text message. Starting June 1,
          2021, U.S. telecom carriers require that you register an origination
          phone number before you can send SMS messages to U.S. phone numbers.
          If you use SMS text messages in Amazon Cognito, you must register  a
          phone  number with Amazon Pinpoint . Cognito will use the the regis-
          tered number  automatically.  Otherwise,  Cognito  users  that  must
          receive  SMS  messages  might  be  unable to sign up, activate their
          accounts, or sign in.

          If you have never used SMS text messages with Amazon Cognito or  any
          other Amazon Web Service, Amazon SNS might place your account in SMS
          sandbox. In * sandbox mode * , youll have limitations, such as send-
          ing  messages  to  only verified phone numbers. After testing in the
          sandbox environment, you can move out of the SMS  sandbox  and  into
          production.  For more information, see SMS message settings for Cog-
          nito User Pools in the Amazon Cognito Developer Guide .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            initiate-auth
          --auth-flow <value>
          [--auth-parameters <value>]
          [--client-metadata <value>]
          --client-id <value>
          [--analytics-metadata <value>]
          [--user-context-data <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --auth-flow (string)
          The authentication flow for this call to  execute.  The  API  action
          will depend on this value. For example:

          o REFRESH_TOKEN_AUTH  will  take in a valid refresh token and return
            new tokens.

          o USER_SRP_AUTH will take in USERNAME and SRP_A and return  the  SRP
            variables to be used for next challenge execution.

          o USER_PASSWORD_AUTH  will  take in USERNAME and PASSWORD and return
            the next challenge or tokens.

          Valid values include:

          o USER_SRP_AUTH : Authentication flow for the Secure Remote Password
            (SRP) protocol.

          o REFRESH_TOKEN_AUTH   /REFRESH_TOKEN   :  Authentication  flow  for
            refreshing the access token and ID  token  by  supplying  a  valid
            refresh token.

          o CUSTOM_AUTH : Custom authentication flow.

          o USER_PASSWORD_AUTH  :  Non-SRP  authentication  flow; USERNAME and
            PASSWORD are passed directly. If a user migration  Lambda  trigger
            is  set,  this  flow  will invoke the user migration Lambda if the
            USERNAME is not found in the user pool.

          o ADMIN_USER_PASSWORD_AUTH : Admin-based user  password  authentica-
            tion.  This replaces the ADMIN_NO_SRP_AUTH authentication flow. In
            this flow, Cognito receives the password in the request instead of
            using the SRP process to verify passwords.
              ADMIN_NO_SRP_AUTH is not a valid value.

          Possible values:

          o USER_SRP_AUTH

          o REFRESH_TOKEN_AUTH

          o REFRESH_TOKEN

          o CUSTOM_AUTH

          o ADMIN_NO_SRP_AUTH

          o USER_PASSWORD_AUTH

          o ADMIN_USER_PASSWORD_AUTH

       --auth-parameters (map)
          The authentication parameters. These are inputs corresponding to the
          AuthFlow that you are invoking. The required values  depend  on  the
          value of AuthFlow :

          o For   USER_SRP_AUTH   :  USERNAME  (required),  SRP_A  (required),
            SECRET_HASH (required if the  app  client  is  configured  with  a
            client secret), DEVICE_KEY .

          o For  REFRESH_TOKEN_AUTH/REFRESH_TOKEN  : REFRESH_TOKEN (required),
            SECRET_HASH (required if the  app  client  is  configured  with  a
            client secret), DEVICE_KEY .

          o For  CUSTOM_AUTH : USERNAME (required), SECRET_HASH (if app client
            is configured with client  secret),  DEVICE_KEY  .  To  start  the
            authentication flow with password verification, include Challenge-
            Name: SRP_A and SRP_A: (The SRP_A Value) .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --client-metadata (map)
          A map of custom key-value pairs that you can provide  as  input  for
          certain custom workflows that this action triggers.

          You  create  custom  workflows by assigning Lambda functions to user
          pool triggers. When you use the InitiateAuth API action, Amazon Cog-
          nito  invokes  the  Lambda  functions that are specified for various
          triggers. The ClientMetadata value is passed as input to  the  func-
          tions for only the following triggers:

          o Pre signup

          o Pre authentication

          o User migration

          When  Amazon  Cognito  invokes  the functions for these triggers, it
          passes a JSON payload, which the function receives  as  input.  This
          payload contains a validationData attribute, which provides the data
          that you assigned to the ClientMetadata  parameter  in  your  Initi-
          ateAuth  request.  In  your function code in Lambda, you can process
          the validationData value to enhance your workflow for your  specific
          needs.

          When  you  use  the  InitiateAuth  API  action,  Amazon Cognito also
          invokes the functions for the following triggers, but  it  does  not
          provide the ClientMetadata value as input:

          o Post authentication

          o Custom message

          o Pre token generation

          o Create auth challenge

          o Define auth challenge

          o Verify auth challenge

          For  more  information,  see  Customizing  User  Pool Workflows with
          Lambda Triggers in the Amazon Cognito Developer Guide .

          NOTE:
              Take the following limitations into consideration when  you  use
              the ClientMetadata parameter:

              o Amazon  Cognito  does not store the ClientMetadata value. This
                data is available only to Lambda triggers that are assigned to
                a  user  pool  to  support custom workflows. If your user pool
                configuration does not include  triggers,  the  ClientMetadata
                parameter serves no purpose.

              o Amazon Cognito does not validate the ClientMetadata value.

              o Amazon  Cognito does not encrypt the the ClientMetadata value,
                so don't use it to provide sensitive information.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --client-id (string)
          The app client ID.

       --analytics-metadata (structure)
          The Amazon Pinpoint analytics metadata for  collecting  metrics  for
          InitiateAuth calls.

          AnalyticsEndpointId -> (string)
              The endpoint ID.

       Shorthand Syntax:

          AnalyticsEndpointId=string

       JSON Syntax:

          {
            "AnalyticsEndpointId": "string"
          }

       --user-context-data (structure)
          Contextual  data  such as the user's device fingerprint, IP address,
          or location used for evaluating the risk of an unexpected  event  by
          Amazon Cognito advanced security.

          EncodedData -> (string)
              Contextual  data  such  as  the  user's  device  fingerprint, IP
              address, or location used for evaluating the risk  of  an  unex-
              pected event by Amazon Cognito advanced security.

       Shorthand Syntax:

          EncodedData=string

       JSON Syntax:

          {
            "EncodedData": "string"
          }

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       ChallengeName -> (string)
          The  name  of  the  challenge  which you are responding to with this
          call. This is returned to you in the AdminInitiateAuth  response  if
          you need to pass another challenge.

          Valid  values  include  the  following. Note that all of these chal-
          lenges require USERNAME  and  SECRET_HASH  (if  applicable)  in  the
          parameters.

          o SMS_MFA  : Next challenge is to supply an SMS_MFA_CODE , delivered
            via SMS.

          o PASSWORD_VERIFIER  :   Next   challenge   is   to   supply   PASS-
            WORD_CLAIM_SIGNATURE , PASSWORD_CLAIM_SECRET_BLOCK , and TIMESTAMP
            after the client-side SRP calculations.

          o CUSTOM_CHALLENGE : This is returned if your custom  authentication
            flow determines that the user should pass another challenge before
            tokens are issued.

          o DEVICE_SRP_AUTH : If device tracking was enabled on your user pool
            and  the  previous  challenges  were  passed,  this  challenge  is
            returned so that Amazon Cognito can start tracking this device.

          o DEVICE_PASSWORD_VERIFIER : Similar to PASSWORD_VERIFIER , but  for
            devices only.

          o NEW_PASSWORD_REQUIRED : For users who are required to change their
            passwords after successful first login. This challenge  should  be
            passed with NEW_PASSWORD and any other required attributes.

          o MFA_SETUP  :  For  users  who  are required to setup an MFA factor
            before they can sign-in. The MFA types enabled for the  user  pool
            will  be  listed  in the challenge parameters MFA_CAN_SETUP value.
            To setup software token MFA, use the session  returned  here  from
            InitiateAuth  as  an input to AssociateSoftwareToken , and use the
            session returned by VerifySoftwareToken as an  input  to  Respond-
            ToAuthChallenge with challenge name MFA_SETUP to complete sign-in.
            To setup SMS MFA, users will need help from  an  administrator  to
            add  a  phone  number  to their account and then call InitiateAuth
            again to restart sign-in.

       Session -> (string)
          The session which should be passed both ways  in  challenge-response
          calls  to  the  service.  If  the caller needs to go through another
          challenge, they return a session with  other  challenge  parameters.
          This  session  should  be  passed  as it is to the next RespondToAu-
          thChallenge API call.

       ChallengeParameters -> (map)
          The challenge parameters. These are returned to you  in  the  Initi-
          ateAuth  response  if  you  need  to  pass  another  challenge.  The
          responses in this parameter should be used to compute inputs to  the
          next call (RespondToAuthChallenge ).

          All challenges require USERNAME and SECRET_HASH (if applicable).

          key -> (string)

          value -> (string)

       AuthenticationResult -> (structure)
          The  result of the authentication response. This is only returned if
          the caller does not need to pass another challenge.  If  the  caller
          does  need to pass another challenge before it gets tokens, Challen-
          geName , ChallengeParameters , and Session are returned.

          AccessToken -> (string)
              The access token.

          ExpiresIn -> (integer)
              The expiration period of the authentication result in seconds.

          TokenType -> (string)
              The token type.

          RefreshToken -> (string)
              The refresh token.

          IdToken -> (string)
              The ID token.

          NewDeviceMetadata -> (structure)
              The new device metadata from an authentication result.

              DeviceKey -> (string)
                 The device key.

              DeviceGroupKey -> (string)
                 The device group key.



                                                               INITIATE-AUTH()
