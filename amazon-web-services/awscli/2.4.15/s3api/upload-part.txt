UPLOAD-PART()                                                    UPLOAD-PART()



NAME
       upload-part -

DESCRIPTION
       Uploads a part in a multipart upload.

       NOTE:
          In  this  operation, you provide part data in your request. However,
          you have an option to specify your existing Amazon S3  object  as  a
          data source for the part you are uploading. To upload a part from an
          existing object, you use the UploadPartCopy operation.

       You must initiate  a  multipart  upload  (see  CreateMultipartUpload  )
       before  you  can upload any part. In response to your initiate request,
       Amazon S3 returns an upload ID, a  unique  identifier,  that  you  must
       include in your upload part request.

       Part numbers can be any number from 1 to 10,000, inclusive. A part num-
       ber uniquely identifies a part and also defines its position within the
       object being created. If you upload a new part using the same part num-
       ber that was used with a previous part, the previously uploaded part is
       overwritten.  Each  part must be at least 5 MB in size, except the last
       part. There is no size limit on the last part of your multipart upload.

       To ensure that data is not corrupted when traversing the network, spec-
       ify the Content-MD5 header in the upload part request. Amazon S3 checks
       the  part  data  against  the provided MD5 value. If they do not match,
       Amazon S3 returns an error.

       If the upload request is signed with Signature Version 4,  then  Amazon
       Web  Services  S3  uses  the  x-amz-content-sha256 header as a checksum
       instead of  Content-MD5  .  For  more  information  see  Authenticating
       Requests: Using the Authorization Header (Amazon Web Services Signature
       Version 4) .
          Note: After you initiate multipart upload and  upload  one  or  more
          parts,  you  must either complete or abort multipart upload in order
          to stop getting charged for storage  of  the  uploaded  parts.  Only
          after you either complete or abort multipart upload, Amazon S3 frees
          up the parts storage and stops charging you for the parts storage.

       For more information on multipart uploads, go to Multipart Upload Over-
       view in the Amazon S3 User Guide .

       For information on the permissions required to use the multipart upload
       API, go to Multipart Upload and Permissions in the Amazon S3 User Guide
       .

       You  can  optionally  request  server-side  encryption  where Amazon S3
       encrypts your data as it writes it to disks in  its  data  centers  and
       decrypts  it for you when you access it. You have the option of provid-
       ing your own encryption key, or you can use  the  Amazon  Web  Services
       managed  encryption  keys. If you choose to provide your own encryption
       key, the request headers you provide in  the  request  must  match  the
       headers  you  used  in  the  request  to  initiate  the upload by using
       CreateMultipartUpload . For more information, go to  Using  Server-Side
       Encryption in the Amazon S3 User Guide .

       Server-side encryption is supported by the S3 Multipart Upload actions.
       Unless you are using a customer-provided encryption key, you don't need
       to  specify  the  encryption  parameters  in  each  UploadPart request.
       Instead, you only need to specify the server-side encryption parameters
       in  the  initial  Initiate Multipart request. For more information, see
       CreateMultipartUpload .

       If you  requested  server-side  encryption  using  a  customer-provided
       encryption key in your initiate multipart upload request, you must pro-
       vide identical encryption information in each  part  upload  using  the
       following headers.

       o x-amz-server-side-encryption-customer-algorithm

       o x-amz-server-side-encryption-customer-key

       o x-amz-server-side-encryption-customer-key-MD5
          Special Errors

       o

            o Code: NoSuchUpload

            o Cause: The specified multipart upload does not exist. The upload
              ID might be invalid, or the multipart  upload  might  have  been
              aborted or completed.

            o HTTP Status Code: 404 Not Found

            o SOAP Fault Code Prefix: Client

         Related Resources

       o CreateMultipartUpload

       o CompleteMultipartUpload

       o AbortMultipartUpload

       o ListParts

       o ListMultipartUploads

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            upload-part
          [--body <value>]
          --bucket <value>
          [--content-length <value>]
          [--content-md5 <value>]
          --key <value>
          --part-number <value>
          --upload-id <value>
          [--sse-customer-algorithm <value>]
          [--sse-customer-key <value>]
          [--sse-customer-key-md5 <value>]
          [--request-payer <value>]
          [--expected-bucket-owner <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --body (blob)
          Object data.

       --bucket (string)
          The  name of the bucket to which the multipart upload was initiated.

          When using this  action  with  an  access  point,  you  must  direct
          requests  to  the  access  point hostname. The access point hostname
          takes the form AccessPointName  -AccountId  .s3-accesspoint.*Region*
          .amazonaws.com.  When using this action with an access point through
          the Amazon Web Services SDKs, you provide the access  point  ARN  in
          place  of  the  bucket name. For more information about access point
          ARNs, see Using access points in the Amazon S3 User Guide .

          When using this action with Amazon S3 on Outposts, you  must  direct
          requests to the S3 on Outposts hostname. The S3 on Outposts hostname
          takes the  form  AccessPointName  -AccountId  .*outpostID*  .s3-out-
          posts.*Region*  .amazonaws.com.  When  using this action using S3 on
          Outposts through the Amazon Web Services SDKs, you provide the  Out-
          posts  bucket  ARN in place of the bucket name. For more information
          about S3 on Outposts ARNs, see Using S3 on Outposts in the Amazon S3
          User Guide .

       --content-length (long)
          Size of the body in bytes. This parameter is useful when the size of
          the body cannot be determined automatically.

       --content-md5 (string)
          The base64-encoded 128-bit MD5 digest of the part data. This parame-
          ter  is  auto-populated  when  using  the command from the CLI. This
          parameter is required if object lock parameters are specified.

       --key (string)
          Object key for which the multipart upload was initiated.

       --part-number (integer)
          Part number of part being  uploaded.  This  is  a  positive  integer
          between 1 and 10,000.

       --upload-id (string)
          Upload  ID  identifying  the  multipart  upload  whose part is being
          uploaded.

       --sse-customer-algorithm (string)
          Specifies the algorithm to use to when encrypting  the  object  (for
          example, AES256).

       --sse-customer-key (string)
          Specifies  the customer-provided encryption key for Amazon S3 to use
          in encrypting data. This value is used to store the object and  then
          it  is  discarded;  Amazon S3 does not store the encryption key. The
          key must be appropriate for use with the algorithm specified in  the
          x-amz-server-side-encryption-customer-algorithm  header  . This must
          be the same encryption  key  specified  in  the  initiate  multipart
          upload request.

       --sse-customer-key-md5 (string)
          Specifies  the 128-bit MD5 digest of the encryption key according to
          RFC 1321. Amazon S3 uses this header for a message  integrity  check
          to ensure that the encryption key was transmitted without error.

       --request-payer (string)
          Confirms  that the requester knows that they will be charged for the
          request. Bucket owners need not  specify  this  parameter  in  their
          requests.  For  information about downloading objects from requester
          pays buckets, see Downloading Objects in Requestor Pays  Buckets  in
          the Amazon S3 User Guide .

          Possible values:

          o requester

       --expected-bucket-owner (string)
          The  account ID of the expected bucket owner. If the bucket is owned
          by a different account, the request  will  fail  with  an  HTTP  403
          (Access Denied) error.

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       The following command uploads the first part in a multipart upload ini-
       tiated with the create-multipart-upload command:

          aws s3api upload-part --bucket my-bucket --key 'multipart/01' --part-number 1 --body part01 --upload-id  "dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R"

       The body option takes the name or path of a local file for  upload  (do
       not  use  the file:// prefix). The minimum part size is 5 MB. Upload ID
       is returned by create-multipart-upload and can also be  retrieved  with
       list-multipart-uploads.  Bucket  and  key are specified when you create
       the multipart upload.

       Output:

          {
              "ETag": "\"e868e0f4719e394144ef36531ee6824c\""
          }

       Save the ETag value of each part for later. They are required  to  com-
       plete the multipart upload.

OUTPUT
       ServerSideEncryption -> (string)
          The  server-side  encryption algorithm used when storing this object
          in Amazon S3 (for example, AES256, aws:kms).

       ETag -> (string)
          Entity tag for the uploaded object.

       SSECustomerAlgorithm -> (string)
          If server-side encryption with a  customer-provided  encryption  key
          was  requested, the response will include this header confirming the
          encryption algorithm used.

       SSECustomerKeyMD5 -> (string)
          If server-side encryption with a  customer-provided  encryption  key
          was  requested,  the  response  will  include this header to provide
          round-trip message integrity verification of  the  customer-provided
          encryption key.

       SSEKMSKeyId -> (string)
          If  present, specifies the ID of the Amazon Web Services Key Manage-
          ment Service (Amazon Web Services KMS)  symmetric  customer  managed
          key was used for the object.

       BucketKeyEnabled -> (boolean)
          Indicates  whether  the  multipart  upload uses an S3 Bucket Key for
          server-side encryption with Amazon Web Services KMS (SSE-KMS).

       RequestCharged -> (string)
          If present, indicates that the requester  was  successfully  charged
          for the request.



                                                                 UPLOAD-PART()
