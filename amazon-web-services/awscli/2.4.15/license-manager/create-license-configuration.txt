CREATE-LICENSE-CONFIGURATION()                  CREATE-LICENSE-CONFIGURATION()



NAME
       create-license-configuration -

DESCRIPTION
       Creates a license configuration.

       A  license configuration is an abstraction of a customer license agree-
       ment that can be consumed and enforced by License  Manager.  Components
       include  specifications  for  the  license type (licensing by instance,
       socket, CPU, or  vCPU),  allowed  tenancy  (shared  tenancy,  Dedicated
       Instance,  Dedicated  Host,  or all of these), license affinity to host
       (how long a license must be associated with a host), and the number  of
       licenses purchased and used.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-license-configuration
          --name <value>
          [--description <value>]
          --license-counting-type <value>
          [--license-count <value>]
          [--license-count-hard-limit | --no-license-count-hard-limit]
          [--license-rules <value>]
          [--tags <value>]
          [--disassociate-when-not-found | --no-disassociate-when-not-found]
          [--product-information-list <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --name (string)
          Name of the license configuration.

       --description (string)
          Description of the license configuration.

       --license-counting-type (string)
          Dimension used to track the license inventory.

          Possible values:

          o vCPU

          o Instance

          o Core

          o Socket

       --license-count (long)
          Number of licenses managed by the license configuration.

       --license-count-hard-limit | --no-license-count-hard-limit (boolean)
          Indicates  whether hard or soft license enforcement is used. Exceed-
          ing a hard limit blocks the launch of new instances.

       --license-rules (list)
          License rules. The syntax is #name=value (for  example,  #allowedTe-
          nancy=EC2-DedicatedHost).  The available rules vary by dimension, as
          follows.

          o Cores dimension: allowedTenancy | licenseAffinityToHost | maximum-
            Cores | minimumCores

          o Instances  dimension: allowedTenancy | maximumCores | minimumCores
            | maximumSockets | minimumSockets | maximumVcpus | minimumVcpus

          o Sockets dimension: allowedTenancy | licenseAffinityToHost |  maxi-
            mumSockets | minimumSockets

          o vCPUs  dimension:  allowedTenancy  | honorVcpuOptimization | maxi-
            mumVcpus | minimumVcpus

          The unit for licenseAffinityToHost is days and the  range  is  1  to
          180.  The  possible  values  for  allowedTenancy  are  EC2-Default ,
          EC2-DedicatedHost , and EC2-DedicatedInstance . The possible  values
          for honorVcpuOptimization are True and False .

          (string)

       Syntax:

          "string" "string" ...

       --tags (list)
          Tags to add to the license configuration.

          (structure)
              Details about a tag for a license configuration.

              Key -> (string)
                 Tag key.

              Value -> (string)
                 Tag value.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --disassociate-when-not-found     |    --no-disassociate-when-not-found
       (boolean)
          When true, disassociates a resource when software is uninstalled.

       --product-information-list (list)
          Product information.

          (structure)
              Describes product information for a license configuration.

              ResourceType -> (string)
                 Resource type. The possible values are SSM_MANAGED | RDS .

              ProductInformationFilterList -> (list)
                 A Product information filter consists  of  a  ProductInforma-
                 tionFilterComparator  which is a logical operator, a Product-
                 InformationFilterName which  specifies  the  type  of  filter
                 being  declared,  and  a  ProductInformationFilterValue  that
                 specifies the value to filter on.

                 Accepted values for ProductInformationFilterName  are  listed
                 here along with descriptions and valid options for ProductIn-
                 formationFilterComparator .

                 The following filters and are  supported  when  the  resource
                 type is SSM_MANAGED :

                 o Application  Name  -  The  name of the application. Logical
                   operator is EQUALS .

                 o Application Publisher - The publisher of  the  application.
                   Logical operator is EQUALS .

                 o Application Version - The version of the application. Logi-
                   cal operator is EQUALS .

                 o Platform Name - The name of the platform. Logical  operator
                   is EQUALS .

                 o Platform  Type  -  The  platform  type. Logical operator is
                   EQUALS .

                 o Tag:key - The key of a tag attached to an Amazon  Web  Ser-
                   vices  resource  you wish to exclude from automated discov-
                   ery. Logical operator is NOT_EQUALS . The key for your  tag
                   must   be   appended   to   Tag:   following  the  example:
                   Tag:name-of-your-key  .  ProductInformationFilterValue   is
                   optional if you are not using values for the key.

                 o AccountId  -  The  12-digit  ID  of  an Amazon Web Services
                   account you wish to exclude from automated discovery. Logi-
                   cal operator is NOT_EQUALS .

                 o License  Included  -  The type of license included. Logical
                   operators are EQUALS and NOT_EQUALS . Possible values  are:
                   sql-server-enterprise      |      sql-server-standard     |
                   sql-server-web | windows-server-datacenter .

                 The following filters and  logical  operators  are  supported
                 when the resource type is RDS :

                 o Engine  Edition - The edition of the database engine. Logi-
                   cal operator is EQUALS . Possible values are:  oracle-ee  |
                   oracle-se | oracle-se1 | oracle-se2 .

                 o License Pack - The license pack. Logical operator is EQUALS
                   . Possible values are: data guard | diagnostic pack sqlt  |
                   tuning pack sqlt | ols | olap .

                 (structure)
                     Describes product information filters.

                     ProductInformationFilterName -> (string)
                        Filter name.

                     ProductInformationFilterValue -> (list)
                        Filter value.

                        (string)

                     ProductInformationFilterComparator -> (string)
                        Logical operator.

       JSON Syntax:

          [
            {
              "ResourceType": "string",
              "ProductInformationFilterList": [
                {
                  "ProductInformationFilterName": "string",
                  "ProductInformationFilterValue": ["string", ...],
                  "ProductInformationFilterComparator": "string"
                }
                ...
              ]
            }
            ...
          ]

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To create a license configuration

       The  following  create-license-configuration  example creates a license
       configuration with a hard limit of 10 cores.

          aws license-manager create-license-configuration --name my-license-configuration \
              --license-counting-type Core \
              --license-count 10 \
              --license-count-hard-limit

       Output:

          {
            "LicenseConfigurationArn": "arn:aws:license-manager:us-west-2:123456789012:license-configuration:lic-6eb6586f508a786a2ba41EXAMPLE1111"
          }

       Example 2: To create a license configuration

       The following create-license-configuration example  creates  a  license
       configuration  with a soft limit of 100 vCPUs. It uses a rule to enable
       vCPU optimization.

          aws license-manager create-license-configuration --name my-license-configuration
              --license-counting-type vCPU \
              --license-count 100 \
              --license-rules "#honorVcpuOptimization=true"

       Output:

          {
            "LicenseConfigurationArn": "arn:aws:license-manager:us-west-2:123456789012:license-configuration:lic-6eb6586f508a786a2ba41EXAMPLE2222"
          }

OUTPUT
       LicenseConfigurationArn -> (string)
          Amazon Resource Name (ARN) of the license configuration.



                                                CREATE-LICENSE-CONFIGURATION()
