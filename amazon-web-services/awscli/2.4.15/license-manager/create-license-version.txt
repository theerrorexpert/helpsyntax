CREATE-LICENSE-VERSION()                              CREATE-LICENSE-VERSION()



NAME
       create-license-version -

DESCRIPTION
       Creates a new version of the specified license.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-license-version
          --license-arn <value>
          --license-name <value>
          --product-name <value>
          --issuer <value>
          --home-region <value>
          --validity <value>
          [--license-metadata <value>]
          --entitlements <value>
          --consumption-configuration <value>
          --status <value>
          --client-token <value>
          [--source-version <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --license-arn (string)
          Amazon Resource Name (ARN) of the license.

       --license-name (string)
          License name.

       --product-name (string)
          Product name.

       --issuer (structure)
          License issuer.

          Name -> (string)
              Issuer name.

          SignKey -> (string)
              Asymmetric KMS key from Key Management Service. The KMS key must
              have a key usage of sign and verify, and support the  RSASSA-PSS
              SHA-256 signing algorithm.

       Shorthand Syntax:

          Name=string,SignKey=string

       JSON Syntax:

          {
            "Name": "string",
            "SignKey": "string"
          }

       --home-region (string)
          Home Region of the license.

       --validity (structure)
          Date   and  time  range  during  which  the  license  is  valid,  in
          ISO8601-UTC format.

          Begin -> (string)
              Start of the time range.

          End -> (string)
              End of the time range.

       Shorthand Syntax:

          Begin=string,End=string

       JSON Syntax:

          {
            "Begin": "string",
            "End": "string"
          }

       --license-metadata (list)
          Information about the license.

          (structure)
              Describes key/value pairs.

              Name -> (string)
                 The key name.

              Value -> (string)
                 The value.

       Shorthand Syntax:

          Name=string,Value=string ...

       JSON Syntax:

          [
            {
              "Name": "string",
              "Value": "string"
            }
            ...
          ]

       --entitlements (list)
          License entitlements.

          (structure)
              Describes a resource entitled for use with a license.

              Name -> (string)
                 Entitlement name.

              Value -> (string)
                 Entitlement resource. Use only if the unit is None.

              MaxCount -> (long)
                 Maximum entitlement count. Use if the unit is not None.

              Overage -> (boolean)
                 Indicates whether overages are allowed.

              Unit -> (string)
                 Entitlement unit.

              AllowCheckIn -> (boolean)
                 Indicates whether check-ins are allowed.

       Shorthand Syntax:

          Name=string,Value=string,MaxCount=long,Overage=boolean,Unit=string,AllowCheckIn=boolean ...

       JSON Syntax:

          [
            {
              "Name": "string",
              "Value": "string",
              "MaxCount": long,
              "Overage": true|false,
              "Unit": "Count"|"None"|"Seconds"|"Microseconds"|"Milliseconds"|"Bytes"|"Kilobytes"|"Megabytes"|"Gigabytes"|"Terabytes"|"Bits"|"Kilobits"|"Megabits"|"Gigabits"|"Terabits"|"Percent"|"Bytes/Second"|"Kilobytes/Second"|"Megabytes/Second"|"Gigabytes/Second"|"Terabytes/Second"|"Bits/Second"|"Kilobits/Second"|"Megabits/Second"|"Gigabits/Second"|"Terabits/Second"|"Count/Second",
              "AllowCheckIn": true|false
            }
            ...
          ]

       --consumption-configuration (structure)
          Configuration for consumption of the license. Choose  a  provisional
          configuration  for  workloads  running with continuous connectivity.
          Choose a borrow configuration for workloads with offline usage.

          RenewType -> (string)
              Renewal frequency.

          ProvisionalConfiguration -> (structure)
              Details about a provisional configuration.

              MaxTimeToLiveInMinutes -> (integer)
                 Maximum time for the provisional configuration, in minutes.

          BorrowConfiguration -> (structure)
              Details about a borrow configuration.

              AllowEarlyCheckIn -> (boolean)
                 Indicates whether early check-ins are allowed.

              MaxTimeToLiveInMinutes -> (integer)
                 Maximum time for the borrow configuration, in minutes.

       Shorthand Syntax:

          RenewType=string,ProvisionalConfiguration={MaxTimeToLiveInMinutes=integer},BorrowConfiguration={AllowEarlyCheckIn=boolean,MaxTimeToLiveInMinutes=integer}

       JSON Syntax:

          {
            "RenewType": "None"|"Weekly"|"Monthly",
            "ProvisionalConfiguration": {
              "MaxTimeToLiveInMinutes": integer
            },
            "BorrowConfiguration": {
              "AllowEarlyCheckIn": true|false,
              "MaxTimeToLiveInMinutes": integer
            }
          }

       --status (string)
          License status.

          Possible values:

          o AVAILABLE

          o PENDING_AVAILABLE

          o DEACTIVATED

          o SUSPENDED

          o EXPIRED

          o PENDING_DELETE

          o DELETED

       --client-token (string)
          Unique, case-sensitive identifier that you  provide  to  ensure  the
          idempotency of the request.

       --source-version (string)
          Current version of the license.

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       LicenseArn -> (string)
          License ARN.

       Version -> (string)
          New version of the license.

       Status -> (string)
          License status.



                                                      CREATE-LICENSE-VERSION()
