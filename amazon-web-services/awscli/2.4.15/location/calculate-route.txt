CALCULATE-ROUTE()                                            CALCULATE-ROUTE()



NAME
       calculate-route -

DESCRIPTION
          Calculates  a  route given the following required parameters: Depar-
          turePosition and  DestinationPosition  .  Requires  that  you  first
          create a route calculator resource .

       By  default,  a  request that doesn't specify a departure time uses the
       best time of day to travel with the best traffic conditions when calcu-
       lating the route.

       Additional options include:

       o Specifying a departure time using either DepartureTime or DepartNow .
         This calculates a route based on predictive traffic data at the given
         time.

       NOTE:
          You  can't  specify  both  DepartureTime  and  DepartNow in a single
          request. Specifying both parameters returns a validation error.

       o Specifying a travel mode using  TravelMode  sets  the  transportation
         mode  used  to calculate the routes. This also lets you specify addi-
         tional route preferences in CarModeOptions if traveling by Car  ,  or
         TruckModeOptions if traveling by Truck .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            calculate-route
          --calculator-name <value>
          [--car-mode-options <value>]
          [--depart-now | --no-depart-now]
          --departure-position <value>
          [--departure-time <value>]
          --destination-position <value>
          [--distance-unit <value>]
          [--include-leg-geometry | --no-include-leg-geometry]
          [--travel-mode <value>]
          [--truck-mode-options <value>]
          [--waypoint-positions <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --calculator-name (string)
          The  name  of  the route calculator resource that you want to use to
          calculate the route.

       --car-mode-options (structure)
          Specifies route preferences when traveling by Car , such as avoiding
          routes that use ferries or tolls.

          Requirements: TravelMode must be specified as Car .

          AvoidFerries -> (boolean)
              Avoids ferries when calculating routes.

              Default Value: false

              Valid Values: false | true

          AvoidTolls -> (boolean)
              Avoids tolls when calculating routes.

              Default Value: false

              Valid Values: false | true

       Shorthand Syntax:

          AvoidFerries=boolean,AvoidTolls=boolean

       JSON Syntax:

          {
            "AvoidFerries": true|false,
            "AvoidTolls": true|false
          }

       --depart-now | --no-depart-now (boolean)
          Sets  the  time  of  departure as the current time. Uses the current
          time to calculate a route. Otherwise, the best time of day to travel
          with the best traffic conditions is used to calculate the route.

          Default Value: false

          Valid Values: false | true

       --departure-position (list)
          The  start position for the route. Defined in WGS 84 format: [longi-
          tude, latitude] .

          o For example, [-123.115, 49.285]

          NOTE:
              If you specify a departure that's not located on a road,  Amazon
              Location moves the position to the nearest road . If Esri is the
              provider for your route calculator, specifying a route  that  is
              longer  than  400  km  returns  a  400 RoutesValidationException
              error.

          Valid Values: [-180 to 180,-90 to 90]

          (double)

       Syntax:

          double double ...

       --departure-time (timestamp)
          Specifies the desired time of departure. Uses the given time to cal-
          culate the route. Otherwise, the best time of day to travel with the
          best traffic conditions is used to calculate the route.

          NOTE:
              Setting a departure time in the past returns a 400 ValidationEx-
              ception error.

          o In  ISO  8601  format:  YYYY-MM-DDThh:mm:ss.sssZ  .  For  example,
            202007-2T12:15:20.000Z+01:00

       --destination-position (list)
          The finish position for the route. Defined in WGS 84 format: [longi-
          tude, latitude] .

          o For example, [-122.339, 47.615]

          NOTE:
              If  you specify a destination that's not located on a road, Ama-
              zon Location moves the position to the nearest road .

          Valid Values: [-180 to 180,-90 to 90]

          (double)

       Syntax:

          double double ...

       --distance-unit (string)
          Set the unit system to specify the distance.

          Default Value: Kilometers

          Possible values:

          o Kilometers

          o Miles

       --include-leg-geometry | --no-include-leg-geometry (boolean)
          Set to include the geometry details in  the  result  for  each  path
          between a pair of positions.

          Default Value: false

          Valid Values: false | true

       --travel-mode (string)
          Specifies  the  mode  of transport when calculating a route. Used in
          estimating the speed of travel and road compatibility.

          The TravelMode you specify also determines  how  you  specify  route
          preferences:

          o If traveling by Car use the CarModeOptions parameter.

          o If traveling by Truck use the TruckModeOptions parameter.

          Default Value: Car

          Possible values:

          o Car

          o Truck

          o Walking

       --truck-mode-options (structure)
          Specifies route preferences when traveling by Truck , such as avoid-
          ing routes that use ferries or tolls, and  truck  specifications  to
          consider when choosing an optimal road.

          Requirements: TravelMode must be specified as Truck .

          AvoidFerries -> (boolean)
              Avoids ferries when calculating routes.

              Default Value: false

              Valid Values: false | true

          AvoidTolls -> (boolean)
              Avoids ferries when calculating routes.

              Default Value: false

              Valid Values: false | true

          Dimensions -> (structure)
              Specifies the truck's dimension specifications including length,
              height, width, and unit of measurement. Used to avoid roads that
              can't support the truck's dimensions.

              Height -> (double)
                 The height of the truck.

                 o For example, 4.5 .

              Length -> (double)
                 The length of the truck.

                 o For example, 15.5 .

              Unit -> (string)
                 Specifies the unit of measurement for the truck dimensions.

                 Default Value: Meters

              Width -> (double)
                 The width of the truck.

                 o For example, 4.5 .

          Weight -> (structure)
              Specifies  the  truck's  weight  specifications  including total
              weight and unit of measurement. Used to avoid roads  that  can't
              support the truck's weight.

              Total -> (double)
                 The total weight of the truck.

                 o For example, 3500 .

              Unit -> (string)
                 The unit of measurement to use for the truck weight.

                 Default Value: Kilograms

       Shorthand Syntax:

          AvoidFerries=boolean,AvoidTolls=boolean,Dimensions={Height=double,Length=double,Unit=string,Width=double},Weight={Total=double,Unit=string}

       JSON Syntax:

          {
            "AvoidFerries": true|false,
            "AvoidTolls": true|false,
            "Dimensions": {
              "Height": double,
              "Length": double,
              "Unit": "Meters"|"Feet",
              "Width": double
            },
            "Weight": {
              "Total": double,
              "Unit": "Kilograms"|"Pounds"
            }
          }

       --waypoint-positions (list)
          Specifies  an  ordered  list  of  up to 23 intermediate positions to
          include along a route between the departure position and destination
          position.

          o For  example, from the DeparturePosition  [-123.115, 49.285] , the
            route follows the order that  the  waypoint  positions  are  given
            [[-122.757, 49.0021],[-122.349, 47.620]]

          NOTE:
              If you specify a waypoint position that's not located on a road,
              Amazon Location moves the position to the nearest road .

              Specifying more than 23 waypoints returns a 400 ValidationExcep-
              tion error.

              If  Esri is the provider for your route calculator, specifying a
              route that is longer than 400 km  returns  a  400  RoutesValida-
              tionException error.

          Valid Values: [-180 to 180,-90 to 90]

          (list)
              (double)

       Shorthand Syntax:

          double,double ...

       JSON Syntax:

          [
            [double, ...]
            ...
          ]

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       Legs -> (list)
          Contains  details  about  each  path  between  a  pair  of positions
          included along a route such as: StartPosition , EndPosition  ,  Dis-
          tance  , DurationSeconds , Geometry , and Steps . The number of legs
          returned corresponds to one fewer than the total number of positions
          in the request.

          For example, a route with a departure position and destination posi-
          tion returns one leg with the positions snapped to a nearby road :

          o The StartPosition is the departure position.

          o The EndPosition is the destination position.

          A route with a waypoint between the departure and destination  posi-
          tion returns two legs with the positions snapped to a nearby road:

          o Leg  1: The StartPosition is the departure position . The EndPosi-
            tion is the waypoint positon.

          o Leg 2: The StartPosition is the waypoint position. The EndPosition
            is the destination position.

          (structure)
              Contains  the calculated route's details for each path between a
              pair of positions. The number of legs  returned  corresponds  to
              one fewer than the total number of positions in the request.

              For  example,  a route with a departure position and destination
              position returns one leg with the positions snapped to a  nearby
              road :

              o The StartPosition is the departure position.

              o The EndPosition is the destination position.

              A  route  with  a waypoint between the departure and destination
              position returns two legs with the positions snapped to a nearby
              road:

              o Leg  1: The StartPosition is the departure position . The End-
                Position is the waypoint positon.

              o Leg 2: The StartPosition is the waypoint position. The  EndPo-
                sition is the destination position.

              Distance -> (double)
                 The  distance between the leg's StartPosition and EndPosition
                 along a calculated route.

                 o The default measurement is Kilometers  unless  the  request
                   specifies a DistanceUnit of Miles .

              DurationSeconds -> (double)
                 The estimated travel time between the leg's StartPosition and
                 EndPosition . The travel mode and  departure  time  that  you
                 specify in the request determines the calculated time.

              EndPosition -> (list)
                 The terminating position of the leg. Follows the format [lon-
                 gitude,latitude] .

                 NOTE:
                     If the EndPosition isn't located on a road, it's  snapped
                     to a nearby road .

                 (double)

              Geometry -> (structure)
                 Contains  the  calculated route's path as a linestring geome-
                 try.

                 LineString -> (list)
                     An ordered list of positions used to plot a  route  on  a
                     map.

                     The  first  position is closest to the start position for
                     the leg, and the last position is the closest to the  end
                     position for the leg.

                     o For     example,     [[-123.117,     49.284],[-123.115,
                       49.285],[-123.115, 49.285]]

                     (list)
                        (double)

              StartPosition -> (list)
                 The starting position of the leg. Follows the format  [longi-
                 tude,latitude] .

                 NOTE:
                     If  the  StartPosition  isn't  located  on  a  road, it's
                     snapped to a nearby road .

                 (double)

              Steps -> (list)
                 Contains a list of steps, which represent  subsections  of  a
                 leg.  Each  step provides instructions for how to move to the
                 next step in the leg such as the step's start  position,  end
                 position, travel distance, travel duration, and geometry off-
                 set.

                 (structure)
                     Represents an element of a leg within  a  route.  A  step
                     contains instructions for how to move to the next step in
                     the leg.

                     Distance -> (double)
                        The travel distance between the  step's  StartPosition
                        and EndPosition .

                     DurationSeconds -> (double)
                        The estimated travel time, in seconds, from the step's
                        StartPosition to the EndPosition . . The  travel  mode
                        and  departure  time  that  you specify in the request
                        determines the calculated time.

                     EndPosition -> (list)
                        The end position of a step. If the position  the  last
                        step  in the leg, this position is the same as the end
                        position of the leg.

                        (double)

                     GeometryOffset -> (integer)
                        Represents the start position, or index, in a sequence
                        of  steps  within  the leg's line string geometry. For
                        example, the index of the first step in a leg geometry
                        is 0 .

                        Included in the response for queries that set Include-
                        LegGeometry to True .

                     StartPosition -> (list)
                        The starting position of a step. If  the  position  is
                        the  first  step in the leg, this position is the same
                        as the start position of the leg.

                        (double)

       Summary -> (structure)
          Contains information about the whole route,  such  as:  RouteBBox  ,
          DataSource , Distance , DistanceUnit , and DurationSeconds .

          DataSource -> (string)
              The  data provider of traffic and road network data used to cal-
              culate the route. Indicates one of the available providers:

              o Esri

              o Here

              For more information about data providers, see  Amazon  Location
              Service data providers .

          Distance -> (double)
              The total distance covered by the route. The sum of the distance
              travelled between every stop on the route.

              NOTE:
                 If Esri is the data source  for  the  route  calculator,  the
                 route  distance  cant  be  greater  than 400 km. If the route
                 exceeds 400 km, the response is a 400  RoutesValidationExcep-
                 tion error.

          DistanceUnit -> (string)
              The unit of measurement for route distances.

          DurationSeconds -> (double)
              The total travel time for the route measured in seconds. The sum
              of the travel time between every stop on the route.

          RouteBBox -> (list)
              Specifies a geographical box surrounding a route. Used  to  zoom
              into  a  route when displaying it in a map. For example, [min x,
              min y, max x, max y] .

              The first 2 bbox parameters describe the lower southwest corner:

              o The  first  bbox  position is the X coordinate or longitude of
                the lower southwest corner.

              o The second bbox position is the Y coordinate  or  latitude  of
                the lower southwest corner.

              The next 2 bbox parameters describe the upper northeast corner:

              o The  third  bbox position is the X coordinate, or longitude of
                the upper northeast corner.

              o The fourth bbox position is the Y coordinate, or  latitude  of
                the upper northeast corner.

              (double)



                                                             CALCULATE-ROUTE()
