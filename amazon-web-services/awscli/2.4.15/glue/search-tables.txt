SEARCH-TABLES()                                                SEARCH-TABLES()



NAME
       search-tables -

DESCRIPTION
       Searches  a  set of tables based on properties in the table metadata as
       well as on the parent database. You can search against text  or  filter
       conditions.

       You  can  only get tables that you have access to based on the security
       policies defined in Lake Formation.  You  need  at  least  a  read-only
       access to the table for it to be returned. If you do not have access to
       all the columns in the  table,  these  columns  will  not  be  searched
       against  when  returning  the  list  of tables back to you. If you have
       access to the columns but not the data in the  columns,  those  columns
       and  the  associated metadata for those columns will be included in the
       search.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            search-tables
          [--catalog-id <value>]
          [--next-token <value>]
          [--filters <value>]
          [--search-text <value>]
          [--sort-criteria <value>]
          [--max-results <value>]
          [--resource-share-type <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --catalog-id (string)
          A unique identifier, consisting of `` account_id `` .

       --next-token (string)
          A continuation token, included if this is a continuation call.

       --filters (list)
          A list of key-value pairs, and  a  comparator  used  to  filter  the
          search results. Returns all entities matching the predicate.

          The  Comparator  member of the PropertyPredicate struct is used only
          for time fields, and can be omitted for  other  field  types.  Also,
          when  comparing string values, such as when Key=Name , a fuzzy match
          algorithm is used. The Key field (for example, the value of the Name
          field)  is  split on certain punctuation characters, for example, -,
          :, #, etc. into tokens. Then each token is exact-match compared with
          the Value member of PropertyPredicate . For example, if Key=Name and
          Value=link , tables named customer-link and xx-link-yy are returned,
          but xxlinkyy is not returned.

          (structure)
              Defines a property predicate.

              Key -> (string)
                 The key of the property.

              Value -> (string)
                 The value of the property.

              Comparator -> (string)
                 The comparator used to compare this property to others.

       Shorthand Syntax:

          Key=string,Value=string,Comparator=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string",
              "Comparator": "EQUALS"|"GREATER_THAN"|"LESS_THAN"|"GREATER_THAN_EQUALS"|"LESS_THAN_EQUALS"
            }
            ...
          ]

       --search-text (string)
          A string used for a text search.

          Specifying  a value in quotes filters based on an exact match to the
          value.

       --sort-criteria (list)
          A list of criteria for sorting the results by a field  name,  in  an
          ascending or descending order.

          (structure)
              Specifies a field to sort by and a sort order.

              FieldName -> (string)
                 The name of the field on which to sort.

              Sort -> (string)
                 An ascending or descending sort.

       Shorthand Syntax:

          FieldName=string,Sort=string ...

       JSON Syntax:

          [
            {
              "FieldName": "string",
              "Sort": "ASC"|"DESC"
            }
            ...
          ]

       --max-results (integer)
          The maximum number of tables to return in a single response.

       --resource-share-type (string)
          Allows you to specify that you want to search the tables shared with
          your account. The allowable values are FOREIGN or ALL .

          o If set to FOREIGN ,  will  search  the  tables  shared  with  your
            account.

          o If  set  to ALL , will search the tables shared with your account,
            as well as the tables in yor local account.

          Possible values:

          o FOREIGN

          o ALL

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       NextToken -> (string)
          A continuation token, present if the current list segment is not the
          last.

       TableList -> (list)
          A  list  of  the  requested Table objects. The SearchTables response
          returns only the tables that you have access to.

          (structure)
              Represents a collection of related data organized in columns and
              rows.

              Name -> (string)
                 The table name. For Hive compatibility, this must be entirely
                 lowercase.

              DatabaseName -> (string)
                 The name of the database where the  table  metadata  resides.
                 For Hive compatibility, this must be all lowercase.

              Description -> (string)
                 A description of the table.

              Owner -> (string)
                 The owner of the table.

              CreateTime -> (timestamp)
                 The  time  when  the table definition was created in the Data
                 Catalog.

              UpdateTime -> (timestamp)
                 The last time that the table was updated.

              LastAccessTime -> (timestamp)
                 The last time that the table was accessed.  This  is  usually
                 taken from HDFS, and might not be reliable.

              LastAnalyzedTime -> (timestamp)
                 The  last  time that column statistics were computed for this
                 table.

              Retention -> (integer)
                 The retention time for this table.

              StorageDescriptor -> (structure)
                 A storage descriptor containing information about the  physi-
                 cal storage of this table.

                 Columns -> (list)
                     A list of the Columns in the table.

                     (structure)
                        A column in a Table .

                        Name -> (string)
                            The name of the Column .

                        Type -> (string)
                            The data type of the Column .

                        Comment -> (string)
                            A free-form text comment.

                        Parameters -> (map)
                            These key-value pairs define properties associated
                            with the column.

                            key -> (string)

                            value -> (string)

                 Location -> (string)
                     The physical location of  the  table.  By  default,  this
                     takes the form of the warehouse location, followed by the
                     database location in the warehouse, followed by the table
                     name.

                 AdditionalLocations -> (list)
                     (string)

                 InputFormat -> (string)
                     The  input  format:  SequenceFileInputFormat (binary), or
                     TextInputFormat , or a custom format.

                 OutputFormat -> (string)
                     The output format: SequenceFileOutputFormat (binary),  or
                     IgnoreKeyTextOutputFormat , or a custom format.

                 Compressed -> (boolean)
                     True  if the data in the table is compressed, or False if
                     not.

                 NumberOfBuckets -> (integer)
                     Must be specified if the  table  contains  any  dimension
                     columns.

                 SerdeInfo -> (structure)
                     The serialization/deserialization (SerDe) information.

                     Name -> (string)
                        Name of the SerDe.

                     SerializationLibrary -> (string)
                        Usually  the class that implements the SerDe. An exam-
                        ple  is  org.apache.hadoop.hive.serde2.columnar.Colum-
                        narSerDe .

                     Parameters -> (map)
                        These key-value pairs define initialization parameters
                        for the SerDe.

                        key -> (string)

                        value -> (string)

                 BucketColumns -> (list)
                     A list of reducer grouping columns,  clustering  columns,
                     and bucketing columns in the table.

                     (string)

                 SortColumns -> (list)
                     A  list  specifying  the sort order of each bucket in the
                     table.

                     (structure)
                        Specifies the sort order of a sorted column.

                        Column -> (string)
                            The name of the column.

                        SortOrder -> (integer)
                            Indicates that the column is sorted  in  ascending
                            order (== 1 ), or in descending order (==0 ).

                 Parameters -> (map)
                     The user-supplied properties in key-value form.

                     key -> (string)

                     value -> (string)

                 SkewedInfo -> (structure)
                     The  information about values that appear frequently in a
                     column (skewed values).

                     SkewedColumnNames -> (list)
                        A list of names of columns that contain skewed values.

                        (string)

                     SkewedColumnValues -> (list)
                        A  list  of  values that appear so frequently as to be
                        considered skewed.

                        (string)

                     SkewedColumnValueLocationMaps -> (map)
                        A mapping of skewed values to the columns that contain
                        them.

                        key -> (string)

                        value -> (string)

                 StoredAsSubDirectories -> (boolean)
                     True  if  the  table data is stored in subdirectories, or
                     False if not.

                 SchemaReference -> (structure)
                     An object that references a schema  stored  in  the  Glue
                     Schema Registry.

                     When creating a table, you can pass an empty list of col-
                     umns for the schema, and instead use a schema  reference.

                     SchemaId -> (structure)
                        A  structure  that  contains  schema  identity fields.
                        Either this or the SchemaVersionId has to be provided.

                        SchemaArn -> (string)
                            The  Amazon Resource Name (ARN) of the schema. One
                            of SchemaArn or SchemaName has to be provided.

                        SchemaName -> (string)
                            The name of the schema. One of SchemaArn or Schem-
                            aName has to be provided.

                        RegistryName -> (string)
                            The  name of the schema registry that contains the
                            schema.

                     SchemaVersionId -> (string)
                        The unique ID assigned to a  version  of  the  schema.
                        Either this or the SchemaId has to be provided.

                     SchemaVersionNumber -> (long)
                        The version number of the schema.

              PartitionKeys -> (list)
                 A  list  of  columns  by which the table is partitioned. Only
                 primitive types are supported as partition keys.

                 When you create a table used by Amazon Athena, and you do not
                 specify  any  partitionKeys , you must at least set the value
                 of partitionKeys to an empty list. For example:
                     "PartitionKeys": []

                 (structure)
                     A column in a Table .

                     Name -> (string)
                        The name of the Column .

                     Type -> (string)
                        The data type of the Column .

                     Comment -> (string)
                        A free-form text comment.

                     Parameters -> (map)
                        These key-value  pairs  define  properties  associated
                        with the column.

                        key -> (string)

                        value -> (string)

              ViewOriginalText -> (string)
                 If the table is a view, the original text of the view; other-
                 wise null .

              ViewExpandedText -> (string)
                 If the table is a view, the expanded text of the view; other-
                 wise null .

              TableType -> (string)
                 The  type  of  this  table  (EXTERNAL_TABLE  , VIRTUAL_VIEW ,
                 etc.).

              Parameters -> (map)
                 These key-value pairs define properties associated  with  the
                 table.

                 key -> (string)

                 value -> (string)

              CreatedBy -> (string)
                 The person or entity who created the table.

              IsRegisteredWithLakeFormation -> (boolean)
                 Indicates  whether  the  table  has been registered with Lake
                 Formation.

              TargetTable -> (structure)
                 A TableIdentifier structure that describes a target table for
                 resource linking.

                 CatalogId -> (string)
                     The ID of the Data Catalog in which the table resides.

                 DatabaseName -> (string)
                     The name of the catalog database that contains the target
                     table.

                 Name -> (string)
                     The name of the target table.

              CatalogId -> (string)
                 The ID of the Data Catalog in which the table resides.



                                                               SEARCH-TABLES()
