GET-PLAN()                                                          GET-PLAN()



NAME
       get-plan -

DESCRIPTION
       Gets code to perform a specified mapping.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            get-plan
          --mapping <value>
          --source <value>
          [--sinks <value>]
          [--location <value>]
          [--language <value>]
          [--additional-plan-options-map <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --mapping (list)
          The list of mappings from a source table to target tables.

          (structure)
              Defines a mapping.

              SourceTable -> (string)
                 The name of the source table.

              SourcePath -> (string)
                 The source path.

              SourceType -> (string)
                 The source type.

              TargetTable -> (string)
                 The target table.

              TargetPath -> (string)
                 The target path.

              TargetType -> (string)
                 The target type.

       Shorthand Syntax:

          SourceTable=string,SourcePath=string,SourceType=string,TargetTable=string,TargetPath=string,TargetType=string ...

       JSON Syntax:

          [
            {
              "SourceTable": "string",
              "SourcePath": "string",
              "SourceType": "string",
              "TargetTable": "string",
              "TargetPath": "string",
              "TargetType": "string"
            }
            ...
          ]

       --source (structure)
          The source table.

          DatabaseName -> (string)
              The database in which the table metadata resides.

          TableName -> (string)
              The name of the table in question.

       Shorthand Syntax:

          DatabaseName=string,TableName=string

       JSON Syntax:

          {
            "DatabaseName": "string",
            "TableName": "string"
          }

       --sinks (list)
          The target tables.

          (structure)
              Specifies a table definition in the Glue Data Catalog.

              DatabaseName -> (string)
                 The database in which the table metadata resides.

              TableName -> (string)
                 The name of the table in question.

       Shorthand Syntax:

          DatabaseName=string,TableName=string ...

       JSON Syntax:

          [
            {
              "DatabaseName": "string",
              "TableName": "string"
            }
            ...
          ]

       --location (structure)
          The parameters for the mapping.

          Jdbc -> (list)
              A JDBC location.

              (structure)
                 An argument or property of a node.

                 Name -> (string)
                     The name of the argument or property.

                 Value -> (string)
                     The value of the argument or property.

                 Param -> (boolean)
                     True if the value is used as a parameter.

          S3 -> (list)
              An Amazon Simple Storage Service (Amazon S3) location.

              (structure)
                 An argument or property of a node.

                 Name -> (string)
                     The name of the argument or property.

                 Value -> (string)
                     The value of the argument or property.

                 Param -> (boolean)
                     True if the value is used as a parameter.

          DynamoDB -> (list)
              An Amazon DynamoDB table location.

              (structure)
                 An argument or property of a node.

                 Name -> (string)
                     The name of the argument or property.

                 Value -> (string)
                     The value of the argument or property.

                 Param -> (boolean)
                     True if the value is used as a parameter.

       Shorthand Syntax:

          Jdbc=[{Name=string,Value=string,Param=boolean},{Name=string,Value=string,Param=boolean}],S3=[{Name=string,Value=string,Param=boolean},{Name=string,Value=string,Param=boolean}],DynamoDB=[{Name=string,Value=string,Param=boolean},{Name=string,Value=string,Param=boolean}]

       JSON Syntax:

          {
            "Jdbc": [
              {
                "Name": "string",
                "Value": "string",
                "Param": true|false
              }
              ...
            ],
            "S3": [
              {
                "Name": "string",
                "Value": "string",
                "Param": true|false
              }
              ...
            ],
            "DynamoDB": [
              {
                "Name": "string",
                "Value": "string",
                "Param": true|false
              }
              ...
            ]
          }

       --language (string)
          The programming language of the code to perform the mapping.

          Possible values:

          o PYTHON

          o SCALA

       --additional-plan-options-map (map)
          A map to hold additional optional key-value parameters.

          Currently, these key-value pairs are supported:

          o inferSchema  Specifies whether to set inferSchema to true or false
            for the default script generated by an Glue job. For  example,  to
            set  inferSchema  to  true,  pass  the  following  key value pair:
            --additional-plan-options-map '{"inferSchema":"true"}'

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To get the generated code for mapping data from source tables to target
       tables

       The following get-plan retrieves the generated code for mapping columns
       from the data source to the data target.

          aws glue get-plan --mapping '[ \
              { \
                  "SourcePath":"sensorid", \
                  "SourceTable":"anything", \
                  "SourceType":"int", \
                  "TargetPath":"sensorid", \
                  "TargetTable":"anything", \
                  "TargetType":"int" \
              }, \
              { \
                  "SourcePath":"currenttemperature", \
                  "SourceTable":"anything", \
                  "SourceType":"int", \
                  "TargetPath":"currenttemperature", \
                  "TargetTable":"anything", \
                  "TargetType":"int" \
              }, \
              { \
                  "SourcePath":"status", \
                  "SourceTable":"anything", \
                  "SourceType":"string", \
                  "TargetPath":"status", \
                  "TargetTable":"anything", \
                  "TargetType":"string" \
              }]' \
              --source '{ \
                  "DatabaseName":"tempdb", \
                  "TableName":"s3-source" \
              }' \
              --sinks '[ \
                  { \
                      "DatabaseName":"tempdb", \
                      "TableName":"my-s3-sink" \
                  }]'
              --language "scala"
              --endpoint https://glue.us-east-1.amazonaws.com
              --output "text"

       Output:

          import com.amazonaws.services.glue.ChoiceOption
          import com.amazonaws.services.glue.GlueContext
          import com.amazonaws.services.glue.MappingSpec
          import com.amazonaws.services.glue.ResolveSpec
          import com.amazonaws.services.glue.errors.CallSite
          import com.amazonaws.services.glue.util.GlueArgParser
          import com.amazonaws.services.glue.util.Job
          import com.amazonaws.services.glue.util.JsonOptions
          import org.apache.spark.SparkContext
          import scala.collection.JavaConverters._

          object GlueApp {
            def main(sysArgs: Array[String]) {
              val spark: SparkContext = new SparkContext()
              val glueContext: GlueContext = new GlueContext(spark)
              // @params: [JOB_NAME]
              val args = GlueArgParser.getResolvedOptions(sysArgs, Seq("JOB_NAME").toArray)
              Job.init(args("JOB_NAME"), glueContext, args.asJava)
              // @type: DataSource
              // @args: [database = "tempdb", table_name = "s3-source", transformation_ctx = "datasource0"]
              // @return: datasource0
              // @inputs: []
              val datasource0 = glueContext.getCatalogSource(database = "tempdb", tableName = "s3-source", redshiftTmpDir = "", transformationContext = "datasource0").getDynamicFrame()
              // @type: ApplyMapping
              // @args: [mapping = [("sensorid", "int", "sensorid", "int"), ("currenttemperature", "int", "currenttemperature", "int"), ("status", "string", "status", "string")], transformation_ctx = "applymapping1"]
              // @return: applymapping1
              // @inputs: [frame = datasource0]
              val applymapping1 = datasource0.applyMapping(mappings = Seq(("sensorid", "int", "sensorid", "int"), ("currenttemperature", "int", "currenttemperature", "int"), ("status", "string", "status", "string")), caseSensitive = false, transformationContext = "applymapping1")
              // @type: SelectFields
              // @args: [paths = ["sensorid", "currenttemperature", "status"], transformation_ctx = "selectfields2"]
              // @return: selectfields2
              // @inputs: [frame = applymapping1]
              val selectfields2 = applymapping1.selectFields(paths = Seq("sensorid", "currenttemperature", "status"), transformationContext = "selectfields2")
              // @type: ResolveChoice
              // @args: [choice = "MATCH_CATALOG", database = "tempdb", table_name = "my-s3-sink", transformation_ctx = "resolvechoice3"]
              // @return: resolvechoice3
              // @inputs: [frame = selectfields2]
              val resolvechoice3 = selectfields2.resolveChoice(choiceOption = Some(ChoiceOption("MATCH_CATALOG")), database = Some("tempdb"), tableName = Some("my-s3-sink"), transformationContext = "resolvechoice3")
              // @type: DataSink
              // @args: [database = "tempdb", table_name = "my-s3-sink", transformation_ctx = "datasink4"]
              // @return: datasink4
              // @inputs: [frame = resolvechoice3]
              val datasink4 = glueContext.getCatalogSink(database = "tempdb", tableName = "my-s3-sink", redshiftTmpDir = "", transformationContext = "datasink4").writeDynamicFrame(resolvechoice3)
              Job.commit()
            }
          }

       For more information, see Editing Scripts in AWS Glue in the  AWS  Glue
       Developer Guide.

OUTPUT
       PythonScript -> (string)
          A Python script to perform the mapping.

       ScalaCode -> (string)
          The Scala code to perform the mapping.



                                                                    GET-PLAN()
