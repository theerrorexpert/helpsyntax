CREATE-SCHEMA()                                                CREATE-SCHEMA()



NAME
       create-schema -

DESCRIPTION
       Creates  a  new schema set and registers the schema definition. Returns
       an error if the schema set already exists without actually  registering
       the version.

       When the schema set is created, a version checkpoint will be set to the
       first version. Compatibility mode "DISABLED" restricts  any  additional
       schema  versions  from  being added after the first schema version. For
       all other compatibility modes,  validation  of  compatibility  settings
       will be applied only from the second version onwards when the Register-
       SchemaVersion API is used.

       When this API is called without a RegistryId  ,  this  will  create  an
       entry  for  a "default-registry" in the registry database tables, if it
       is not already present.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-schema
          [--registry-id <value>]
          --schema-name <value>
          --data-format <value>
          [--compatibility <value>]
          [--description <value>]
          [--tags <value>]
          [--schema-definition <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --registry-id (structure)
          This is a wrapper shape to contain the registry identity fields.  If
          this  is  not  provided,  the default registry will be used. The ARN
          format  for  the  same  will  be:   arn:aws:glue:us-east-2:<customer
          id>:registry/default-registry:random-5-letter-id .

          RegistryName -> (string)
              Name  of  the registry. Used only for lookup. One of RegistryArn
              or RegistryName has to be provided.

          RegistryArn -> (string)
              Arn of the registry to be updated. One of  RegistryArn  or  Reg-
              istryName has to be provided.

       Shorthand Syntax:

          RegistryName=string,RegistryArn=string

       JSON Syntax:

          {
            "RegistryName": "string",
            "RegistryArn": "string"
          }

       --schema-name (string)
          Name  of the schema to be created of max length of 255, and may only
          contain letters, numbers, hyphen, underscore, dollar sign,  or  hash
          mark. No whitespace.

       --data-format (string)
          The  data  format  of the schema definition. Currently AVRO and JSON
          are supported.

          Possible values:

          o AVRO

          o JSON

       --compatibility (string)
          The compatibility mode of the schema. The possible values are:

          o NONE : No compatibility mode applies. You can use this  choice  in
            development scenarios or if you do not know the compatibility mode
            that you want to apply to schemas. Any new version added  will  be
            accepted without undergoing a compatibility check.

          o DISABLED  :  This  compatibility  choice prevents versioning for a
            particular schema. You can use this choice to prevent future  ver-
            sioning of a schema.

          o BACKWARD  :  This compatibility choice is recommended as it allows
            data receivers to read both the current and  one  previous  schema
            version. This means that for instance, a new schema version cannot
            drop data fields or change the type of these fields, so they can't
            be read by readers using the previous version.

          o BACKWARD_ALL  : This compatibility choice allows data receivers to
            read both the current and all previous schema  versions.  You  can
            use  this  choice  when  you need to delete fields or add optional
            fields, and check compatibility against all previous  schema  ver-
            sions.

          o FORWARD  : This compatibility choice allows data receivers to read
            both the current and one next schema version, but not  necessarily
            later  versions.  You  can  use  this  choice when you need to add
            fields or delete optional fields,  but  only  check  compatibility
            against the last schema version.

          o FORWARD_ALL  :  This compatibility choice allows data receivers to
            read written by producers of any new registered  schema.  You  can
            use  this  choice  when  you need to add fields or delete optional
            fields, and check compatibility against all previous  schema  ver-
            sions.

          o FULL  :  This  compatibility  choice allows data receivers to read
            data written by producers using the previous or  next  version  of
            the schema, but not necessarily earlier or later versions. You can
            use this choice when you need to add or  remove  optional  fields,
            but only check compatibility against the last schema version.

          o FULL_ALL : This compatibility choice allows data receivers to read
            data written by producers using all previous schema versions.  You
            can  use  this  choice  when  you  need  to add or remove optional
            fields, and check compatibility against all previous  schema  ver-
            sions.

          Possible values:

          o NONE

          o DISABLED

          o BACKWARD

          o BACKWARD_ALL

          o FORWARD

          o FORWARD_ALL

          o FULL

          o FULL_ALL

       --description (string)
          An  optional  description  of the schema. If description is not pro-
          vided, there will not be any automatic default value for this.

       --tags (map)
          Amazon Web Services tags that contain a key value pair  and  may  be
          searched by console, command line, or API. If specified, follows the
          Amazon Web Services tags-on-create pattern.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --schema-definition (string)
          The schema definition using the DataFormat setting for SchemaName  .

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       RegistryName -> (string)
          The name of the registry.

       RegistryArn -> (string)
          The Amazon Resource Name (ARN) of the registry.

       SchemaName -> (string)
          The name of the schema.

       SchemaArn -> (string)
          The Amazon Resource Name (ARN) of the schema.

       Description -> (string)
          A description of the schema if specified when created.

       DataFormat -> (string)
          The  data  format  of the schema definition. Currently AVRO and JSON
          are supported.

       Compatibility -> (string)
          The schema compatibility mode.

       SchemaCheckpoint -> (long)
          The version number of the checkpoint (the last time the  compatibil-
          ity mode was changed).

       LatestSchemaVersion -> (long)
          The latest version of the schema associated with the returned schema
          definition.

       NextSchemaVersion -> (long)
          The next version of the schema associated with the  returned  schema
          definition.

       SchemaStatus -> (string)
          The status of the schema.

       Tags -> (map)
          The tags for the schema.

          key -> (string)

          value -> (string)

       SchemaVersionId -> (string)
          The unique identifier of the first schema version.

       SchemaVersionStatus -> (string)
          The status of the first schema version created.



                                                               CREATE-SCHEMA()
