ENCRYPT()                                                            ENCRYPT()



NAME
       encrypt -

DESCRIPTION
       Encrypts  plaintext  into  ciphertext  by  using a KMS key. The Encrypt
       operation has two primary use cases:

       o You can encrypt small amounts of arbitrary data, such as  a  personal
         identifier or database password, or other sensitive information.

       o You  can  use  the  Encrypt operation to move encrypted data from one
         Amazon Web Services Region to another. For example, in Region A, gen-
         erate  a  data  key  and  use the plaintext key to encrypt your data.
         Then, in Region A, use the Encrypt operation to encrypt the plaintext
         data key under a KMS key in Region B. Now, you can move the encrypted
         data and the encrypted data key to Region B. When necessary, you  can
         decrypt the encrypted data key and the encrypted data entirely within
         in Region B.

       You don't need to use the Encrypt operation to encrypt a data key.  The
       GenerateDataKey  and  GenerateDataKeyPair operations return a plaintext
       data key and an encrypted copy of that data key.

       When you encrypt data, you must specify a symmetric or  asymmetric  KMS
       key  to  use  in  the  encryption  operation.  The  KMS key must have a
       KeyUsage value of ENCRYPT_DECRYPT. To find the KeyUsage of a  KMS  key,
       use the  DescribeKey operation.

       If  you  use  a symmetric KMS key, you can use an encryption context to
       add additional security to your encryption operation. If you specify an
       EncryptionContext  when  encrypting  data,  you  must  specify the same
       encryption context (a case-sensitive exact match) when  decrypting  the
       data. Otherwise, the request to decrypt fails with an InvalidCiphertex-
       tException . For more information, see Encryption Context  in  the  Key
       Management Service Developer Guide .

       If you specify an asymmetric KMS key, you must also specify the encryp-
       tion algorithm. The algorithm must be compatible with the KMS key type.

       WARNING:
          When  you use an asymmetric KMS key to encrypt or reencrypt data, be
          sure to record the KMS key and encryption algorithm that you choose.
          You  will  be  required  to  provide the same KMS key and encryption
          algorithm when you decrypt the data. If the KMS key and algorithm do
          not match the values used to encrypt the data, the decrypt operation
          fails.

          You are not required to supply the key ID and  encryption  algorithm
          when  you  decrypt  with  symmetric KMS keys because KMS stores this
          information in the ciphertext blob. KMS  cannot  store  metadata  in
          ciphertext  generated  with asymmetric keys. The standard format for
          asymmetric key ciphertext does not include configurable fields.

       The maximum size of the data that you can encrypt varies with the  type
       of KMS key and the encryption algorithm that you choose.

       o Symmetric KMS keys

         o SYMMETRIC_DEFAULT : 4096 bytes

       o RSA_2048

         o RSAES_OAEP_SHA_1 : 214 bytes

         o RSAES_OAEP_SHA_256 : 190 bytes

       o RSA_3072

         o RSAES_OAEP_SHA_1 : 342 bytes

         o RSAES_OAEP_SHA_256 : 318 bytes

       o RSA_4096

         o RSAES_OAEP_SHA_1 : 470 bytes

         o RSAES_OAEP_SHA_256 : 446 bytes

       The KMS key that you use for this operation must be in a compatible key
       state. For details, see Key state: Effect on your KMS key  in  the  Key
       Management Service Developer Guide .
          Cross-account use : Yes. To perform this operation with a KMS key in
          a different Amazon Web Services account,  specify  the  key  ARN  or
          alias ARN in the value of the KeyId parameter.

          Required permissions : kms:Encrypt (key policy)

          Related operations:

       o Decrypt

       o GenerateDataKey

       o GenerateDataKeyPair

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            encrypt
          --key-id <value>
          --plaintext <value>
          [--encryption-context <value>]
          [--grant-tokens <value>]
          [--encryption-algorithm <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --key-id (string)
          Identifies the KMS key to use in the encryption operation.

          To  specify a KMS key, use its key ID, key ARN, alias name, or alias
          ARN. When using an alias name, prefix it with "alias/" . To  specify
          a  KMS  key in a different Amazon Web Services account, you must use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To get the key ID and key ARN  for  a  KMS  key,  use   ListKeys  or
          DescribeKey  . To get the alias name and alias ARN, use  ListAliases
          .

       --plaintext (blob)
          Data to be encrypted.

       --encryption-context (map)
          Specifies the encryption context that will be used  to  encrypt  the
          data.  An  encryption context is valid only for cryptographic opera-
          tions with a symmetric KMS key. The standard  asymmetric  encryption
          algorithms that KMS uses do not support an encryption context.

          An  encryption context is a collection of non-secret key-value pairs
          that represents additional  authenticated  data.  When  you  use  an
          encryption  context  to  encrypt data, you must specify the same (an
          exact case-sensitive match) encryption context to decrypt the  data.
          An  encryption  context is optional when encrypting with a symmetric
          KMS key, but it is highly recommended.

          For more information, see Encryption Context in the  Key  Management
          Service Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --grant-tokens (list)
          A list of grant tokens.

          Use  a grant token when your permission to call this operation comes
          from a new grant that has not yet achieved  eventual  consistency  .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --encryption-algorithm (string)
          Specifies the encryption algorithm that KMS will use to encrypt  the
          plaintext message. The algorithm must be compatible with the KMS key
          that you specify.

          This parameter is required only for asymmetric KMS keys. The default
          value,  SYMMETRIC_DEFAULT  , is the algorithm used for symmetric KMS
          keys.  If  you  are  using  an  asymmetric  KMS  key,  we  recommend
          RSAES_OAEP_SHA_256.

          Possible values:

          o SYMMETRIC_DEFAULT

          o RSAES_OAEP_SHA_1

          o RSAES_OAEP_SHA_256

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To encrypt the contents of a file on Linux or MacOS

       The  following  encrypt  command  demonstrates  the  recommended way to
       encrypt data with the AWS CLI.

          aws kms encrypt \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --plaintext fileb://ExamplePlaintextFile \
              --output text \
              --query CiphertextBlob | base64 \
              --decode > ExampleEncryptedFile

       The command does several things:

       1. Uses the fileb:// prefix to specify the --plaintext parameter.
             The fileb:// prefix  instructs  the  CLI  to  read  the  data  to
             encrypt,  called  the  plaintext, from a file and pass the file's
             contents to the command's --plaintext parameter. If the  file  is
             not  in  the  current  directory, type the full path to file. For
             example:         fileb:///var/tmp/ExamplePlaintextFile         or
             fileb://C:\Temp\ExamplePlaintextFile.

             For  more information about reading AWS CLI parameter values from
             a file, see Loading Parameters from a File  in  the  AWS  Command
             Line  Interface  User  Guide  and  Best  Practices for Local File
             Parameters on the AWS Command Line Tool Blog

       2. Uses the --output and --query parameters to  control  the  command's
          output.
             These  parameters  extract the encrypted data, called the cipher-
             text, from the command's output.

             For more information about controlling  output,  see  Controlling
             Command Output in the AWS Command Line Interface User Guide.

       3. Uses the base64 utility to decode the extracted output.
             This utility decodes the extracted ciphertext to binary data. The
             ciphertext that is returned by a successful  encrypt  command  is
             base64-encoded text. You must decode this text before you can use
             the AWS CLI to decrypt it.

       4. Saves the binary ciphertext to a file.
             The final part of the command (> ExampleEncryptedFile) saves  the
             binary  ciphertext  to  a  file to make decryption easier. For an
             example command that uses the AWS CLI to decrypt  data,  see  the
             decrypt examples.

       Example 2: Using the AWS CLI to encrypt data on Windows

       The preceding example assumes the base64 utility is available, which is
       commonly the case on Linux and MacOS. For the Windows  command  prompt,
       use certutil instead of base64. This requires two commands, as shown in
       the following examples.

          aws kms encrypt \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --plaintext fileb://ExamplePlaintextFile \
              --output text \
              --query CiphertextBlob > C:\Temp\ExampleEncryptedFile.base64

          certutil -decode C:\Temp\ExampleEncryptedFile.base64 C:\Temp\ExampleEncryptedFile

OUTPUT
       CiphertextBlob -> (blob)
          The encrypted plaintext. When you use the HTTP API or the Amazon Web
          Services  CLI,  the  value  is  Base64-encoded. Otherwise, it is not
          Base64-encoded.

       KeyId -> (string)
          The Amazon Resource Name (key ARN ) of the KMS key that was used  to
          encrypt the plaintext.

       EncryptionAlgorithm -> (string)
          The encryption algorithm that was used to encrypt the plaintext.



                                                                     ENCRYPT()
