SIGN()                                                                  SIGN()



NAME
       sign -

DESCRIPTION
       Creates  a  digital  signature for a message or message digest by using
       the private key in an asymmetric KMS key. To verify the signature,  use
       the  Verify operation, or use the public key in the same asymmetric KMS
       key outside of KMS. For information about symmetric and asymmetric  KMS
       keys, see Using Symmetric and Asymmetric KMS keys in the Key Management
       Service Developer Guide .

       Digital signatures are generated and verified by using  asymmetric  key
       pair,  such  as an RSA or ECC pair that is represented by an asymmetric
       KMS key. The key owner (or an authorized user) uses their  private  key
       to  sign a message. Anyone with the public key can verify that the mes-
       sage was signed with that particular private key and that  the  message
       hasn't changed since it was signed.

       To use the Sign operation, provide the following information:

       o Use  the  KeyId  parameter  to  identify an asymmetric KMS key with a
         KeyUsage value of SIGN_VERIFY . To get the KeyUsage value  of  a  KMS
         key,  use  the   DescribeKey operation. The caller must have kms:Sign
         permission on the KMS key.

       o Use the Message parameter to specify the message or message digest to
         sign.  You  can submit messages of up to 4096 bytes. To sign a larger
         message, generate a hash digest of the message, and then provide  the
         hash digest in the Message parameter. To indicate whether the message
         is a full message or a digest, use the MessageType parameter.

       o Choose a signing algorithm that is compatible with the KMS key.

       WARNING:
          When signing a message, be sure to record the KMS key and the  sign-
          ing algorithm. This information is required to verify the signature.

       To verify the signature that this operation generates, use the   Verify
       operation.  Or  use  the  GetPublicKey operation to download the public
       key and then use the public key to verify the signature outside of KMS.

       The KMS key that you use for this operation must be in a compatible key
       state. For details, see Key state: Effect on your KMS key  in  the  Key
       Management Service Developer Guide .
          Cross-account use : Yes. To perform this operation with a KMS key in
          a different Amazon Web Services account,  specify  the  key  ARN  or
          alias ARN in the value of the KeyId parameter.

          Required permissions : kms:Sign (key policy)

          Related operations :  Verify

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            sign
          --key-id <value>
          --message <value>
          [--message-type <value>]
          [--grant-tokens <value>]
          --signing-algorithm <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --key-id (string)
          Identifies  an  asymmetric  KMS key. KMS uses the private key in the
          asymmetric KMS key to sign the message. The KeyUsage type of the KMS
          key must be SIGN_VERIFY . To find the KeyUsage of a KMS key, use the
          DescribeKey operation.

          To specify a KMS key, use its key ID, key ARN, alias name, or  alias
          ARN.  When using an alias name, prefix it with "alias/" . To specify
          a KMS key in a different Amazon Web Services account, you  must  use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To  get  the  key  ID  and  key  ARN for a KMS key, use  ListKeys or
          DescribeKey . To get the alias name and alias ARN, use   ListAliases
          .

       --message (blob)
          Specifies  the  message  or  message digest to sign. Messages can be
          0-4096 bytes. To sign a larger message, provide the message  digest.

          If you provide a message, KMS generates a hash digest of the message
          and then signs it.

       --message-type (string)
          Tells KMS whether the value of the Message parameter is a message or
          message  digest.  The  default  value,  RAW, indicates a message. To
          indicate a message digest, enter DIGEST .

          Possible values:

          o RAW

          o DIGEST

       --grant-tokens (list)
          A list of grant tokens.

          Use a grant token when your permission to call this operation  comes
          from  a  new  grant that has not yet achieved eventual consistency .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --signing-algorithm (string)
          Specifies the signing algorithm to use when signing the message.

          Choose an algorithm that is compatible with the type and size of the
          specified asymmetric KMS key.

          Possible values:

          o RSASSA_PSS_SHA_256

          o RSASSA_PSS_SHA_384

          o RSASSA_PSS_SHA_512

          o RSASSA_PKCS1_V1_5_SHA_256

          o RSASSA_PKCS1_V1_5_SHA_384

          o RSASSA_PKCS1_V1_5_SHA_512

          o ECDSA_SHA_256

          o ECDSA_SHA_384

          o ECDSA_SHA_512

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To generate a digital signature for a message

       The following sign example generates a cryptographic  signature  for  a
       short  message.  The  output  of the command includes a base-64 encoded
       Signature field that you can verify by using the verify command.

       You must also specify a signing algorithm that your  CMK  supports.  To
       get  the signing algorithms for your CMK, use the describe-key command.

       Before running this command, replace the example key ID  with  a  valid
       key  ID  from your AWS account. The key ID must represent an asymmetric
       CMK with a key usage of SIGN_VERIFY.

          aws kms sign \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --message 'hello world' \
              --message-type RAW \
              --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256

       Output:

          {
              "KeyId": "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab",
              "Signature": "ABCDEFhpyVYyTxbafE74ccSvEJLJr3zuoV1Hfymz4qv+/fxmxNLA7SE1SiF8lHw80fKZZ3bJ...",
              "SigningAlgorithm": "RSASSA_PKCS1_V1_5_SHA_256"
          }

       For more information about using asymmetric CMKs in AWS KMS, see
       `Using Symmetric and Asymmetric Keys<https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__
        in the AWS Key Management Service API Reference.

       Example 2: To save a digital signature in a file (Linux and macOs)

       The following sign example generates a cryptographic  signature  for  a
       short  message stored in a local file. The command also gets the Signa-
       ture property from the response, Base64-decodes it and saves it in  the
       ExampleSignature  file. You can use the signature file in a verify com-
       mand that verifies the signature.

       The sign command requires a signing algorithm. To get the signing algo-
       rithms that your CMK supports, use the describe-key command.

       Before  running  this  command, replace the example key ID with a valid
       key ID from your AWS account. The key ID must represent  an  asymmetric
       CMK with a key usage of SIGN_VERIFY.

          aws kms sign \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --message fileb://originalString \
              --message-type RAW \
              --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256 \
              --output text \
              --query Signature | base64 --decode > ExampleSignature

       This  command  produces  no output. This example extracts the Signature
       property of the output and saves it in a file.

       For more information about using asymmetric CMKs in AWS KMS, see  Using
       Symmetric  and  Asymmetric  Keys  in the AWS Key Management Service API
       Reference.

OUTPUT
       KeyId -> (string)
          The Amazon Resource Name (key ARN ) of the asymmetric KMS  key  that
          was used to sign the message.

       Signature -> (blob)
          The cryptographic signature that was generated for the message.

          o When  used with the supported RSA signing algorithms, the encoding
            of this value is defined by PKCS #1 in RFC 8017 .

          o When  used  with  the   ECDSA_SHA_256   ,   ECDSA_SHA_384   ,   or
            ECDSA_SHA_512  signing  algorithms,  this  value  is a DER-encoded
            object as defined by ANS X9.622005 and RFC 3279  Section  2.2.3  .
            This is the most commonly used signature format and is appropriate
            for most uses.

          When you use the HTTP API or the Amazon Web Services CLI, the  value
          is Base64-encoded. Otherwise, it is not Base64-encoded.

       SigningAlgorithm -> (string)
          The signing algorithm that was used to sign the message.

DOCUTILS SYSTEM MESSAGES
       System Message: ERROR/3 (<string>:)
              Anonymous  hyperlink  mismatch: 1 references but 0 targets.  See
              "backrefs" attribute for IDs.



                                                                        SIGN()
