VERIFY()                                                              VERIFY()



NAME
       verify -

DESCRIPTION
       Verifies a digital signature that was generated by the  Sign operation.

       Verification confirms that an authorized user signed the  message  with
       the  specified  KMS  key  and signing algorithm, and the message hasn't
       changed since it was signed. If the signature is verified, the value of
       the  SignatureValid  field  in  the response is True . If the signature
       verification fails, the Verify operation fails with an KMSInvalidSigna-
       tureException exception.

       A  digital  signature is generated by using the private key in an asym-
       metric KMS key. The signature is verified by using the  public  key  in
       the  same asymmetric KMS key. For information about symmetric and asym-
       metric KMS keys, see Using Symmetric and Asymmetric KMS keys in the Key
       Management Service Developer Guide .

       To  verify a digital signature, you can use the Verify operation. Spec-
       ify the same asymmetric KMS key, message, and  signing  algorithm  that
       were used to produce the signature.

       You  can  also  verify the digital signature by using the public key of
       the KMS key outside of KMS. Use the  GetPublicKey operation to download
       the public key in the asymmetric KMS key and then use the public key to
       verify the signature outside of KMS. The advantage of using the  Verify
       operation is that it is performed within KMS. As a result, it's easy to
       call, the operation is performed within the FIPS boundary, it is logged
       in  CloudTrail,  and you can use key policy and IAM policy to determine
       who is authorized to use the KMS key to verify signatures.

       The KMS key that you use for this operation must be in a compatible key
       state.  For  details,  see Key state: Effect on your KMS key in the Key
       Management Service Developer Guide .
          Cross-account use : Yes. To perform this operation with a KMS key in
          a  different  Amazon  Web  Services  account, specify the key ARN or
          alias ARN in the value of the KeyId parameter.

          Required permissions : kms:Verify (key policy)

          Related operations :  Sign

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            verify
          --key-id <value>
          --message <value>
          [--message-type <value>]
          --signature <value>
          --signing-algorithm <value>
          [--grant-tokens <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --key-id (string)
          Identifies the asymmetric KMS key that will be used  to  verify  the
          signature.  This  must be the same KMS key that was used to generate
          the signature. If you specify a different  KMS  key,  the  signature
          verification fails.

          To  specify a KMS key, use its key ID, key ARN, alias name, or alias
          ARN. When using an alias name, prefix it with "alias/" . To  specify
          a  KMS  key in a different Amazon Web Services account, you must use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To get the key ID and key ARN  for  a  KMS  key,  use   ListKeys  or
          DescribeKey  . To get the alias name and alias ARN, use  ListAliases
          .

       --message (blob)
          Specifies the message that was signed. You can submit a raw  message
          of  up to 4096 bytes, or a hash digest of the message. If you submit
          a digest, use the MessageType parameter with a value of DIGEST .

          If the message specified here is different from the message that was
          signed,  the  signature  verification  fails. A message and its hash
          digest are considered to be the same message.

       --message-type (string)
          Tells KMS whether the value of the Message parameter is a message or
          message  digest.  The  default  value,  RAW, indicates a message. To
          indicate a message digest, enter DIGEST .

          WARNING:
              Use the DIGEST value only when the value of the Message  parame-
              ter  is a message digest. If you use the DIGEST value with a raw
              message, the security of the verification operation can be  com-
              promised.

          Possible values:

          o RAW

          o DIGEST

       --signature (blob)
          The signature that the Sign operation generated.

       --signing-algorithm (string)
          The signing algorithm that was used to sign the message. If you sub-
          mit a different algorithm, the signature verification fails.

          Possible values:

          o RSASSA_PSS_SHA_256

          o RSASSA_PSS_SHA_384

          o RSASSA_PSS_SHA_512

          o RSASSA_PKCS1_V1_5_SHA_256

          o RSASSA_PKCS1_V1_5_SHA_384

          o RSASSA_PKCS1_V1_5_SHA_512

          o ECDSA_SHA_256

          o ECDSA_SHA_384

          o ECDSA_SHA_512

       --grant-tokens (list)
          A list of grant tokens.

          Use a grant token when your permission to call this operation  comes
          from  a  new  grant that has not yet achieved eventual consistency .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To verify a digital signature

       The  following  verify example verifies a cryptographic signature for a
       short message. The key ID, message, message type, and signing algorithm
       must  be  same  ones  that were used to sign the message. The signature
       that you specify cannot be base64-encoded. For help decoding the signa-
       ture that the sign command returns, see the sign command examples.

       The  output of the command includes a Boolean SignatureValid field that
       indicates that the signature was verified. If the signature  validation
       fails, the verify command fails, too.

       Before  running  this  command, replace the example key ID with a valid
       key ID from your AWS account.

          aws kms verify \
              --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --message fileb://originalString \
              --message-type RAW \
              --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256 \
              --signature fileb://ExampleSignature

       Output:

          {
              "KeyId": "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab",
              "SignatureValid": true,
              "SigningAlgorithm": "RSASSA_PKCS1_V1_5_SHA_256"
          }

       For more information about using asymmetric CMKs in AWS KMS, see  Using
       Symmetric  and  Asymmetric  Keys  in the AWS Key Management Service API
       Reference.

OUTPUT
       KeyId -> (string)
          The Amazon Resource Name (key ARN ) of the asymmetric KMS  key  that
          was used to verify the signature.

       SignatureValid -> (boolean)
          A Boolean value that indicates whether the signature was verified. A
          value of True indicates that the Signature was produced  by  signing
          the  Message  with  the specified KeyID and SigningAlgorithm. If the
          signature is not verified, the Verify operation fails with a  KMSIn-
          validSignatureException exception.

       SigningAlgorithm -> (string)
          The signing algorithm that was used to verify the signature.



                                                                      VERIFY()
