RE-ENCRYPT()                                                      RE-ENCRYPT()



NAME
       re-encrypt -

DESCRIPTION
       Decrypts ciphertext and then reencrypts it entirely within KMS. You can
       use this operation to change the KMS key under which data is encrypted,
       such  as  when you manually rotate a KMS key or change the KMS key that
       protects a ciphertext. You can also  use  it  to  reencrypt  ciphertext
       under  the  same KMS key, such as to change the encryption context of a
       ciphertext.

       The ReEncrypt operation can decrypt ciphertext that  was  encrypted  by
       using  an  KMS KMS key in an KMS operation, such as  Encrypt or  Gener-
       ateDataKey . It can also decrypt ciphertext that was encrypted by using
       the  public  key  of  an asymmetric KMS key outside of KMS. However, it
       cannot decrypt ciphertext produced by  other  libraries,  such  as  the
       Amazon  Web Services Encryption SDK or Amazon S3 client-side encryption
       . These libraries return a ciphertext format that is incompatible  with
       KMS.

       When  you  use the ReEncrypt operation, you need to provide information
       for the decrypt operation and the subsequent encrypt operation.

       o If your ciphertext was encrypted under an  asymmetric  KMS  key,  you
         must  use  the  SourceKeyId  parameter  to  identify the KMS key that
         encrypted the ciphertext. You must also supply the  encryption  algo-
         rithm  that  was  used.  This  information is required to decrypt the
         data.

       o If your ciphertext was encrypted  under  a  symmetric  KMS  key,  the
         SourceKeyId  parameter is optional. KMS can get this information from
         metadata that it adds to the symmetric ciphertext blob. This  feature
         adds  durability  to  your implementation by ensuring that authorized
         users can decrypt ciphertext decades after it was encrypted, even  if
         they've  lost track of the key ID. However, specifying the source KMS
         key is always recommended as  a  best  practice.  When  you  use  the
         SourceKeyId parameter to specify a KMS key, KMS uses only the KMS key
         you specify. If the ciphertext was encrypted under  a  different  KMS
         key,  the  ReEncrypt  operation fails. This practice ensures that you
         use the KMS key that you intend.

       o To reencrypt the data, you must use  the  DestinationKeyId  parameter
         specify  the KMS key that re-encrypts the data after it is decrypted.
         You can select a symmetric or asymmetric KMS key. If the  destination
         KMS  key  is an asymmetric KMS key, you must also provide the encryp-
         tion algorithm. The algorithm that you choose must be compatible with
         the KMS key.

       WARNING:
          When  you use an asymmetric KMS key to encrypt or reencrypt data, be
          sure to record the KMS key and encryption algorithm that you choose.
          You  will  be  required  to  provide the same KMS key and encryption
          algorithm when you decrypt the data. If the KMS key and algorithm do
          not match the values used to encrypt the data, the decrypt operation
          fails. You are not required to supply  the  key  ID  and  encryption
          algorithm  when  you  decrypt  with  symmetric  KMS keys because KMS
          stores this information in the ciphertext  blob.  KMS  cannot  store
          metadata  in ciphertext generated with asymmetric keys. The standard
          format for asymmetric key ciphertext does not  include  configurable
          fields.

       The KMS key that you use for this operation must be in a compatible key
       state. For details, see Key state: Effect on your KMS key  in  the  Key
       Management Service Developer Guide .
          Cross-account  use : Yes. The source KMS key and destination KMS key
          can be in different Amazon Web Services accounts. Either or both KMS
          keys can be in a different account than the caller. To specify a KMS
          key in a different account, you must use its key ARN or alias ARN.

          Required permissions :

       o kms:ReEncryptFrom permission on the source KMS key (key policy)

       o kms:ReEncryptTo permission on the destination KMS key (key policy)

       To permit reencryption from or to a KMS  key,  include  the  "kms:ReEn-
       crypt*"  permission  in  your key policy . This permission is automati-
       cally included in the key policy when you use the console to  create  a
       KMS  key.  But  you  must include it manually when you create a KMS key
       programmatically or when you use the  PutKeyPolicy operation to  set  a
       key policy.
          Related operations:

       o Decrypt

       o Encrypt

       o GenerateDataKey

       o GenerateDataKeyPair

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            re-encrypt
          --ciphertext-blob <value>
          [--source-encryption-context <value>]
          [--source-key-id <value>]
          --destination-key-id <value>
          [--destination-encryption-context <value>]
          [--source-encryption-algorithm <value>]
          [--destination-encryption-algorithm <value>]
          [--grant-tokens <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --ciphertext-blob (blob)
          Ciphertext of the data to reencrypt.

       --source-encryption-context (map)
          Specifies  the  encryption context to use to decrypt the ciphertext.
          Enter the same encryption context  that  was  used  to  encrypt  the
          ciphertext.

          An  encryption context is a collection of non-secret key-value pairs
          that represents additional  authenticated  data.  When  you  use  an
          encryption  context  to  encrypt data, you must specify the same (an
          exact case-sensitive match) encryption context to decrypt the  data.
          An  encryption  context is optional when encrypting with a symmetric
          KMS key, but it is highly recommended.

          For more information, see Encryption Context in the  Key  Management
          Service Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --source-key-id (string)
          Specifies  the  KMS  key that KMS will use to decrypt the ciphertext
          before it is re-encrypted. Enter a key ID of the KMS  key  that  was
          used to encrypt the ciphertext.

          This  parameter  is  required only when the ciphertext was encrypted
          under an asymmetric KMS key. If you used a symmetric  KMS  key,  KMS
          can  get  the  KMS  key  from metadata that it adds to the symmetric
          ciphertext blob. However, it is always recommended as a  best  prac-
          tice.  This  practice  ensures  that  you  use  the KMS key that you
          intend.

          To specify a KMS key, use its key ID, key ARN, alias name, or  alias
          ARN.  When using an alias name, prefix it with "alias/" . To specify
          a KMS key in a different Amazon Web Services account, you  must  use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To  get  the  key  ID  and  key  ARN for a KMS key, use  ListKeys or
          DescribeKey . To get the alias name and alias ARN, use   ListAliases
          .

       --destination-key-id (string)
          A  unique  identifier  for the KMS key that is used to reencrypt the
          data. Specify a symmetric or asymmetric  KMS  key  with  a  KeyUsage
          value  of ENCRYPT_DECRYPT . To find the KeyUsage value of a KMS key,
          use the  DescribeKey operation.

          To specify a KMS key, use its key ID, key ARN, alias name, or  alias
          ARN.  When using an alias name, prefix it with "alias/" . To specify
          a KMS key in a different Amazon Web Services account, you  must  use
          the key ARN or alias ARN.

          For example:

          o Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab

          o Key                                                           ARN:
            arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab

          o Alias name: alias/ExampleAlias

          o Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias

          To  get  the  key  ID  and  key  ARN for a KMS key, use  ListKeys or
          DescribeKey . To get the alias name and alias ARN, use   ListAliases
          .

       --destination-encryption-context (map)
          Specifies  that  encryption context to use when the reencrypting the
          data.

          A destination encryption context is valid only when the  destination
          KMS  key  is a symmetric KMS key. The standard ciphertext format for
          asymmetric KMS keys does not include fields for metadata.

          An encryption context is a collection of non-secret key-value  pairs
          that  represents  additional  authenticated  data.  When  you use an
          encryption context to encrypt data, you must specify  the  same  (an
          exact  case-sensitive match) encryption context to decrypt the data.
          An encryption context is optional when encrypting with  a  symmetric
          KMS key, but it is highly recommended.

          For  more  information, see Encryption Context in the Key Management
          Service Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --source-encryption-algorithm (string)
          Specifies the encryption algorithm that KMS will use to decrypt  the
          ciphertext  before  it  is  reencrypted.  The default value, SYMMET-
          RIC_DEFAULT , represents the algorithm used for symmetric KMS  keys.

          Specify  the same algorithm that was used to encrypt the ciphertext.
          If you specify a different algorithm, the decrypt attempt fails.

          This parameter is required only when the  ciphertext  was  encrypted
          under an asymmetric KMS key.

          Possible values:

          o SYMMETRIC_DEFAULT

          o RSAES_OAEP_SHA_1

          o RSAES_OAEP_SHA_256

       --destination-encryption-algorithm (string)
          Specifies the encryption algorithm that KMS will use to reecrypt the
          data after it has decrypted it. The default value, SYMMETRIC_DEFAULT
          , represents the encryption algorithm used for symmetric KMS keys.

          This  parameter  is required only when the destination KMS key is an
          asymmetric KMS key.

          Possible values:

          o SYMMETRIC_DEFAULT

          o RSAES_OAEP_SHA_1

          o RSAES_OAEP_SHA_256

       --grant-tokens (list)
          A list of grant tokens.

          Use a grant token when your permission to call this operation  comes
          from  a  new  grant that has not yet achieved eventual consistency .
          For more information, see Grant token and Using a grant token in the
          Key Management Service Developer Guide .

          (string)

       Syntax:

          "string" "string" ...

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To re-encrypt an encrypted message under a different symmet-
       ric CMK (Linux and macOS).

       The following re-encrypt command example demonstrates  the  recommended
       way to re-encrypt data with the AWS CLI.

       o Provide the ciphertext in a file.
            In  the value of the --ciphertext-blob parameter, use the fileb://
            prefix, which tells the CLI to read the data from a  binary  file.
            If the file is not in the current directory, type the full path to
            file. For more information about reading AWS CLI parameter  values
            from   a  file,  see  Loading  AWS  CLI  parameters  from  a  file
            <https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-param-
            eters-file.html>  in the AWS Command Line Interface User Guide and
            Best  Practices   for   Local   File   Parameters<https://aws.ama-
            zon.com/blogs/developer/best-practices-for-local-file-parameters/>
            in the AWS Command Line Tool Blog.

       o Specify the source CMK, which decrypts the ciphertext.
            The --source-key-id parameter is not required when decrypting with
            symmetric  CMKs.  AWS KMS can get the CMK that was used to encrypt
            the data from the metadata in the ciphertext blob. But it's always
            a  best  practice  to specify the CMK you are using. This practice
            ensures that you use the CMK that you  intend,  and  prevents  you
            from  inadvertently decrypting a ciphertext using a CMK you do not
            trust.

       o Specify the destination CMK, which re-encrypts the data.
            The --destination-key-id parameter is always required. This  exam-
            ple uses a key ARN, but you can use any valid key identifier.

       o Request the plaintext output as a text value.
            The  --query  parameter tells the CLI to get only the value of the
            Plaintext field from the output. The  --output  parameter  returns
            the output as text.

       o Base64-decode the plaintext and save it in a file.
            The following example pipes (|) the value of the Plaintext parame-
            ter to the Base64 utility, which decodes it.  Then,  it  redirects
            (>) the decoded output to the ExamplePlaintext file.

       Before running this command, replace the example key IDs with valid key
       identifiers from your AWS account.

          aws kms re-encrypt \
              --ciphertext-blob fileb://ExampleEncryptedFile \
              --source-key-id 1234abcd-12ab-34cd-56ef-1234567890ab \
              --destination-key-id 0987dcba-09fe-87dc-65ba-ab0987654321 \
              --query CiphertextBlob \
              --output text | base64 --decode > ExampleReEncryptedFile

       This command produces no output. The output from the decrypt command is
       base64-decoded and saved in a file.

       For more information, see
       `Using symmetric and asymmetric keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html`__
        in the AWS KMS Developer Guide.

       Example 2: To re-encrypt an encrypted message under a different symmet-
       ric CMK (Windows command prompt).

       The following re-encrypt command example is the same  as  the  previous
       one  except  that  it  uses  the  certutil utility to Base64-decode the
       plaintext data. This procedure requires two commands, as shown  in  the
       following examples.

       Before  running  this  command, replace the example key ID with a valid
       key ID from your AWS account.

          aws kms re-encrypt ^
              --ciphertext-blob fileb://ExampleEncryptedFile ^
              --source-key-id 1234abcd-12ab-34cd-56ef-1234567890ab ^
              --destination-key-id 0987dcba-09fe-87dc-65ba-ab0987654321 ^
              --query CiphertextBlob ^
              --output text > ExampleReEncryptedFile.base64

       Then use the certutil utility

          certutil -decode ExamplePlaintextFile.base64 ExamplePlaintextFile

       Output:

          Input Length = 18
          Output Length = 12
          CertUtil: -decode command completed successfully.

       For more information, see
       `Using symmetric and asymmetric keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html`__
        in the AWS KMS Developer Guide.

OUTPUT
       CiphertextBlob -> (blob)
          The reencrypted data. When you use the HTTP API or  the  Amazon  Web
          Services  CLI,  the  value  is  Base64-encoded. Otherwise, it is not
          Base64-encoded.

       SourceKeyId -> (string)
          Unique identifier of the KMS key  used  to  originally  encrypt  the
          data.

       KeyId -> (string)
          The  Amazon Resource Name (key ARN ) of the KMS key that was used to
          reencrypt the data.

       SourceEncryptionAlgorithm -> (string)
          The encryption algorithm that was used  to  decrypt  the  ciphertext
          before it was reencrypted.

       DestinationEncryptionAlgorithm -> (string)
          The encryption algorithm that was used to reencrypt the data.

DOCUTILS SYSTEM MESSAGES
       System Message: ERROR/3 (<string>:)
              Anonymous  hyperlink  mismatch: 2 references but 0 targets.  See
              "backrefs" attribute for IDs.



                                                                  RE-ENCRYPT()
