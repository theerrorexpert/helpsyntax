PUT-METHOD()                                                      PUT-METHOD()



NAME
       put-method -

DESCRIPTION
       Add a method to an existing  Resource resource.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            put-method
          --rest-api-id <value>
          --resource-id <value>
          --http-method <value>
          --authorization-type <value>
          [--authorizer-id <value>]
          [--api-key-required | --no-api-key-required]
          [--operation-name <value>]
          [--request-parameters <value>]
          [--request-models <value>]
          [--request-validator-id <value>]
          [--authorization-scopes <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --rest-api-id (string)
          [Required] The string identifier of the associated  RestApi .

       --resource-id (string)
          [Required] The  Resource identifier for the new  Method resource.

       --http-method (string)
          [Required] Specifies the method request's HTTP method type.

       --authorization-type (string)
          [Required]  The  method's  authorization type. Valid values are NONE
          for open access, AWS_IAM for using AWS IAM permissions,  CUSTOM  for
          using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito
          user pool.

       --authorizer-id (string)
          Specifies the identifier of an  Authorizer to use on this Method, if
          the  type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier
          is generated by API Gateway when you created the authorizer.

       --api-key-required | --no-api-key-required (boolean)
          Specifies whether the method required a valid  ApiKey .

       --operation-name (string)
          A human-friendly operation identifier for the method.  For  example,
          you  can  assign  the  operationName  of  ListPets for the GET /pets
          method in the PetStore example.

       --request-parameters (map)
          A key-value map defining required or optional method request parame-
          ters  that  can  be  accepted by API Gateway. A key defines a method
          request parameter name matching the pattern of method.request.{loca-
          tion}.{name}  , where location is querystring , path , or header and
          name is a valid and unique parameter name. The value associated with
          the  key  is  a  Boolean  flag  indicating  whether the parameter is
          required (true ) or optional (false ). The method request  parameter
          names  defined  here  are  available in  Integration to be mapped to
          integration request parameters or body-mapping templates.

          key -> (string)

          value -> (boolean)

       Shorthand Syntax:

          KeyName1=boolean,KeyName2=boolean

       JSON Syntax:

          {"string": true|false
            ...}

       --request-models (map)
          Specifies the  Model resources used for the request's content  type.
          Request  models  are  represented as a key/value map, with a content
          type as the key and a  Model name as the value.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --request-validator-id (string)
          The identifier of a   RequestValidator  for  validating  the  method
          request.

       --authorization-scopes (list)
          A  list of authorization scopes configured on the method. The scopes
          are used with  a  COGNITO_USER_POOLS  authorizer  to  authorize  the
          method  invocation.  The  authorization works by matching the method
          scopes against the scopes parsed from the access token in the incom-
          ing  request.  The  method  invocation  is  authorized if any method
          scopes matches a claimed scope in the access token.  Otherwise,  the
          invocation  is  not authorized. When the method scope is configured,
          the client must provide an access token instead of an identity token
          for authorization purposes.

          (string)

       Syntax:

          "string" "string" ...

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To  create  a method for a resource in an API with no authorization, no
       API key, and a custom method request header

       Command:

          aws apigateway put-method --rest-api-id 1234123412 --resource-id a1b2c3 --http-method PUT --authorization-type "NONE" --no-api-key-required --request-parameters "method.request.header.custom-header=false"

OUTPUT
       httpMethod -> (string)
          The method's HTTP verb.

       authorizationType -> (string)
          The method's authorization type. Valid  values  are  NONE  for  open
          access,  AWS_IAM  for  using AWS IAM permissions, CUSTOM for using a
          custom authorizer, or COGNITO_USER_POOLS for using  a  Cognito  user
          pool.

       authorizerId -> (string)
          The  identifier  of an  Authorizer to use on this method. The autho-
          rizationType must be CUSTOM .

       apiKeyRequired -> (boolean)
          A boolean flag specifying whether a valid   ApiKey  is  required  to
          invoke this method.

       requestValidatorId -> (string)
          The identifier of a  RequestValidator for request validation.

       operationName -> (string)
          A  human-friendly  operation identifier for the method. For example,
          you can assign the operationName  of  ListPets  for  the  GET  /pets
          method in the PetStore example.

       requestParameters -> (map)
          A key-value map defining required or optional method request parame-
          ters that can be accepted by API Gateway. A key is a method  request
          parameter   name   matching  the  pattern  of  method.request.{loca-
          tion}.{name} , where location is querystring , path , or header  and
          name is a valid and unique parameter name. The value associated with
          the key is a  Boolean  flag  indicating  whether  the  parameter  is
          required  (true ) or optional (false ). The method request parameter
          names defined here are available in  Integration  to  be  mapped  to
          integration request parameters or templates.

          key -> (string)

          value -> (boolean)

       requestModels -> (map)
          A  key-value  map  specifying  data  schemas,  represented by  Model
          resources, (as the mapped value) of the request  payloads  of  given
          content types (as the mapping key).

          key -> (string)

          value -> (string)

       methodResponses -> (map)
          Gets a method response associated with a given HTTP status code.

          The  collection  of method responses are encapsulated in a key-value
          map, where the key is a response's HTTP status code and the value is
          a   MethodResponse  resource that specifies the response returned to
          the caller from the back end through the integration response.
              Example: Get a 200 OK response of a GET method Request

              GET                  /restapis/uojnr9hd57/resources/0cjtch/meth-
              ods/GET/responses/200  HTTP/1.1  Content-Type:  application/json
              Host:  apigateway.us-east-1.amazonaws.com  Content-Length:   117
              X-Amz-Date:   20160613T215008Z  Authorization:  AWS4-HMAC-SHA256
              Credential={access_key_ID}/20160613/us-east-1/apigate-
              way/aws4_request,    SignedHeaders=content-type;host;x-amz-date,
              Signature={sig4_hash}  Response

          The successful response returns a 200 OK status code and  a  payload
          similar to the following:
              {   "_links":   {  "curies":  {  "href":  "https://docs.aws.ama-
              zon.com/apigateway/latest/developer-
              guide/restapi-method-response-{rel}.html",    "name":   "method-
              response",   "templated":   true   },    "self":    {    "href":
              "/restapis/uojnr9hd57/resources/0cjtch/meth-
              ods/GET/responses/200",    "title":    "200"     },     "method-
              response:delete":                    {                   "href":
              "/restapis/uojnr9hd57/resources/0cjtch/meth-
              ods/GET/responses/200"  },  "methodresponse:update":  {  "href":
              "/restapis/uojnr9hd57/resources/0cjtch/meth-
              ods/GET/responses/200"   }   },  "responseModels":  {  "applica-
              tion/json":     "Empty"     },      "responseParameters":      {
              "method.response.header.operator":                        false,
              "method.response.header.operand_2":                       false,
              "method.response.header.operand_1": false }, "statusCode": "200"
              }
                 AWS CLI

          key -> (string)

          value -> (structure)
              Represents a  method  response  of  a  given  HTTP  status  code
              returned  to  the client. The method response is passed from the
              back end through the associated integration response that can be
              transformed using a mapping template.
                 Example: A MethodResponse instance of an API Request

              The example request retrieves a MethodResponse of the 200 status
              code.
                 GET           /restapis/fugvjdxtri/resources/3kzxbg5sa2/meth-
                 ods/GET/responses/200 HTTP/1.1 Content-Type: application/json
                 Host:     apigateway.us-east-1.amazonaws.com      X-Amz-Date:
                 20160603T222952Z   Authorization:   AWS4-HMAC-SHA256  Creden-
                 tial={access_key_ID}/20160603/us-east-1/apigate-
                 way/aws4_request, SignedHeaders=content-type;host;x-amz-date,
                 Signature={sig4_hash}  Response

              The successful response returns 200 OK status and a  payload  as
              follows:
                 {  "_links":  {  "curies":  {  "href": "https://docs.aws.ama-
                 zon.com/apigateway/latest/developer-
                 guide/restapi-method-response-{rel}.html",  "name":  "method-
                 response",   "templated":   true   },   "self":   {   "href":
                 "/restapis/fugvjdxtri/resources/3kzxbg5sa2/meth-
                 ods/GET/responses/200",   "title":    "200"    },    "method-
                 response:delete":      {      "href":     "/restapis/fugvjdx-
                 tri/resources/3kzxbg5sa2/methods/GET/responses/200"        },
                 "methodresponse:update":    {   "href":   "/restapis/fugvjdx-
                 tri/resources/3kzxbg5sa2/methods/GET/responses/200"   }    },
                 "responseModels":  {  "application/json": "Empty" }, "respon-
                 seParameters": { "method.response.header.Content-Type": false
                 }, "statusCode": "200" }
                     Method ,  IntegrationResponse ,  Integration  Creating an
                     API

              statusCode -> (string)
                 The method response's status code.

              responseParameters -> (map)
                 A key-value map  specifying  required  or  optional  response
                 parameters  that  API  Gateway can send back to the caller. A
                 key defines a method response header and the value  specifies
                 whether  the associated method response header is required or
                 not. The  expression  of  the  key  must  match  the  pattern
                 method.response.header.{name}  ,  where  name  is a valid and
                 unique header name. API Gateway  passes  certain  integration
                 response  data  to the method response headers specified here
                 according to the mapping you prescribe in the API's  Integra-
                 tionResponse  .  The  integration  response  data that can be
                 mapped include an integration response  header  expressed  in
                 integration.response.header.{name}  , a static value enclosed
                 within a pair of single quotes (e.g.,  'application/json'  ),
                 or  a  JSON  expression from the back-end response payload in
                 the  form  of  integration.response.body.{JSON-expression}  ,
                 where  JSON-expression is a valid JSON expression without the
                 $ prefix.)

                 key -> (string)

                 value -> (boolean)

              responseModels -> (map)
                 Specifies the  Model resources used for the  response's  con-
                 tent-type.  Response  models  are  represented as a key/value
                 map, with a content-type as the key and a  Model name as  the
                 value.

                 key -> (string)

                 value -> (string)

       methodIntegration -> (structure)
          Gets   the   method's   integration   responsible  for  passing  the
          client-submitted request to the back end  and  performing  necessary
          transformations to make the request compliant with the back end.
              Example:  Request

              GET   /restapis/uojnr9hd57/resources/0cjtch/methods/GET/integra-
              tion  HTTP/1.1  Content-Type:  application/json  Host:  apigate-
              way.us-east-1.amazonaws.com   Content-Length:   117  X-Amz-Date:
              20160613T213210Z   Authorization:    AWS4-HMAC-SHA256    Creden-
              tial={access_key_ID}/20160613/us-east-1/apigateway/aws4_request,
              SignedHeaders=content-type;host;x-amz-date,               Signa-
              ture={sig4_hash}  Response

          The  successful  response returns a 200 OK status code and a payload
          similar to the following:
              { "_links":  {  "curies":  [  {  "href":  "https://docs.aws.ama-
              zon.com/apigateway/latest/developerguide/restapi-integra-
              tion-{rel}.html", "name": "integration", "templated": true },  {
              "href":  "https://docs.aws.amazon.com/apigateway/latest/develop-
              erguide/restapi-integration-response-{rel}.html", "name": "inte-
              grationresponse",  "templated":  true  }  ],  "self":  { "href":
              "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration"
              },           "integration:delete":           {           "href":
              "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration"
              },          "integration:responses":          {          "href":
              "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integra-
              tion/responses/200",  "name": "200", "title": "200" }, "integra-
              tion:update":                     {                      "href":
              "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration"
              },         "integrationresponse:put":         {          "href":
              "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integra-
              tion/responses/{status_code}", "templated": true } }, "cacheKey-
              Parameters":   [],  "cacheNamespace":  "0cjtch",  "credentials":
              "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod":
              "POST",   "passthroughBehavior":  "WHEN_NO_MATCH",  "requestTem-
              plates": { "application/json": "{\n \"a\":  \"$input.params('op-
              erand1')\",\n  \"b\":  \"$input.params('operand2')\", \n \"op\":
              \"$input.params('operator')\"  \n}"  },  "type":  "AWS",  "uri":
              "arn:aws:apigateway:us-west-2:lambda:path//2015-03-31/func-
              tions/arn:aws:lambda:us-west-2:123456789012:function:Calc/invo-
              cations",  "_embedded": { "integration:responses": { "_links": {
              "self": {  "href":  "/restapis/uojnr9hd57/resources/0cjtch/meth-
              ods/GET/integration/responses/200",   "name":   "200",  "title":
              "200"     },     "integrationresponse:delete":     {     "href":
              "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integra-
              tion/responses/200" }, "integrationresponse:update":  {  "href":
              "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integra-
              tion/responses/200"     }     },     "responseParameters":     {
              "method.response.header.operator":                     "integra-
              tion.response.body.op",      "method.response.header.operand_2":
              "integration.response.body.b",     "method.response.header.oper-
              and_1": "integration.response.body.a" }, "responseTemplates":  {
              "application/json":    "#set($res    =    $input.path('$'))\n{\n
              \"result\": \"$res.a, $res.b, $res.op  =>  $res.c\",\n  \"a\"  :
              \"$res.a\",\n  \"b\"  :  \"$res.b\",\n  \"op\"  : \"$res.op\",\n
              \"c\" : \"$res.c\"\n}" }, "selectionPattern": "",  "statusCode":
              "200" } } }
                 AWS CLI

          type -> (string)
              Specifies an API method integration type. The valid value is one
              of the following:

              o AWS : for integrating the API method request with an AWS  ser-
                vice  action,  including  the Lambda function-invoking action.
                With the Lambda function-invoking action, this is referred  to
                as  the  Lambda custom integration. With any other AWS service
                action, this is known as AWS integration.

              o AWS_PROXY : for integrating the API method  request  with  the
                Lambda function-invoking action with the client request passed
                through as-is. This integration is also  referred  to  as  the
                Lambda proxy integration.

              o HTTP  :  for  integrating  the API method request with an HTTP
                endpoint, including a private HTTP endpoint within a VPC. This
                integration  is  also  referred to as the HTTP custom integra-
                tion.

              o HTTP_PROXY : for integrating the API method  request  with  an
                HTTP endpoint, including a private HTTP endpoint within a VPC,
                with the client request passed through  as-is.  This  is  also
                referred to as the HTTP proxy integration.

              o MOCK : for integrating the API method request with API Gateway
                as a "loop-back" endpoint without invoking any backend.

              For the HTTP and HTTP proxy integrations, each  integration  can
              specify a protocol (http/https ), port and path. Standard 80 and
              443 ports are supported as well as custom ports above  1024.  An
              HTTP or HTTP proxy integration with a connectionType of VPC_LINK
              is referred to as a private integration and uses a   VpcLink  to
              connect API Gateway to a network load balancer of a VPC.

          httpMethod -> (string)
              Specifies the integration's HTTP method type.

          uri -> (string)
              Specifies  Uniform  Resource Identifier (URI) of the integration
              endpoint.

              o For HTTP or HTTP_PROXY integrations, the URI must be  a  fully
                formed, encoded HTTP(S) URL according to the RFC-3986 specifi-
                cation , for either standard integration, where connectionType
                is not VPC_LINK , or private integration, where connectionType
                is VPC_LINK . For a private HTTP integration, the URI  is  not
                used for routing.

              o For  AWS  or  AWS_PROXY  integrations,  the URI is of the form
                arn:aws:apigateway:{region}:{subdomain.service|ser-
                vice}:path|action/{service_api}  .  Here,  {Region} is the API
                Gateway region (e.g., us-east-1 ); {service} is  the  name  of
                the  integrated  AWS service (e.g., s3 ); and {subdomain} is a
                designated subdomain supported by certain AWS service for fast
                host-name  lookup.  action  can  be  used  for  an AWS service
                action-based API, using an  Action={name}&{p1}={v1}&p2={v2}...
                query  string. The ensuing {service_api} refers to a supported
                action {name} plus any  required  input  parameters.  Alterna-
                tively,  path  can  be used for an AWS service path-based API.
                The ensuing service_api refers to the path to an  AWS  service
                resource,  including the region of the integrated AWS service,
                if applicable. For example, for integration with the S3 API of
                `GetObject          <https://docs.aws.amazon.com/AmazonS3/lat-
                est/API/RESTObjectGET.html>`__  ,  the  uri  can   be   either
                arn:aws:apigateway:us-west-2:s3:action/GetOb-
                ject&Bucket={bucket}&Key={key}       or       arn:aws:apigate-
                way:us-west-2:s3:path/{bucket}/{key}

          connectionType -> (string)
              The  type of the network connection to the integration endpoint.
              The valid value is INTERNET for connections through  the  public
              routable  internet  or  VPC_LINK for private connections between
              API Gateway and a network load balancer in a  VPC.  The  default
              value is INTERNET .

          connectionId -> (string)
              The                            (`id                           <-
              https://docs.aws.amazon.com/apigateway/api-refer-
              ence/resource/vpc-link/#id>`__  )  of  the  VpcLink used for the
              integration when connectionType=VPC_LINK and  undefined,  other-
              wise.

          credentials -> (string)
              Specifies  the credentials required for the integration, if any.
              For AWS integrations, three options are available. To specify an
              IAM  Role  for  API  Gateway  to  assume,  use the role's Amazon
              Resource Name (ARN). To require that the  caller's  identity  be
              passed   through   from   the   request,   specify   the  string
              arn:aws:iam::\*:user/\* . To use resource-based  permissions  on
              supported AWS services, specify null.

          requestParameters -> (map)
              A  key-value  map  specifying request parameters that are passed
              from the method request to the back end. The key is an  integra-
              tion request parameter name and the associated value is a method
              request parameter value or static value that  must  be  enclosed
              within  single  quotes  and  pre-encoded as required by the back
              end. The method request parameter value must match  the  pattern
              of  method.request.{location}.{name} , where location is querys-
              tring , path , or header and name must be  a  valid  and  unique
              method request parameter name.

              key -> (string)

              value -> (string)

          requestTemplates -> (map)
              Represents  a  map of Velocity templates that are applied on the
              request payload based on the value of  the  Content-Type  header
              sent  by  the  client. The content type value is the key in this
              map, and the template (as a String) is the value.

              key -> (string)

              value -> (string)

          passthroughBehavior -> (string)
              Specifies how the method request body  of  an  unmapped  content
              type  will be passed through the integration request to the back
              end without transformation. A content type  is  unmapped  if  no
              mapping  template  is  defined in the integration or the content
              type does not match any of the mapped content types,  as  speci-
              fied in requestTemplates . The valid value is one of the follow-
              ing:

              o WHEN_NO_MATCH : passes the method  request  body  through  the
                integration  request  to  the  back end without transformation
                when the method request content type does not match  any  con-
                tent type associated with the mapping templates defined in the
                integration request.

              o WHEN_NO_TEMPLATES : passes the method request body through the
                integration  request  to  the  back end without transformation
                when  no  mapping  template  is  defined  in  the  integration
                request.  If  a  template  is  defined  when  this  option  is
                selected, the method request of an unmapped content-type  will
                be  rejected with an HTTP 415 Unsupported Media Type response.

              o NEVER : rejects the method request with  an  HTTP  415  Unsup-
                ported Media Type response when either the method request con-
                tent type does not match any content type associated with  the
                mapping  templates  defined  in  the integration request or no
                mapping template is defined in the integration request.

          contentHandling -> (string)
              Specifies how to handle request  payload  content  type  conver-
              sions.   Supported   values   are   CONVERT_TO_BINARY  and  CON-
              VERT_TO_TEXT , with the following behaviors:

              o CONVERT_TO_BINARY  :  Converts  a  request  payload   from   a
                Base64-encoded string to the corresponding binary blob.

              o CONVERT_TO_TEXT  :  Converts  a  request payload from a binary
                blob to a Base64-encoded string.

              If this property is not defined, the  request  payload  will  be
              passed  through  from  the method request to integration request
              without modification, provided that the  passthroughBehavior  is
              configured to support payload pass-through.

          timeoutInMillis -> (integer)
              Custom  timeout  between 50 and 29,000 milliseconds. The default
              value is 29,000 milliseconds or 29 seconds.

          cacheNamespace -> (string)
              Specifies a group of related cached parameters. By default,  API
              Gateway  uses  the  resource  ID as the cacheNamespace . You can
              specify the same cacheNamespace across resources to  return  the
              same cached data for requests to different resources.

          cacheKeyParameters -> (list)
              A list of request parameters whose values API Gateway caches. To
              be valid values for cacheKeyParameters , these  parameters  must
              also be specified for  Method  requestParameters .

              (string)

          integrationResponses -> (map)
              Specifies the integration's responses.
                 Example: Get integration responses of a method Request

                 GET           /restapis/fugvjdxtri/resources/3kzxbg5sa2/meth-
                 ods/GET/integration/responses/200   HTTP/1.1    Content-Type:
                 application/json   Host:   apigateway.us-east-1.amazonaws.com
                 X-Amz-Date: 20160607T191449Z Authorization:  AWS4-HMAC-SHA256
                 Credential={access_key_ID}/20160607/us-east-1/apigate-
                 way/aws4_request, SignedHeaders=content-type;host;x-amz-date,
                 Signature={sig4_hash}  Response

              The  successful  response returns 200 OK status and a payload as
              follows:
                 { "_links":  {  "curies":  {  "href":  "https://docs.aws.ama-
                 zon.com/apigateway/latest/developerguide/restapi-integra-
                 tion-response-{rel}.html",   "name":   "integrationresponse",
                 "templated":  true  },  "self": { "href": "/restapis/fugvjdx-
                 tri/resources/3kzxbg5sa2/methods/GET/integra-
                 tion/responses/200",   "title":   "200"   },  "integrationre-
                 sponse:delete":      {      "href":       "/restapis/fugvjdx-
                 tri/resources/3kzxbg5sa2/methods/GET/integra-
                 tion/responses/200"   },   "integrationresponse:update":    {
                 "href":      "/restapis/fugvjdxtri/resources/3kzxbg5sa2/meth-
                 ods/GET/integration/responses/200" } }, "responseParameters":
                 {  "method.response.header.Content-Type": "'application/xml'"
                 }, "responseTemplates": {  "application/json":  "$util.urlDe-
                 code(\"%3CkinesisStreams%3E#foreach($stream                in
                 $input.path('$.Stream-
                 Names'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kine-
                 sisStreams%3E\")\n" }, "statusCode": "200" }
                     Creating an API

              key -> (string)

              value -> (structure)
                 Represents an integration response. The status code must  map
                 to an existing  MethodResponse , and parameters and templates
                 can be used to transform the back-end response.
                     Creating an API

                 statusCode -> (string)
                     Specifies the status code that is used to map  the  inte-
                     gration response to an existing  MethodResponse .

                 selectionPattern -> (string)
                     Specifies  the regular expression (regex) pattern used to
                     choose an integration response based on the response from
                     the  back  end.  For  example,  if  the  success response
                     returns nothing  and  the  error  response  returns  some
                     string,  you  could  use  the  .+  regex  to  match error
                     response. However, make sure that the error response does
                     not contain any newline (\n ) character in such cases. If
                     the back end is an AWS Lambda function,  the  AWS  Lambda
                     function  error header is matched. For all other HTTP and
                     AWS back ends, the HTTP status code is matched.

                 responseParameters -> (map)
                     A key-value map specifying response parameters  that  are
                     passed  to the method response from the back end. The key
                     is a method response header parameter name and the mapped
                     value  is  an integration response header value, a static
                     value enclosed within a pair of single quotes, or a  JSON
                     expression  from  the integration response body. The map-
                     ping    key     must     match     the     pattern     of
                     method.response.header.{name} , where name is a valid and
                     unique header name.  The  mapped  non-static  value  must
                     match  the  pattern of integration.response.header.{name}
                     or  integration.response.body.{JSON-expression}  ,  where
                     name  is  a  valid  and  unique  response header name and
                     JSON-expression is a valid JSON expression without the  $
                     prefix.

                     key -> (string)

                     value -> (string)

                 responseTemplates -> (map)
                     Specifies the templates used to transform the integration
                     response body. Response templates are  represented  as  a
                     key/value  map, with a content-type as the key and a tem-
                     plate as the value.

                     key -> (string)

                     value -> (string)

                 contentHandling -> (string)
                     Specifies how to handle  response  payload  content  type
                     conversions.  Supported  values are CONVERT_TO_BINARY and
                     CONVERT_TO_TEXT , with the following behaviors:

                     o CONVERT_TO_BINARY : Converts a response payload from  a
                       Base64-encoded string to the corresponding binary blob.

                     o CONVERT_TO_TEXT : Converts a response  payload  from  a
                       binary blob to a Base64-encoded string.

                     If  this  property  is  not defined, the response payload
                     will be passed through from the integration  response  to
                     the method response without modification.

          tlsConfig -> (structure)
              Specifies the TLS configuration for an integration.

              insecureSkipVerification -> (boolean)
                 Specifies  whether or not API Gateway skips verification that
                 the certificate for an integration endpoint is  issued  by  a
                 supported  certificate authority . This isnt recommended, but
                 it enables you to use certificates that are signed by private
                 certificate    authorities,    or   certificates   that   are
                 self-signed. If enabled, API  Gateway  still  performs  basic
                 certificate  validation, which includes checking the certifi-
                 cate's expiration date, hostname, and presence of a root cer-
                 tificate  authority.  Supported  only for HTTP and HTTP_PROXY
                 integrations.

       authorizationScopes -> (list)
          A list of authorization scopes configured on the method. The  scopes
          are  used  with  a  COGNITO_USER_POOLS  authorizer  to authorize the
          method invocation. The authorization works by  matching  the  method
          scopes against the scopes parsed from the access token in the incom-
          ing request. The method  invocation  is  authorized  if  any  method
          scopes  matches  a claimed scope in the access token. Otherwise, the
          invocation is not authorized. When the method scope  is  configured,
          the client must provide an access token instead of an identity token
          for authorization purposes.

          (string)



                                                                  PUT-METHOD()
