UPDATE-INTEGRATION-RESPONSE()                    UPDATE-INTEGRATION-RESPONSE()



NAME
       update-integration-response -

DESCRIPTION
       Represents an update integration response.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            update-integration-response
          --rest-api-id <value>
          --resource-id <value>
          --http-method <value>
          --status-code <value>
          [--patch-operations <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --rest-api-id (string)
          [Required] The string identifier of the associated  RestApi .

       --resource-id (string)
          [Required]   Specifies  an  update  integration  response  request's
          resource identifier.

       --http-method (string)
          [Required] Specifies an update integration response  request's  HTTP
          method.

       --status-code (string)
          [Required] Specifies an update integration response request's status
          code.

       --patch-operations (list)
          A list of update operations to be applied to the specified  resource
          and in the order specified in this list.

          (structure)
              A  single  patch  operation  to apply to the specified resource.
              Please refer to http://tools.ietf.org/html/rfc6902#section-4 for
              an explanation of how each operation is used.

              op -> (string)
                 An  update operation to be performed with this PATCH request.
                 The valid value can be add , remove , replace or copy  .  Not
                 all valid operations are supported for a given resource. Sup-
                 port of the operations depends on specific  operational  con-
                 texts.  Attempts  to  apply  an  unsupported  operation  on a
                 resource will return an error message.

              path -> (string)
                 The op operation's target, as identified by  a  JSON  Pointer
                 value   that   references  a  location  within  the  targeted
                 resource. For example, if the target resource has an  update-
                 able  property  of {"name":"value"} , the path for this prop-
                 erty is /name . If the name property value is a  JSON  object
                 (e.g.,  {"name":  {"child/name":  "child-value"}} ), the path
                 for the child/name property will be /name/child~1name  .  Any
                 slash ("/") character appearing in path names must be escaped
                 with "~1", as shown in the example above. Each  op  operation
                 can have only one path associated with it.

              value -> (string)
                 The  new target value of the update operation. It is applica-
                 ble for the add or replace operation. When using AWS  CLI  to
                 update  a  property  of a JSON value, enclose the JSON object
                 with a pair of single quotes in a Linux shell,  e.g.,  '{"a":
                 ...}'. In a Windows shell, see Using JSON for Parameters .

              from -> (string)
                 The  copy  update  operation's  source  as  identified  by  a
                 JSON-Pointer value referencing the location within  the  tar-
                 geted  resource  to copy the value from. For example, to pro-
                 mote a canary deployment, you copy the canary  deployment  ID
                 to the affiliated deployment ID by calling a PATCH request on
                 a  Stage  resource  with  "op":"copy"  ,  "from":"/canarySet-
                 tings/deploymentId" and "path":"/deploymentId" .

       Shorthand Syntax:

          op=string,path=string,value=string,from=string ...

       JSON Syntax:

          [
            {
              "op": "add"|"remove"|"replace"|"move"|"copy"|"test",
              "path": "string",
              "value": "string",
              "from": "string"
            }
            ...
          ]

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To  change  an  integration response header to have a static mapping of
       '*'

       Command:

          aws apigateway update-integration-response --rest-api-id 1234123412 --resource-id 3gapai --http-method GET --status-code 200 --patch-operations op='replace',path='/responseParameters/method.response.header.Access-Control-Allow-Origin',value='"'"'*'"'"'

       Output:

          {
              "statusCode": "200",
              "responseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
          }

       To remove an integration response header

       Command:

          aws apigateway update-integration-response --rest-api-id 1234123412 --resource-id 3gapai --http-method GET --status-code 200 --patch-operations op='remove',path='/responseParameters/method.response.header.Access-Control-Allow-Origin'

OUTPUT
       statusCode -> (string)
          Specifies the status code  that  is  used  to  map  the  integration
          response to an existing  MethodResponse .

       selectionPattern -> (string)
          Specifies  the  regular expression (regex) pattern used to choose an
          integration response based on the response from the  back  end.  For
          example,  if  the  success  response  returns  nothing and the error
          response returns some string, you could use the .+  regex  to  match
          error  response. However, make sure that the error response does not
          contain any newline (\n ) character in such cases. If the  back  end
          is  an  AWS Lambda function, the AWS Lambda function error header is
          matched. For all other HTTP and AWS back ends, the HTTP status  code
          is matched.

       responseParameters -> (map)
          A  key-value  map  specifying response parameters that are passed to
          the method response from the back end. The key is a method  response
          header  parameter  name  and  the  mapped  value  is  an integration
          response header value, a static value enclosed within a pair of sin-
          gle quotes, or a JSON expression from the integration response body.
          The    mapping     key     must     match     the     pattern     of
          method.response.header.{name}  ,  where  name  is a valid and unique
          header name. The mapped non-static value must match the  pattern  of
          integration.response.header.{name}            or            integra-
          tion.response.body.{JSON-expression} , where name  is  a  valid  and
          unique  response  header  name  and  JSON-expression is a valid JSON
          expression without the $ prefix.

          key -> (string)

          value -> (string)

       responseTemplates -> (map)
          Specifies the templates used to transform the  integration  response
          body.  Response templates are represented as a key/value map, with a
          content-type as the key and a template as the value.

          key -> (string)

          value -> (string)

       contentHandling -> (string)
          Specifies how to handle response payload content  type  conversions.
          Supported  values  are  CONVERT_TO_BINARY and CONVERT_TO_TEXT , with
          the following behaviors:

          o CONVERT_TO_BINARY  :  Converts   a   response   payload   from   a
            Base64-encoded string to the corresponding binary blob.

          o CONVERT_TO_TEXT  :  Converts a response payload from a binary blob
            to a Base64-encoded string.

          If this property is not defined, the response payload will be passed
          through from the integration response to the method response without
          modification.



                                                 UPDATE-INTEGRATION-RESPONSE()
