PUT-INTEGRATION()                                            PUT-INTEGRATION()



NAME
       put-integration -

DESCRIPTION
       Sets up a method's integration.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            put-integration
          --rest-api-id <value>
          --resource-id <value>
          --http-method <value>
          --type <value>
          [--integration-http-method <value>]
          [--uri <value>]
          [--connection-type <value>]
          [--connection-id <value>]
          [--credentials <value>]
          [--request-parameters <value>]
          [--request-templates <value>]
          [--passthrough-behavior <value>]
          [--cache-namespace <value>]
          [--cache-key-parameters <value>]
          [--content-handling <value>]
          [--timeout-in-millis <value>]
          [--tls-config <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --rest-api-id (string)
          [Required] The string identifier of the associated  RestApi .

       --resource-id (string)
          [Required] Specifies a put integration request's resource ID.

       --http-method (string)
          [Required] Specifies a put integration request's HTTP method.

       --type (string)
          [Required] Specifies a put integration input's type.

          Possible values:

          o HTTP

          o AWS

          o MOCK

          o HTTP_PROXY

          o AWS_PROXY

       --integration-http-method (string)
          Specifies  a  put integration HTTP method. When the integration type
          is HTTP or AWS, this field is required.

       --uri (string)
          Specifies Uniform Resource Identifier (URI) of the integration  end-
          point.

          o For  HTTP  or  HTTP_PROXY  integrations,  the  URI must be a fully
            formed, encoded HTTP(S) URL according to the  RFC-3986  specifica-
            tion  ,  for  either standard integration, where connectionType is
            not VPC_LINK , or private  integration,  where  connectionType  is
            VPC_LINK . For a private HTTP integration, the URI is not used for
            routing.

          o For AWS  or  AWS_PROXY  integrations,  the  URI  is  of  the  form
            arn:aws:apigateway:{region}:{subdomain.service|ser-
            vice}:path|action/{service_api} . Here, {Region} is the API  Gate-
            way  region (e.g., us-east-1 ); {service} is the name of the inte-
            grated AWS service (e.g., s3 ); and {subdomain}  is  a  designated
            subdomain  supported  by  certain  AWS  service for fast host-name
            lookup. action can be used for an AWS  service  action-based  API,
            using  an  Action={name}&{p1}={v1}&p2={v2}...  query  string.  The
            ensuing {service_api} refers to a supported action {name} plus any
            required  input parameters. Alternatively, path can be used for an
            AWS service path-based API. The ensuing service_api refers to  the
            path to an AWS service resource, including the region of the inte-
            grated AWS service, if applicable. For  example,  for  integration
            with  the  S3  API of `GetObject <https://docs.aws.amazon.com/Ama-
            zonS3/latest/API/RESTObjectGET.html>`__ , the uri  can  be  either
            arn:aws:apigateway:us-west-2:s3:action/GetOb-
            ject&Bucket={bucket}&Key={key}         or         arn:aws:apigate-
            way:us-west-2:s3:path/{bucket}/{key}

       --connection-type (string)
          The  type of the network connection to the integration endpoint. The
          valid value is INTERNET for connections through the public  routable
          internet or VPC_LINK for private connections between API Gateway and
          a network load balancer in a VPC. The default value is INTERNET .

          Possible values:

          o INTERNET

          o VPC_LINK

       --connection-id (string)
          The                             (`id                              <-
          https://docs.aws.amazon.com/apigateway/api-refer-
          ence/resource/vpc-link/#id>`__ ) of the  VpcLink used for the  inte-
          gration when connectionType=VPC_LINK and undefined, otherwise.

       --credentials (string)
          Specifies whether credentials are required for a put integration.

       --request-parameters (map)
          A  key-value  map specifying request parameters that are passed from
          the method request to the  back  end.  The  key  is  an  integration
          request  parameter name and the associated value is a method request
          parameter value or static value that must be enclosed within  single
          quotes  and  pre-encoded  as  required  by  the back end. The method
          request   parameter   value    must    match    the    pattern    of
          method.request.{location}.{name}  ,  where location is querystring ,
          path , or header and name must be a valid and unique method  request
          parameter name.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --request-templates (map)
          Represents  a  map  of  Velocity  templates  that are applied on the
          request payload based on the value of the Content-Type  header  sent
          by  the  client.  The content type value is the key in this map, and
          the template (as a String) is the value.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --passthrough-behavior (string)
          Specifies the pass-through behavior for incoming requests  based  on
          the  Content-Type  header  in the request, and the available mapping
          templates specified as the requestTemplates property on the Integra-
          tion  resource.  There  are  three  valid  values:  WHEN_NO_MATCH  ,
          WHEN_NO_TEMPLATES , and NEVER .

          o WHEN_NO_MATCH passes the request body for unmapped  content  types
            through to the integration back end without transformation.

          o NEVER rejects unmapped content types with an HTTP 415 'Unsupported
            Media Type' response.

          o WHEN_NO_TEMPLATES allows pass-through when the integration has  NO
            content  types  mapped  to templates. However if there is at least
            one content type defined, unmapped content types will be  rejected
            with the same 415 response.

       --cache-namespace (string)
          Specifies  a  group  of  related  cached parameters. By default, API
          Gateway uses the resource ID as the cacheNamespace . You can specify
          the  same  cacheNamespace across resources to return the same cached
          data for requests to different resources.

       --cache-key-parameters (list)
          A list of request parameters whose values API Gateway caches. To  be
          valid  values for cacheKeyParameters , these parameters must also be
          specified for  Method  requestParameters .

          (string)

       Syntax:

          "string" "string" ...

       --content-handling (string)
          Specifies how to handle request payload  content  type  conversions.
          Supported  values  are  CONVERT_TO_BINARY and CONVERT_TO_TEXT , with
          the following behaviors:

          o CONVERT_TO_BINARY  :   Converts   a   request   payload   from   a
            Base64-encoded string to the corresponding binary blob.

          o CONVERT_TO_TEXT : Converts a request payload from a binary blob to
            a Base64-encoded string.

          If this property is not defined, the request payload will be  passed
          through from the method request to integration request without modi-
          fication, provided that the  passthroughBehavior  is  configured  to
          support payload pass-through.

          Possible values:

          o CONVERT_TO_BINARY

          o CONVERT_TO_TEXT

       --timeout-in-millis (integer)
          Custom timeout between 50 and 29,000 milliseconds. The default value
          is 29,000 milliseconds or 29 seconds.

       --tls-config (structure) insecureSkipVerification -> (boolean)
          Specifies whether or not API Gateway  skips  verification  that  the
          certificate  for  an  integration  endpoint is issued by a supported
          certificate authority . This isnt recommended, but it enables you to
          use certificates that are signed by private certificate authorities,
          or certificates that are self-signed. If enabled, API Gateway  still
          performs  basic  certificate validation, which includes checking the
          certificate's expiration date, hostname, and presence of a root cer-
          tificate  authority. Supported only for HTTP and HTTP_PROXY integra-
          tions.

       Shorthand Syntax:

          insecureSkipVerification=boolean

       JSON Syntax:

          {
            "insecureSkipVerification": true|false
          }

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To create a MOCK integration request

       Command:

          aws apigateway put-integration --rest-api-id 1234123412 --resource-id a1b2c3 --http-method GET --type MOCK --request-templates '{ "application/json": "{\"statusCode\": 200}" }'

       To create a HTTP integration request

       Command:

          aws apigateway put-integration --rest-api-id 1234123412 --resource-id a1b2c3 --http-method GET --type HTTP --integration-http-method GET --uri 'https://domain.tld/path'

       To create an AWS integration request with a Lambda Function endpoint

       Command:

          aws apigateway put-integration --rest-api-id 1234123412 --resource-id a1b2c3 --http-method GET --type AWS --integration-http-method POST --uri 'arn:aws:apigateway:us-west-2:lambda:path//2015-03-31/functions/arn:aws:lambda:us-west-2:123412341234:function:function_name/invocations'

OUTPUT
       type -> (string)
          Specifies an API method integration type. The valid value is one  of
          the following:

          o AWS  :  for integrating the API method request with an AWS service
            action, including the Lambda function-invoking  action.  With  the
            Lambda function-invoking action, this is referred to as the Lambda
            custom integration. With any other AWS  service  action,  this  is
            known as AWS integration.

          o AWS_PROXY : for integrating the API method request with the Lambda
            function-invoking action with the client  request  passed  through
            as-is.  This  integration  is also referred to as the Lambda proxy
            integration.

          o HTTP : for integrating the API method request with  an  HTTP  end-
            point,  including a private HTTP endpoint within a VPC. This inte-
            gration is also referred to as the HTTP custom integration.

          o HTTP_PROXY : for integrating the API method request with  an  HTTP
            endpoint, including a private HTTP endpoint within a VPC, with the
            client request passed through as-is. This is also referred  to  as
            the HTTP proxy integration.

          o MOCK  : for integrating the API method request with API Gateway as
            a "loop-back" endpoint without invoking any backend.

          For the HTTP and HTTP proxy integrations, each integration can spec-
          ify  a  protocol  (http/https  ), port and path. Standard 80 and 443
          ports are supported as well as custom ports above 1024. An  HTTP  or
          HTTP proxy integration with a connectionType of VPC_LINK is referred
          to as a private integration and uses a  VpcLink to connect API Gate-
          way to a network load balancer of a VPC.

       httpMethod -> (string)
          Specifies the integration's HTTP method type.

       uri -> (string)
          Specifies  Uniform Resource Identifier (URI) of the integration end-
          point.

          o For HTTP or HTTP_PROXY integrations,  the  URI  must  be  a  fully
            formed,  encoded  HTTP(S) URL according to the RFC-3986 specifica-
            tion , for either standard integration,  where  connectionType  is
            not  VPC_LINK  ,  or  private integration, where connectionType is
            VPC_LINK . For a private HTTP integration, the URI is not used for
            routing.

          o For  AWS  or  AWS_PROXY  integrations,  the  URI  is  of  the form
            arn:aws:apigateway:{region}:{subdomain.service|ser-
            vice}:path|action/{service_api}  . Here, {Region} is the API Gate-
            way region (e.g., us-east-1 ); {service} is the name of the  inte-
            grated  AWS  service  (e.g., s3 ); and {subdomain} is a designated
            subdomain supported by certain  AWS  service  for  fast  host-name
            lookup.  action  can  be used for an AWS service action-based API,
            using  an  Action={name}&{p1}={v1}&p2={v2}...  query  string.  The
            ensuing {service_api} refers to a supported action {name} plus any
            required input parameters. Alternatively, path can be used for  an
            AWS  service path-based API. The ensuing service_api refers to the
            path to an AWS service resource, including the region of the inte-
            grated  AWS  service,  if applicable. For example, for integration
            with the S3 API  of  `GetObject  <https://docs.aws.amazon.com/Ama-
            zonS3/latest/API/RESTObjectGET.html>`__  ,  the  uri can be either
            arn:aws:apigateway:us-west-2:s3:action/GetOb-
            ject&Bucket={bucket}&Key={key}         or         arn:aws:apigate-
            way:us-west-2:s3:path/{bucket}/{key}

       connectionType -> (string)
          The type of the network connection to the integration endpoint.  The
          valid  value is INTERNET for connections through the public routable
          internet or VPC_LINK for private connections between API Gateway and
          a network load balancer in a VPC. The default value is INTERNET .

       connectionId -> (string)
          The                              (`id                             <-
          https://docs.aws.amazon.com/apigateway/api-refer-
          ence/resource/vpc-link/#id>`__  ) of the  VpcLink used for the inte-
          gration when connectionType=VPC_LINK and undefined, otherwise.

       credentials -> (string)
          Specifies the credentials required for the integration, if any.  For
          AWS  integrations,  three  options  are available. To specify an IAM
          Role for API Gateway to assume, use the role's Amazon Resource  Name
          (ARN).  To require that the caller's identity be passed through from
          the request, specify the string  arn:aws:iam::\*:user/\*  .  To  use
          resource-based  permissions on supported AWS services, specify null.

       requestParameters -> (map)
          A key-value map specifying request parameters that are  passed  from
          the  method  request  to  the  back  end.  The key is an integration
          request parameter name and the associated value is a method  request
          parameter  value or static value that must be enclosed within single
          quotes and pre-encoded as required  by  the  back  end.  The  method
          request    parameter    value    must    match    the   pattern   of
          method.request.{location}.{name} , where location is  querystring  ,
          path  , or header and name must be a valid and unique method request
          parameter name.

          key -> (string)

          value -> (string)

       requestTemplates -> (map)
          Represents a map of Velocity  templates  that  are  applied  on  the
          request  payload  based on the value of the Content-Type header sent
          by the client. The content type value is the key in  this  map,  and
          the template (as a String) is the value.

          key -> (string)

          value -> (string)

       passthroughBehavior -> (string)
          Specifies  how  the  method request body of an unmapped content type
          will be passed through the integration request to the back end with-
          out  transformation.  A  content type is unmapped if no mapping tem-
          plate is defined in the integration or the  content  type  does  not
          match  any  of the mapped content types, as specified in requestTem-
          plates . The valid value is one of the following:

          o WHEN_NO_MATCH : passes the method request body through  the  inte-
            gration  request  to  the back end without transformation when the
            method request content type does not match any content type  asso-
            ciated  with  the  mapping  templates  defined  in the integration
            request.

          o WHEN_NO_TEMPLATES : passes the method  request  body  through  the
            integration request to the back end without transformation when no
            mapping template is defined in the integration request. If a  tem-
            plate  is defined when this option is selected, the method request
            of an unmapped content-type will be  rejected  with  an  HTTP  415
            Unsupported Media Type response.

          o NEVER  :  rejects  the method request with an HTTP 415 Unsupported
            Media Type response when either the method  request  content  type
            does  not  match any content type associated with the mapping tem-
            plates defined in the integration request or no  mapping  template
            is defined in the integration request.

       contentHandling -> (string)
          Specifies  how  to  handle request payload content type conversions.
          Supported values are CONVERT_TO_BINARY and  CONVERT_TO_TEXT  ,  with
          the following behaviors:

          o CONVERT_TO_BINARY   :   Converts   a   request   payload   from  a
            Base64-encoded string to the corresponding binary blob.

          o CONVERT_TO_TEXT : Converts a request payload from a binary blob to
            a Base64-encoded string.

          If  this property is not defined, the request payload will be passed
          through from the method request to integration request without modi-
          fication,  provided  that  the  passthroughBehavior is configured to
          support payload pass-through.

       timeoutInMillis -> (integer)
          Custom timeout between 50 and 29,000 milliseconds. The default value
          is 29,000 milliseconds or 29 seconds.

       cacheNamespace -> (string)
          Specifies  a  group  of  related  cached parameters. By default, API
          Gateway uses the resource ID as the cacheNamespace . You can specify
          the  same  cacheNamespace across resources to return the same cached
          data for requests to different resources.

       cacheKeyParameters -> (list)
          A list of request parameters whose values API Gateway caches. To  be
          valid  values for cacheKeyParameters , these parameters must also be
          specified for  Method  requestParameters .

          (string)

       integrationResponses -> (map)
          Specifies the integration's responses.
              Example: Get integration responses of a method Request

              GET  /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/inte-
              gration/responses/200  HTTP/1.1  Content-Type:  application/json
              Host:       apigateway.us-east-1.amazonaws.com       X-Amz-Date:
              20160607T191449Z    Authorization:    AWS4-HMAC-SHA256   Creden-
              tial={access_key_ID}/20160607/us-east-1/apigateway/aws4_request,
              SignedHeaders=content-type;host;x-amz-date,               Signa-
              ture={sig4_hash}  Response

          The successful response returns 200 OK status and a payload as  fol-
          lows:
              {   "_links":   {  "curies":  {  "href":  "https://docs.aws.ama-
              zon.com/apigateway/latest/developerguide/restapi-integra-
              tion-response-{rel}.html",  "name": "integrationresponse", "tem-
              plated":  true  },   "self":   {   "href":   "/restapis/fugvjdx-
              tri/resources/3kzxbg5sa2/methods/GET/integration/responses/200",
              "title":  "200"  },  "integrationresponse:delete":   {   "href":
              "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integra-
              tion/responses/200" }, "integrationresponse:update":  {  "href":
              "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integra-
              tion/responses/200"     }     },     "responseParameters":     {
              "method.response.header.Content-Type":   "'application/xml'"  },
              "responseTemplates":   {    "application/json":    "$util.urlDe-
              code(\"%3CkinesisStreams%3E#foreach($stream                   in
              $input.path('$.Stream-
              Names'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kine-
              sisStreams%3E\")\n" }, "statusCode": "200" }
                 Creating an API

          key -> (string)

          value -> (structure)
              Represents an integration response. The status code must map  to
              an  existing   MethodResponse , and parameters and templates can
              be used to transform the back-end response.
                 Creating an API

              statusCode -> (string)
                 Specifies the status code that is used to map the integration
                 response to an existing  MethodResponse .

              selectionPattern -> (string)
                 Specifies  the  regular  expression  (regex)  pattern used to
                 choose an integration response based on the response from the
                 back  end. For example, if the success response returns noth-
                 ing and the error response returns some string, you could use
                 the .+ regex to match error response. However, make sure that
                 the error response does not contain any newline (\n ) charac-
                 ter in such cases. If the back end is an AWS Lambda function,
                 the AWS Lambda function error  header  is  matched.  For  all
                 other  HTTP  and  AWS  back  ends,  the  HTTP  status code is
                 matched.

              responseParameters -> (map)
                 A key-value  map  specifying  response  parameters  that  are
                 passed to the method response from the back end. The key is a
                 method response header parameter name and the mapped value is
                 an integration response header value, a static value enclosed
                 within a pair of single quotes, or a JSON expression from the
                 integration  response  body.  The  mapping key must match the
                 pattern of method.response.header.{name} , where  name  is  a
                 valid  and  unique  header  name. The mapped non-static value
                 must match the pattern of  integration.response.header.{name}
                 or  integration.response.body.{JSON-expression}  , where name
                 is a valid and unique response header name  and  JSON-expres-
                 sion is a valid JSON expression without the $ prefix.

                 key -> (string)

                 value -> (string)

              responseTemplates -> (map)
                 Specifies  the  templates  used  to transform the integration
                 response  body.  Response  templates  are  represented  as  a
                 key/value  map, with a content-type as the key and a template
                 as the value.

                 key -> (string)

                 value -> (string)

              contentHandling -> (string)
                 Specifies how to handle response payload content type conver-
                 sions.   Supported  values  are  CONVERT_TO_BINARY  and  CON-
                 VERT_TO_TEXT , with the following behaviors:

                 o CONVERT_TO_BINARY : Converts  a  response  payload  from  a
                   Base64-encoded string to the corresponding binary blob.

                 o CONVERT_TO_TEXT : Converts a response payload from a binary
                   blob to a Base64-encoded string.

                 If this property is not defined, the response payload will be
                 passed  through  from  the integration response to the method
                 response without modification.

       tlsConfig -> (structure)
          Specifies the TLS configuration for an integration.

          insecureSkipVerification -> (boolean)
              Specifies whether or not API Gateway skips verification that the
              certificate for an integration endpoint is issued by a supported
              certificate authority . This isnt recommended,  but  it  enables
              you  to  use certificates that are signed by private certificate
              authorities, or certificates that are self-signed.  If  enabled,
              API  Gateway  still performs basic certificate validation, which
              includes checking the certificate's expiration  date,  hostname,
              and presence of a root certificate authority. Supported only for
              HTTP and HTTP_PROXY integrations.



                                                             PUT-INTEGRATION()
