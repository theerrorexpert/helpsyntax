UPDATE-INTEGRATION()                                      UPDATE-INTEGRATION()



NAME
       update-integration -

DESCRIPTION
       Updates an Integration.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            update-integration
          --api-id <value>
          [--connection-id <value>]
          [--connection-type <value>]
          [--content-handling-strategy <value>]
          [--credentials-arn <value>]
          [--description <value>]
          --integration-id <value>
          [--integration-method <value>]
          [--integration-subtype <value>]
          [--integration-type <value>]
          [--integration-uri <value>]
          [--passthrough-behavior <value>]
          [--payload-format-version <value>]
          [--request-parameters <value>]
          [--request-templates <value>]
          [--response-parameters <value>]
          [--template-selection-expression <value>]
          [--timeout-in-millis <value>]
          [--tls-config <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --api-id (string)
          The API identifier.

       --connection-id (string)
          The ID of the VPC link for a private integration. Supported only for
          HTTP APIs.

       --connection-type (string)
          The type of the network  connection  to  the  integration  endpoint.
          Specify  INTERNET for connections through the public routable inter-
          net or VPC_LINK for private  connections  between  API  Gateway  and
          resources in a VPC. The default value is INTERNET.

          Possible values:

          o INTERNET

          o VPC_LINK

       --content-handling-strategy (string)
          Supported  only for WebSocket APIs. Specifies how to handle response
          payload  content  type  conversions.  Supported  values   are   CON-
          VERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:

          CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
          string to the corresponding binary blob.

          CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
          Base64-encoded string.

          If this property is not defined, the response payload will be passed
          through from the integration  response  to  the  route  response  or
          method response without modification.

          Possible values:

          o CONVERT_TO_BINARY

          o CONVERT_TO_TEXT

       --credentials-arn (string)
          Specifies  the credentials required for the integration, if any. For
          AWS integrations, three options are available.  To  specify  an  IAM
          Role  for API Gateway to assume, use the role's Amazon Resource Name
          (ARN). To require that the caller's identity be passed through  from
          the   request,   specify  the  string  arn:aws:iam:::user/.  To  use
          resource-based permissions on supported AWS services, specify  null.

       --description (string)
          The description of the integration

       --integration-id (string)
          The integration ID.

       --integration-method (string)
          Specifies the integration's HTTP method type.

       --integration-subtype (string)
          Supported  only  for  HTTP API AWS_PROXY integrations. Specifies the
          AWS service action to invoke. To learn more, see Integration subtype
          reference .

       --integration-type (string)
          The integration type of an integration. One of the following:

          AWS: for integrating the route or method request with an AWS service
          action, including the  Lambda  function-invoking  action.  With  the
          Lambda  function-invoking  action, this is referred to as the Lambda
          custom integration. With any other AWS service action, this is known
          as AWS integration. Supported only for WebSocket APIs.

          AWS_PROXY: for integrating the route or method request with a Lambda
          function or other AWS  service  action.  This  integration  is  also
          referred to as a Lambda proxy integration.

          HTTP:  for integrating the route or method request with an HTTP end-
          point. This integration is also referred to as the HTTP custom inte-
          gration. Supported only for WebSocket APIs.

          HTTP_PROXY: for integrating the route or method request with an HTTP
          endpoint, with the client request passed through as-is. This is also
          referred to as HTTP proxy integration. For HTTP API private integra-
          tions, use an HTTP_PROXY integration.

          MOCK: for integrating the route or method request with  API  Gateway
          as  a  "loopback"  endpoint  without invoking any backend. Supported
          only for WebSocket APIs.

          Possible values:

          o AWS

          o HTTP

          o MOCK

          o HTTP_PROXY

          o AWS_PROXY

       --integration-uri (string)
          For a Lambda integration, specify the URI of a Lambda function.

          For an HTTP integration, specify a fully-qualified URL.

          For an HTTP API private integration, specify the ARN of an  Applica-
          tion  Load Balancer listener, Network Load Balancer listener, or AWS
          Cloud Map service. If you specify the ARN of an AWS Cloud  Map  ser-
          vice,  API Gateway uses DiscoverInstances to identify resources. You
          can use query parameters to  target  specific  resources.  To  learn
          more,   see   DiscoverInstances  .  For  private  integrations,  all
          resources must be owned by the same AWS account.

       --passthrough-behavior (string)
          Specifies the pass-through behavior for incoming requests  based  on
          the  Content-Type  header  in the request, and the available mapping
          templates specified as the requestTemplates property on the Integra-
          tion   resource.   There  are  three  valid  values:  WHEN_NO_MATCH,
          WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.

          WHEN_NO_MATCH passes the request body  for  unmapped  content  types
          through to the integration backend without transformation.

          NEVER  rejects  unmapped  content types with an HTTP 415 Unsupported
          Media Type response.

          WHEN_NO_TEMPLATES allows pass-through when the  integration  has  no
          content types mapped to templates. However, if there is at least one
          content type defined, unmapped content types will be  rejected  with
          the same HTTP 415 Unsupported Media Type response.

          Possible values:

          o WHEN_NO_MATCH

          o NEVER

          o WHEN_NO_TEMPLATES

       --payload-format-version (string)
          Specifies the format of the payload sent to an integration. Required
          for HTTP APIs.

       --request-parameters (map)
          For WebSocket APIs, a key-value map  specifying  request  parameters
          that  are  passed from the method request to the backend. The key is
          an integration request parameter name and the associated value is  a
          method request parameter value or static value that must be enclosed
          within single quotes and pre-encoded as required by the backend. The
          method   request   parameter   value   must  match  the  pattern  of
          method.request.{location}.{name},  where  {location}is  querystring,
          path, or header; and {name}must be a valid and unique method request
          parameter name.

          For HTTP  API  integrations  with  a  specified  integrationSubtype,
          request  parameters  are  a key-value map specifying parameters that
          are passed to AWS_PROXY integrations. You can provide static values,
          or  map request data, stage variables, or context variables that are
          evaluated at runtime. To learn more, see Working  with  AWS  service
          integrations for HTTP APIs .

          For  HTTP  API  integrations, without a specified integrationSubtype
          request parameters are a key-value map specifying how  to  transform
          HTTP  requests  before  sending  them to the backend. The key should
          follow  the  pattern   <action>:<header|querystring|path>.<location>
          where action can be append, overwrite or remove. For values, you can
          provide static values, or map request data, stage variables, or con-
          text  variables  that  are  evaluated at runtime. To learn more, see
          Transforming API requests and responses .

          key -> (string)

          value -> (string)
              A string with a length between [1-512].

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --request-templates (map)
          Represents a map of Velocity  templates  that  are  applied  on  the
          request  payload  based on the value of the Content-Type header sent
          by the client. The content type value is the key in  this  map,  and
          the  template  (as  a  String) is the value. Supported only for Web-
          Socket APIs.

          key -> (string)

          value -> (string)
              A string with a length between [0-32768].

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --response-parameters (map)
          Supported only for HTTP APIs. You use response parameters to  trans-
          form  the  HTTP response from a backend integration before returning
          the response to clients. Specify a key-value map  from  a  selection
          key  to  response parameters. The selection key must be a valid HTTP
          status code within the range of 200-599. Response parameters  are  a
          key-value  map.  The key must match pattern <action>:<header>.<loca-
          tion> or overwrite.statuscode. The action can be  append,  overwrite
          or remove. The value can be a static value, or map to response data,
          stage variables, or context variables that are evaluated at runtime.
          To learn more, see Transforming API requests and responses .

          key -> (string)

          value -> (map)
              For  WebSocket  APIs, a key-value map specifying request parame-
              ters that are passed from the method request to the backend. The
              key  is an integration request parameter name and the associated
              value is a method request parameter value or static  value  that
              must  be  enclosed  within  single  quotes  and  pre-encoded  as
              required by the backend. The method request parameter value must
              match  the  pattern  of  method.request.{location}.{name}, where
              {location}is querystring, path, or header; and {name}must  be  a
              valid and unique method request parameter name.

              For  HTTP  API integrations with a specified integrationSubtype,
              request parameters are a  key-value  map  specifying  parameters
              that  are  passed  to  AWS_PROXY  integrations.  You can provide
              static values, or map request data, stage variables, or  context
              variables  that  are  evaluated  at  runtime. To learn more, see
              Working with AWS service integrations for HTTP APIs .

              For HTTP API integrations without a specified integrationSubtype
              request  parameters are a key-value map specifying how to trans-
              form HTTP requests before sending them to the backend.  The  key
              should     follow     the    pattern    <action>:<header|querys-
              tring|path>.<location> where action can be append, overwrite  or
              remove.  For  values,  you  can  provide  static  values, or map
              request data, stage variables, or  context  variables  that  are
              evaluated  at  runtime.  To  learn  more,  see  Transforming API
              requests and responses .

              key -> (string)

              value -> (string)
                 A string with a length between [1-512].

       Shorthand Syntax:

          KeyName1=KeyName1=string,KeyName2=string,KeyName2=KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": {"string": "string"
                ...}
            ...}

       --template-selection-expression (string)
          The template selection expression for the integration.

       --timeout-in-millis (integer)
          Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs
          and  between  50  and 30,000 milliseconds for HTTP APIs. The default
          timeout is 29 seconds for WebSocket APIs and  30  seconds  for  HTTP
          APIs.

       --tls-config (structure)
          The  TLS  configuration  for a private integration. If you specify a
          TLS configuration, private integration traffic uses the HTTPS proto-
          col. Supported only for HTTP APIs.

          ServerNameToVerify -> (string)
              If  you specify a server name, API Gateway uses it to verify the
              hostname on the integration's certificate. The  server  name  is
              also  included in the TLS handshake to support Server Name Indi-
              cation (SNI) or virtual hosting.

       Shorthand Syntax:

          ServerNameToVerify=string

       JSON Syntax:

          {
            "ServerNameToVerify": "string"
          }

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To update a Lambda integration

       The following update-integration example updates an existing AWS Lambda
       integration to use the specified Lambda function.

          aws apigatewayv2 update-integration \
              --api-id a1b2c3d4 \
              --integration-id a1b2c3 \
              --integration-uri arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:my-new-function/invocations

       Output:

          {
              "ConnectionType": "INTERNET",
              "IntegrationId": "a1b2c3",
              "IntegrationMethod": "POST",
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:my-new-function/invocations",
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 5000
          }

       For  more  information,  see Configuring integrations for HTTP APIs and
       Setting up WebSocket API integrations in the Amazon API Gateway  Devel-
       oper Guide.

OUTPUT
       ApiGatewayManaged -> (boolean)
          Specifies  whether  an integration is managed by API Gateway. If you
          created an API using using quick create, the  resulting  integration
          is managed by API Gateway. You can update a managed integration, but
          you can't delete it.

       ConnectionId -> (string)
          The ID of the VPC link for a private integration. Supported only for
          HTTP APIs.

       ConnectionType -> (string)
          The  type  of  the  network  connection to the integration endpoint.
          Specify INTERNET for connections through the public routable  inter-
          net  or  VPC_LINK  for  private  connections between API Gateway and
          resources in a VPC. The default value is INTERNET.

       ContentHandlingStrategy -> (string)
          Supported only for WebSocket APIs. Specifies how to handle  response
          payload   content   type  conversions.  Supported  values  are  CON-
          VERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:

          CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
          string to the corresponding binary blob.

          CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
          Base64-encoded string.

          If this property is not defined, the response payload will be passed
          through  from  the  integration  response  to  the route response or
          method response without modification.

       CredentialsArn -> (string)
          Specifies the credentials required for the integration, if any.  For
          AWS  integrations,  three  options  are available. To specify an IAM
          Role for API Gateway to assume, use the role's Amazon Resource  Name
          (ARN).  To require that the caller's identity be passed through from
          the  request,  specify  the  string  arn:aws:iam:::user/.   To   use
          resource-based  permissions on supported AWS services, specify null.

       Description -> (string)
          Represents the description of an integration.

       IntegrationId -> (string)
          Represents the identifier of an integration.

       IntegrationMethod -> (string)
          Specifies the integration's HTTP method type.

       IntegrationResponseSelectionExpression -> (string)
          The integration response selection expression for  the  integration.
          Supported  only  for WebSocket APIs. See Integration Response Selec-
          tion Expressions .

       IntegrationSubtype -> (string)
          Supported only for HTTP API AWS_PROXY  integrations.  Specifies  the
          AWS service action to invoke. To learn more, see Integration subtype
          reference .

       IntegrationType -> (string)
          The integration type of an integration. One of the following:

          AWS: for integrating the route or method request with an AWS service
          action,  including  the  Lambda  function-invoking  action. With the
          Lambda function-invoking action, this is referred to as  the  Lambda
          custom integration. With any other AWS service action, this is known
          as AWS integration. Supported only for WebSocket APIs.

          AWS_PROXY: for integrating the route or method request with a Lambda
          function  or  other  AWS  service  action.  This integration is also
          referred to as a Lambda proxy integration.

          HTTP: for integrating the route or method request with an HTTP  end-
          point. This integration is also referred to as the HTTP custom inte-
          gration. Supported only for WebSocket APIs.

          HTTP_PROXY: for integrating the route or method request with an HTTP
          endpoint, with the client request passed through as-is. This is also
          referred to as HTTP proxy integration.

          MOCK: for integrating the route or method request with  API  Gateway
          as  a  "loopback"  endpoint  without invoking any backend. Supported
          only for WebSocket APIs.

       IntegrationUri -> (string)
          For a Lambda integration, specify the URI of a Lambda function.

          For an HTTP integration, specify a fully-qualified URL.

          For an HTTP API private integration, specify the ARN of an  Applica-
          tion  Load Balancer listener, Network Load Balancer listener, or AWS
          Cloud Map service. If you specify the ARN of an AWS Cloud  Map  ser-
          vice,  API Gateway uses DiscoverInstances to identify resources. You
          can use query parameters to  target  specific  resources.  To  learn
          more,   see   DiscoverInstances  .  For  private  integrations,  all
          resources must be owned by the same AWS account.

       PassthroughBehavior -> (string)
          Specifies the pass-through behavior for incoming requests  based  on
          the  Content-Type  header  in the request, and the available mapping
          templates specified as the requestTemplates property on the Integra-
          tion   resource.   There  are  three  valid  values:  WHEN_NO_MATCH,
          WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.

          WHEN_NO_MATCH passes the request body  for  unmapped  content  types
          through to the integration backend without transformation.

          NEVER  rejects  unmapped  content types with an HTTP 415 Unsupported
          Media Type response.

          WHEN_NO_TEMPLATES allows pass-through when the  integration  has  no
          content types mapped to templates. However, if there is at least one
          content type defined, unmapped content types will be  rejected  with
          the same HTTP 415 Unsupported Media Type response.

       PayloadFormatVersion -> (string)
          Specifies the format of the payload sent to an integration. Required
          for HTTP APIs.

       RequestParameters -> (map)
          For WebSocket APIs, a key-value map  specifying  request  parameters
          that  are  passed from the method request to the backend. The key is
          an integration request parameter name and the associated value is  a
          method request parameter value or static value that must be enclosed
          within single quotes and pre-encoded as required by the backend. The
          method   request   parameter   value   must  match  the  pattern  of
          method.request.{location}.{name},  where  {location}is  querystring,
          path, or header; and {name}must be a valid and unique method request
          parameter name.

          For HTTP  API  integrations  with  a  specified  integrationSubtype,
          request  parameters  are  a key-value map specifying parameters that
          are passed to AWS_PROXY integrations. You can provide static values,
          or  map request data, stage variables, or context variables that are
          evaluated at runtime. To learn more, see Working  with  AWS  service
          integrations for HTTP APIs .

          For  HTTP  API  itegrations,  without a specified integrationSubtype
          request parameters are a key-value map specifying how  to  transform
          HTTP  requests  before sending them to backend integrations. The key
          should follow the pattern  <action>:<header|querystring|path>.<loca-
          tion>.  The  action  can be append, overwrite or remove. For values,
          you can provide static values, or map request data, stage variables,
          or  context  variables that are evaluated at runtime. To learn more,
          see Transforming API requests and responses .

          key -> (string)

          value -> (string)
              A string with a length between [1-512].

       RequestTemplates -> (map)
          Represents a map of Velocity  templates  that  are  applied  on  the
          request  payload  based on the value of the Content-Type header sent
          by the client. The content type value is the key in  this  map,  and
          the  template  (as  a  String) is the value. Supported only for Web-
          Socket APIs.

          key -> (string)

          value -> (string)
              A string with a length between [0-32768].

       ResponseParameters -> (map)
          Supported only for HTTP APIs. You use response parameters to  trans-
          form  the  HTTP response from a backend integration before returning
          the response to clients. Specify a key-value map  from  a  selection
          key  to  response parameters. The selection key must be a valid HTTP
          status code within the range of 200-599. Response parameters  are  a
          key-value  map.  The key must match pattern <action>:<header>.<loca-
          tion> or overwrite.statuscode. The action can be  append,  overwrite
          or remove. The value can be a static value, or map to response data,
          stage variables, or context variables that are evaluated at runtime.
          To learn more, see Transforming API requests and responses .

          key -> (string)

          value -> (map)
              For  WebSocket  APIs, a key-value map specifying request parame-
              ters that are passed from the method request to the backend. The
              key  is an integration request parameter name and the associated
              value is a method request parameter value or static  value  that
              must  be  enclosed  within  single  quotes  and  pre-encoded  as
              required by the backend. The method request parameter value must
              match  the  pattern  of  method.request.{location}.{name}, where
              {location}is querystring, path, or header; and {name}must  be  a
              valid and unique method request parameter name.

              For  HTTP  API integrations with a specified integrationSubtype,
              request parameters are a  key-value  map  specifying  parameters
              that  are  passed  to  AWS_PROXY  integrations.  You can provide
              static values, or map request data, stage variables, or  context
              variables  that  are  evaluated  at  runtime. To learn more, see
              Working with AWS service integrations for HTTP APIs .

              For HTTP API integrations without a specified integrationSubtype
              request  parameters are a key-value map specifying how to trans-
              form HTTP requests before sending them to the backend.  The  key
              should     follow     the    pattern    <action>:<header|querys-
              tring|path>.<location> where action can be append, overwrite  or
              remove.  For  values,  you  can  provide  static  values, or map
              request data, stage variables, or  context  variables  that  are
              evaluated  at  runtime.  To  learn  more,  see  Transforming API
              requests and responses .

              key -> (string)

              value -> (string)
                 A string with a length between [1-512].

       TemplateSelectionExpression -> (string)
          The template selection expression  for  the  integration.  Supported
          only for WebSocket APIs.

       TimeoutInMillis -> (integer)
          Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs
          and between 50 and 30,000 milliseconds for HTTP  APIs.  The  default
          timeout  is  29  seconds  for WebSocket APIs and 30 seconds for HTTP
          APIs.

       TlsConfig -> (structure)
          The TLS configuration for a private integration. If  you  specify  a
          TLS configuration, private integration traffic uses the HTTPS proto-
          col. Supported only for HTTP APIs.

          ServerNameToVerify -> (string)
              If you specify a server name, API Gateway uses it to verify  the
              hostname  on  the  integration's certificate. The server name is
              also included in the TLS handshake to support Server Name  Indi-
              cation (SNI) or virtual hosting.



                                                          UPDATE-INTEGRATION()
