UPDATE-AUTHORIZER()                                        UPDATE-AUTHORIZER()



NAME
       update-authorizer -

DESCRIPTION
       Updates an Authorizer.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            update-authorizer
          --api-id <value>
          [--authorizer-credentials-arn <value>]
          --authorizer-id <value>
          [--authorizer-payload-format-version <value>]
          [--authorizer-result-ttl-in-seconds <value>]
          [--authorizer-type <value>]
          [--authorizer-uri <value>]
          [--enable-simple-responses | --no-enable-simple-responses]
          [--identity-source <value>]
          [--identity-validation-expression <value>]
          [--jwt-configuration <value>]
          [--name <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --api-id (string)
          The API identifier.

       --authorizer-credentials-arn (string)
          Specifies the required credentials as an IAM role for API Gateway to
          invoke the authorizer. To specify an IAM role  for  API  Gateway  to
          assume,   use   the  role's  Amazon  Resource  Name  (ARN).  To  use
          resource-based permissions on the  Lambda  function,  don't  specify
          this parameter.

       --authorizer-id (string)
          The authorizer identifier.

       --authorizer-payload-format-version (string)
          Specifies  the  format  of  the  payload  sent to an HTTP API Lambda
          authorizer. Required for HTTP API Lambda authorizers. Supported val-
          ues  are  1.0  and  2.0.  To learn more, see Working with AWS Lambda
          authorizers for HTTP APIs .

       --authorizer-result-ttl-in-seconds (integer)
          The time to live (TTL) for cached authorizer results, in seconds. If
          it  equals  0,  authorization  caching is disabled. If it is greater
          than 0, API Gateway caches authorizer responses. The  maximum  value
          is  3600, or 1 hour. Supported only for HTTP API Lambda authorizers.

       --authorizer-type (string)
          The authorizer type. Specify REQUEST for  a  Lambda  function  using
          incoming  request  parameters.  Specify  JWT  to use JSON Web Tokens
          (supported only for HTTP APIs).

          Possible values:

          o REQUEST

          o JWT

       --authorizer-uri (string)
          The authorizer's Uniform  Resource  Identifier  (URI).  For  REQUEST
          authorizers,  this  must  be  a well-formed Lambda function URI, for
          example,   arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/func-
          tions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_func-
          tion_name}/invocations.  In  general,  the  URI   has   this   form:
          arn:aws:apigateway:{region}:lambda:path/{service_api},         where
          {region} is the same as the region hosting the Lambda function, path
          indicates  that the remaining substring in the URI should be treated
          as the path to the resource, including the  initial  /.  For  Lambda
          functions,  this is usually of the form /2015-03-31/functions/[Func-
          tionARN]/invocations. Supported only for REQUEST authorizers.

       --enable-simple-responses | --no-enable-simple-responses (boolean)
          Specifies whether a Lambda authorizer returns a response in a simple
          format.  By  default, a Lambda authorizer must return an IAM policy.
          If enabled, the Lambda authorizer can return a boolean value instead
          of  an  IAM policy. Supported only for HTTP APIs. To learn more, see
          Working with AWS Lambda authorizers for HTTP APIs

       --identity-source (list)
          The identity source for which authorization is requested.

          For a REQUEST authorizer, this is optional. The value is  a  set  of
          one or more mapping expressions of the specified request parameters.
          The identity source can be headers, query string  parameters,  stage
          variables,  and  context  parameters. For example, if an Auth header
          and a Name query string parameter are defined as  identity  sources,
          this   value   is  route.request.header.Auth,  route.request.querys-
          tring.Name for WebSocket APIs. For HTTP APIs, use selection  expres-
          sions   prefixed   with   $,   for   example,  $request.header.Auth,
          $request.querystring.Name. These parameters are used to perform run-
          time validation for Lambda-based authorizers by verifying all of the
          identity-related request parameters are present in the request,  not
          null,  and  non-empty.  Only  when  this is true does the authorizer
          invoke the authorizer Lambda function. Otherwise, it returns  a  401
          Unauthorized  response without calling the Lambda function. For HTTP
          APIs, identity sources are also used as the cache key  when  caching
          is  enabled.  To learn more, see Working with AWS Lambda authorizers
          for HTTP APIs .

          For JWT, a single entry that specifies where to extract the JSON Web
          Token  (JWT)  from inbound requests. Currently only header-based and
          query  parameter-based  selections  are   supported,   for   example
          $request.header.Authorization.

          (string)

       Syntax:

          "string" "string" ...

       --identity-validation-expression (string)
          This parameter is not used.

       --jwt-configuration (structure)
          Represents  the  configuration of a JWT authorizer. Required for the
          JWT authorizer type. Supported only for HTTP APIs.

          Audience -> (list)
              A list of the intended recipients of the JWT. A valid  JWT  must
              provide an aud that matches at least one entry in this list. See
              RFC 7519 . Supported only for HTTP APIs.

              (string)

          Issuer -> (string)
              The base domain of the identity provider that  issues  JSON  Web
              Tokens. For example, an Amazon Cognito user pool has the follow-
              ing                                                      format:
              https://cognito-idp.{region}.amazonaws.com/{userPoolId}.
              Required for the JWT authorizer type. Supported  only  for  HTTP
              APIs.

       Shorthand Syntax:

          Audience=string,string,Issuer=string

       JSON Syntax:

          {
            "Audience": ["string", ...],
            "Issuer": "string"
          }

       --name (string)
          The name of the authorizer.

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To update an authorizer

       The  following  update-authorizer  example  changes  a JWT authorizer's
       identity source to a header named Authorization.

          aws apigatewayv2 update-authorizer \
              --api-id a1b2c3d4 \
              --authorizer-id a1b2c3 \
              --identity-source '$request.header.Authorization'

       Output:

          {
              "AuthorizerId": "a1b2c3",
              "AuthorizerType": "JWT",
              "IdentitySource": [
                  "$request.header.Authorization"
              ],
              "JwtConfiguration": {
                  "Audience": [
                      "123456abc"
                  ],
                  "Issuer": "https://cognito-idp.us-west-2.amazonaws.com/us-west-2_abc123"
              },
              "Name": "my-jwt-authorizer"
          }

       For more information, see Controlling access  to  HTTP  APIs  with  JWT
       authorizers in the Amazon API Gateway Developer Guide.

OUTPUT
       AuthorizerCredentialsArn -> (string)
          Specifies the required credentials as an IAM role for API Gateway to
          invoke the authorizer. To specify an IAM role  for  API  Gateway  to
          assume,   use   the  role's  Amazon  Resource  Name  (ARN).  To  use
          resource-based permissions on the  Lambda  function,  don't  specify
          this parameter. Supported only for REQUEST authorizers.

       AuthorizerId -> (string)
          The authorizer identifier.

       AuthorizerPayloadFormatVersion -> (string)
          Specifies  the  format  of  the  payload  sent to an HTTP API Lambda
          authorizer. Required for HTTP API Lambda authorizers. Supported val-
          ues  are  1.0  and  2.0.  To learn more, see Working with AWS Lambda
          authorizers for HTTP APIs .

       AuthorizerResultTtlInSeconds -> (integer)
          The time to live (TTL) for cached authorizer results, in seconds. If
          it  equals  0,  authorization  caching is disabled. If it is greater
          than 0, API Gateway caches authorizer responses. The  maximum  value
          is  3600, or 1 hour. Supported only for HTTP API Lambda authorizers.

       AuthorizerType -> (string)
          The authorizer type. Specify REQUEST for  a  Lambda  function  using
          incoming  request  parameters.  Specify  JWT  to use JSON Web Tokens
          (supported only for HTTP APIs).

       AuthorizerUri -> (string)
          The authorizer's Uniform  Resource  Identifier  (URI).  For  REQUEST
          authorizers,  this  must  be  a well-formed Lambda function URI, for
          example,   arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/func-
          tions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_func-
          tion_name}/invocations.  In  general,  the  URI   has   this   form:
          arn:aws:apigateway:{region}:lambda:path/{service_api},         where
          {region} is the same as the region hosting the Lambda function, path
          indicates  that the remaining substring in the URI should be treated
          as the path to the resource, including the  initial  /.  For  Lambda
          functions,  this is usually of the form /2015-03-31/functions/[Func-
          tionARN]/invocations. Supported only for REQUEST authorizers.

       EnableSimpleResponses -> (boolean)
          Specifies whether a Lambda authorizer returns a response in a simple
          format. If enabled, the Lambda authorizer can return a boolean value
          instead of an IAM policy. Supported only for  HTTP  APIs.  To  learn
          more, see Working with AWS Lambda authorizers for HTTP APIs

       IdentitySource -> (list)
          The identity source for which authorization is requested.

          For  a  REQUEST  authorizer, this is optional. The value is a set of
          one or more mapping expressions of the specified request parameters.
          The  identity  source can be headers, query string parameters, stage
          variables, and context parameters. For example, if  an  Auth  header
          and  a  Name query string parameter are defined as identity sources,
          this  value  is   route.request.header.Auth,   route.request.querys-
          tring.Name  for WebSocket APIs. For HTTP APIs, use selection expres-
          sions  prefixed   with   $,   for   example,   $request.header.Auth,
          $request.querystring.Name. These parameters are used to perform run-
          time validation for Lambda-based authorizers by verifying all of the
          identity-related  request parameters are present in the request, not
          null, and non-empty. Only when this  is  true  does  the  authorizer
          invoke  the  authorizer Lambda function. Otherwise, it returns a 401
          Unauthorized response without calling the Lambda function. For  HTTP
          APIs,  identity  sources are also used as the cache key when caching
          is enabled. To learn more, see Working with AWS  Lambda  authorizers
          for HTTP APIs .

          For JWT, a single entry that specifies where to extract the JSON Web
          Token (JWT) from inbound requests. Currently only  header-based  and
          query   parameter-based   selections   are  supported,  for  example
          $request.header.Authorization.

          (string)

       IdentityValidationExpression -> (string)
          The validation expression does not apply to the REQUEST  authorizer.

       JwtConfiguration -> (structure)
          Represents  the  configuration of a JWT authorizer. Required for the
          JWT authorizer type. Supported only for HTTP APIs.

          Audience -> (list)
              A list of the intended recipients of the JWT. A valid  JWT  must
              provide an aud that matches at least one entry in this list. See
              RFC 7519 . Supported only for HTTP APIs.

              (string)

          Issuer -> (string)
              The base domain of the identity provider that  issues  JSON  Web
              Tokens. For example, an Amazon Cognito user pool has the follow-
              ing                                                      format:
              https://cognito-idp.{region}.amazonaws.com/{userPoolId}.
              Required for the JWT authorizer type. Supported  only  for  HTTP
              APIs.

       Name -> (string)
          The name of the authorizer.



                                                           UPDATE-AUTHORIZER()
