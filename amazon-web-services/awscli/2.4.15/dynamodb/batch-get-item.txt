BATCH-GET-ITEM()                                              BATCH-GET-ITEM()



NAME
       batch-get-item -

DESCRIPTION
       The  BatchGetItem operation returns the attributes of one or more items
       from one or more tables. You identify requested items by primary key.

       A single operation can retrieve up to 16 MB of data, which can  contain
       as  many  as  100  items.  BatchGetItem returns a partial result if the
       response size limit is exceeded, the table's provisioned throughput  is
       exceeded, or an internal processing failure occurs. If a partial result
       is returned, the operation returns a value for  UnprocessedKeys  .  You
       can  use  this value to retry the operation starting with the next item
       to get.

       WARNING:
          If you request more than 100 items, BatchGetItem returns  a  Valida-
          tionException  with  the  message  "Too many items requested for the
          BatchGetItem call."

       For example, if you ask to retrieve 100 items, but each individual item
       is 300 KB in size, the system returns 52 items (so as not to exceed the
       16 MB limit). It also returns an appropriate UnprocessedKeys  value  so
       you  can get the next page of results. If desired, your application can
       include its own logic  to  assemble  the  pages  of  results  into  one
       dataset.

       If  none  of the items can be processed due to insufficient provisioned
       throughput on all of the  tables  in  the  request,  then  BatchGetItem
       returns  a  ProvisionedThroughputExceededException . If at least one of
       the items is successfully processed, then BatchGetItem  completes  suc-
       cessfully, while returning the keys of the unread items in Unprocessed-
       Keys .

       WARNING:
          If DynamoDB returns any unprocessed  items,  you  should  retry  the
          batch  operation on those items. However, we strongly recommend that
          you use an exponential backoff algorithm . If you  retry  the  batch
          operation  immediately,  the  underlying  read or write requests can
          still fail due to throttling on the individual tables. If you  delay
          the  batch  operation  using  exponential  backoff,  the  individual
          requests in the batch are much more likely to succeed.

          For more information, see Batch Operations and Error Handling in the
          Amazon DynamoDB Developer Guide .

       By  default, BatchGetItem performs eventually consistent reads on every
       table in the request. If you want strongly  consistent  reads  instead,
       you can set ConsistentRead to true for any or all tables.

       In  order to minimize response latency, BatchGetItem retrieves items in
       parallel.

       When designing your application, keep in mind that  DynamoDB  does  not
       return  items  in  any  particular order. To help parse the response by
       item, include the primary key values for the items in your  request  in
       the ProjectionExpression parameter.

       If  a  requested item does not exist, it is not returned in the result.
       Requests for nonexistent items consume the minimum read capacity  units
       according  to  the type of read. For more information, see Working with
       Tables in the Amazon DynamoDB Developer Guide .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            batch-get-item
          --request-items <value>
          [--return-consumed-capacity <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --request-items (map)
          A map of one or more table names and, for each  table,  a  map  that
          describes  one or more items to retrieve from that table. Each table
          name can be used only once per BatchGetItem request.

          Each element in the map of items to retrieve consists of the follow-
          ing:

          o ConsistentRead  - If true , a strongly consistent read is used; if
            false (the default), an eventually consistent read is used.

          o ExpressionAttributeNames - One or  more  substitution  tokens  for
            attribute names in the ProjectionExpression parameter. The follow-
            ing are some use cases for using ExpressionAttributeNames :

            o To access an attribute whose  name  conflicts  with  a  DynamoDB
              reserved word.

            o To   create  a  placeholder  for  repeating  occurrences  of  an
              attribute name in an expression.

            o To prevent special characters in an attribute  name  from  being
              misinterpreted in an expression.

          Use  the  #  character  in an expression to dereference an attribute
          name. For example, consider the following attribute name:

              o Percentile

          The name of this attribute conflicts with a  reserved  word,  so  it
          cannot  be used directly in an expression. (For the complete list of
          reserved words, see Reserved Words in the Amazon DynamoDB  Developer
          Guide  ).  To  work around this, you could specify the following for
          ExpressionAttributeNames :

              o {"#P":"Percentile"}

          You could then use this substitution in an expression,  as  in  this
          example:

              o #P = :val

          NOTE:
              Tokens  that begin with the : character are expression attribute
              values , which are placeholders for the actual value at runtime.

          For more information about expression attribute names, see Accessing
          Item Attributes in the Amazon DynamoDB Developer Guide .

          o Keys - An array of primary key attribute values that  define  spe-
            cific  items  in the table. For each primary key, you must provide
            all of the key attributes. For example, with a simple primary key,
            you  only need to provide the partition key value. For a composite
            key, you must provide both the partition key value  and  the  sort
            key value.

          o ProjectionExpression  -  A  string  that  identifies  one  or more
            attributes to  retrieve  from  the  table.  These  attributes  can
            include  scalars,  sets,  or  elements  of  a  JSON  document. The
            attributes in the expression must be separated by  commas.  If  no
            attribute  names  are specified, then all attributes are returned.
            If any of the requested attributes are  not  found,  they  do  not
            appear  in  the  result.  For more information, see Accessing Item
            Attributes in the Amazon DynamoDB Developer Guide .

          o AttributesToGet - This is a legacy  parameter.  Use  ProjectionEx-
            pression instead. For more information, see AttributesToGet in the
            Amazon DynamoDB Developer Guide .

          key -> (string)

          value -> (structure)
              Represents a  set  of  primary  keys  and,  for  each  key,  the
              attributes to retrieve from the table.

              For   each  primary  key,  you  must  provide  all  of  the  key
              attributes. For example, with a simple  primary  key,  you  only
              need  to provide the partition key. For a composite primary key,
              you must provide both the partition key and the sort key.

              Keys -> (list)
                 The primary key attribute values that define  the  items  and
                 the attributes associated with the items.

                 (map)
                     key -> (string)

                     value -> (structure)
                        Represents the data for an attribute.

                        Each  attribute  value  is  described  as a name-value
                        pair. The name is the data type, and the value is  the
                        data itself.

                        For  more  information,  see  Data Types in the Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            value -> (structure)
                               Represents the data for an attribute.

                               Each   attribute   value   is  described  as  a
                               name-value pair. The name is the data type, and
                               the value is the data itself.

                               For  more  information,  see  Data Types in the
                               Amazon DynamoDB Developer Guide .

                               S -> (string)
                                   An attribute of type String. For example:
                                      "S": "Hello"

                               N -> (string)
                                   An attribute of type Number. For example:
                                      "N": "123.45"

                                   Numbers are  sent  across  the  network  to
                                   DynamoDB  as  strings, to maximize compati-
                                   bility across languages and libraries. How-
                                   ever,  DynamoDB  treats them as number type
                                   attributes for mathematical operations.

                               B -> (blob)
                                   An attribute of type Binary. For example:
                                      "B":   "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmN-
                                      vZGVk"

                               SS -> (list)
                                   An  attribute of type String Set. For exam-
                                   ple:
                                      "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                   (string)

                               NS -> (list)
                                   An attribute of type Number Set. For  exam-
                                   ple:
                                      "NS": ["42.2", "-19", "7.5", "3.14"]

                                   Numbers  are  sent  across  the  network to
                                   DynamoDB as strings, to  maximize  compati-
                                   bility across languages and libraries. How-
                                   ever, DynamoDB treats them as  number  type
                                   attributes for mathematical operations.

                                   (string)

                               BS -> (list)
                                   An  attribute of type Binary Set. For exam-
                                   ple:
                                      "BS":      ["U3Vubnk=",      "UmFpbnk=",
                                      "U25vd3k="]

                                   (blob)

                               M -> (map)
                                   An attribute of type Map. For example:
                                      "M": {"Name": {"S": "Joe"}, "Age": {"N":
                                      "35"}}

                                   key -> (string)

                                   ( ... recursive ... )

                               L -> (list)
                                   An attribute of type List. For example:
                                      "L": [ {"S": "Cookies"}  ,  {"S":  "Cof-
                                      fee"}, {"N", "3.14159"}]

                                   ( ... recursive ... )

                               NULL -> (boolean)
                                   An attribute of type Null. For example:
                                      "NULL": true

                               BOOL -> (boolean)
                                   An attribute of type Boolean. For example:
                                      "BOOL": true

                        L -> (list)
                            An attribute of type List. For example:
                               "L":  [  {"S":  "Cookies"}  ,  {"S": "Coffee"},
                               {"N", "3.14159"}]

                            (structure)
                               Represents the data for an attribute.

                               Each  attribute  value  is   described   as   a
                               name-value pair. The name is the data type, and
                               the value is the data itself.

                               For more information, see  Data  Types  in  the
                               Amazon DynamoDB Developer Guide .

                               S -> (string)
                                   An attribute of type String. For example:
                                      "S": "Hello"

                               N -> (string)
                                   An attribute of type Number. For example:
                                      "N": "123.45"

                                   Numbers  are  sent  across  the  network to
                                   DynamoDB as strings, to  maximize  compati-
                                   bility across languages and libraries. How-
                                   ever, DynamoDB treats them as  number  type
                                   attributes for mathematical operations.

                               B -> (blob)
                                   An attribute of type Binary. For example:
                                      "B":   "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmN-
                                      vZGVk"

                               SS -> (list)
                                   An attribute of type String Set. For  exam-
                                   ple:
                                      "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                   (string)

                               NS -> (list)
                                   An  attribute of type Number Set. For exam-
                                   ple:
                                      "NS": ["42.2", "-19", "7.5", "3.14"]

                                   Numbers are  sent  across  the  network  to
                                   DynamoDB  as  strings, to maximize compati-
                                   bility across languages and libraries. How-
                                   ever,  DynamoDB  treats them as number type
                                   attributes for mathematical operations.

                                   (string)

                               BS -> (list)
                                   An attribute of type Binary Set. For  exam-
                                   ple:
                                      "BS":      ["U3Vubnk=",      "UmFpbnk=",
                                      "U25vd3k="]

                                   (blob)

                               M -> (map)
                                   An attribute of type Map. For example:
                                      "M": {"Name": {"S": "Joe"}, "Age": {"N":
                                      "35"}}

                                   key -> (string)

                                   ( ... recursive ... )

                               L -> (list)
                                   An attribute of type List. For example:
                                      "L":  [  {"S":  "Cookies"} , {"S": "Cof-
                                      fee"}, {"N", "3.14159"}]

                                   ( ... recursive ... )

                               NULL -> (boolean)
                                   An attribute of type Null. For example:
                                      "NULL": true

                               BOOL -> (boolean)
                                   An attribute of type Boolean. For example:
                                      "BOOL": true

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

              AttributesToGet -> (list)
                 This is a legacy parameter. Use ProjectionExpression instead.
                 For  more  information,  see Legacy Conditional Parameters in
                 the Amazon DynamoDB Developer Guide .

                 (string)

              ConsistentRead -> (boolean)
                 The consistency of a read operation. If set to true , then  a
                 strongly  consistent  read  is used; otherwise, an eventually
                 consistent read is used.

              ProjectionExpression -> (string)
                 A string that identifies one or more attributes  to  retrieve
                 from  the  table. These attributes can include scalars, sets,
                 or elements of a JSON document. The attributes in the Projec-
                 tionExpression must be separated by commas.

                 If no attribute names are specified, then all attributes will
                 be returned. If any  of  the  requested  attributes  are  not
                 found, they will not appear in the result.

                 For  more  information,  see Accessing Item Attributes in the
                 Amazon DynamoDB Developer Guide .

              ExpressionAttributeNames -> (map)
                 One or more substitution tokens for  attribute  names  in  an
                 expression.  The  following  are  some  use  cases  for using
                 ExpressionAttributeNames :

                 o To access an attribute whose name conflicts with a DynamoDB
                   reserved word.

                 o To  create  a  placeholder  for repeating occurrences of an
                   attribute name in an expression.

                 o To prevent special characters in  an  attribute  name  from
                   being misinterpreted in an expression.

                 Use  the  #  character  in  an  expression  to dereference an
                 attribute name. For example, consider the following attribute
                 name:

                 o Percentile

                 The name of this attribute conflicts with a reserved word, so
                 it cannot be used directly in an expression.  (For  the  com-
                 plete  list of reserved words, see Reserved Words in the Ama-
                 zon DynamoDB Developer Guide ).  To  work  around  this,  you
                 could specify the following for ExpressionAttributeNames :

                 o {"#P":"Percentile"}

                 You  could then use this substitution in an expression, as in
                 this example:

                 o #P = :val

                 NOTE:
                     Tokens that begin with the  :  character  are  expression
                     attribute  values , which are placeholders for the actual
                     value at runtime.

                 For more  information  on  expression  attribute  names,  see
                 Accessing  Item  Attributes  in the Amazon DynamoDB Developer
                 Guide .

                 key -> (string)

                 value -> (string)

       JSON Syntax:

          {"string": {
                "Keys": [
                  {"string": {
                        "S": "string",
                        "N": "string",
                        "B": blob,
                        "SS": ["string", ...],
                        "NS": ["string", ...],
                        "BS": [blob, ...],
                        "M": {"string": {
                              "S": "string",
                              "N": "string",
                              "B": blob,
                              "SS": ["string", ...],
                              "NS": ["string", ...],
                              "BS": [blob, ...],
                              "M": {"string": { ... recursive ... }
                                ...},
                              "L": [
                                { ... recursive ... }
                                ...
                              ],
                              "NULL": true|false,
                              "BOOL": true|false
                            }
                          ...},
                        "L": [
                          {
                            "S": "string",
                            "N": "string",
                            "B": blob,
                            "SS": ["string", ...],
                            "NS": ["string", ...],
                            "BS": [blob, ...],
                            "M": {"string": { ... recursive ... }
                              ...},
                            "L": [
                              { ... recursive ... }
                              ...
                            ],
                            "NULL": true|false,
                            "BOOL": true|false
                          }
                          ...
                        ],
                        "NULL": true|false,
                        "BOOL": true|false
                      }
                    ...}
                  ...
                ],
                "AttributesToGet": ["string", ...],
                "ConsistentRead": true|false,
                "ProjectionExpression": "string",
                "ExpressionAttributeNames": {"string": "string"
                  ...}
              }
            ...}

       --return-consumed-capacity (string)
          Determines the level of detail about either provisioned or on-demand
          throughput consumption that is returned in the response:

          o INDEXES - The response includes the aggregate ConsumedCapacity for
            the operation, together with ConsumedCapacity for each  table  and
            secondary index that was accessed. Note that some operations, such
            as GetItem and BatchGetItem , do not access any indexes at all. In
            these  cases, specifying INDEXES will only return ConsumedCapacity
            information for table(s).

          o TOTAL - The response includes only the aggregate  ConsumedCapacity
            for the operation.

          o NONE - No ConsumedCapacity details are included in the response.

          Possible values:

          o INDEXES

          o TOTAL

          o NONE

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To retrieve multiple items from a table

       The  following  batch-get-items  example  reads multiple items from the
       MusicCollection table using a batch  of  three  GetItem  requests,  and
       requests  the  number of read capacity units consumed by the operation.
       The command returns only the AlbumTitle attribute.

          aws dynamodb batch-get-item \
              --request-items file://request-items.json \
              --return-consumed-capacity TOTAL

       Contents of request-items.json:

          {
              "MusicCollection": {
                  "Keys": [
                      {
                          "Artist": {"S": "No One You Know"},
                          "SongTitle": {"S": "Call Me Today"}
                      },
                      {
                          "Artist": {"S": "Acme Band"},
                          "SongTitle": {"S": "Happy Day"}
                      },
                      {
                          "Artist": {"S": "No One You Know"},
                          "SongTitle": {"S": "Scared of My Shadow"}
                      }
                  ],
                  "ProjectionExpression":"AlbumTitle"
              }
          }

       Output:

          {
              "Responses": {
                  "MusicCollection": [
                      {
                          "AlbumTitle": {
                              "S": "Somewhat Famous"
                          }
                      },
                      {
                          "AlbumTitle": {
                              "S": "Blue Sky Blues"
                          }
                      },
                      {
                          "AlbumTitle": {
                              "S": "Louder Than Ever"
                          }
                      }
                  ]
              },
              "UnprocessedKeys": {},
              "ConsumedCapacity": [
                  {
                      "TableName": "MusicCollection",
                      "CapacityUnits": 1.5
                  }
              ]
          }

       For more information, see  Batch  Operations  in  the  Amazon  DynamoDB
       Developer Guide.

OUTPUT
       Responses -> (map)
          A  map  of  table  name to a list of items. Each object in Responses
          consists of a table name, along with a map of  attribute  data  con-
          sisting of the data type and attribute value.

          key -> (string)

          value -> (list)
              (map)
                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each attribute value is described as a  name-value
                            pair.  The name is the data type, and the value is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M": {"Name": {"S":  "Joe"},  "Age":  {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L":  [ {"S": "Cookies"} , {"S": "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        (structure)
                            Represents the data for an attribute.

                            Each  attribute value is described as a name-value
                            pair. The name is the data type, and the value  is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M":  {"Name":  {"S":  "Joe"}, "Age": {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L": [ {"S": "Cookies"} , {"S":  "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

       UnprocessedKeys -> (map)
          A  map  of  tables and their respective keys that were not processed
          with the current response. The UnprocessedKeys value is in the  same
          form  as  RequestItems  , so the value can be provided directly to a
          subsequent  BatchGetItem  operation.  For  more   information,   see
          RequestItems in the Request Parameters section.

          Each element consists of:

          o Keys  -  An array of primary key attribute values that define spe-
            cific items in the table.

          o ProjectionExpression - One or more attributes to be retrieved from
            the  table or index. By default, all attributes are returned. If a
            requested attribute is not  found,  it  does  not  appear  in  the
            result.

          o ConsistentRead  -  The  consistency of a read operation. If set to
            true , then a strongly consistent  read  is  used;  otherwise,  an
            eventually consistent read is used.

          If there are no unprocessed keys remaining, the response contains an
          empty UnprocessedKeys map.

          key -> (string)

          value -> (structure)
              Represents a  set  of  primary  keys  and,  for  each  key,  the
              attributes to retrieve from the table.

              For   each  primary  key,  you  must  provide  all  of  the  key
              attributes. For example, with a simple  primary  key,  you  only
              need  to provide the partition key. For a composite primary key,
              you must provide both the partition key and the sort key.

              Keys -> (list)
                 The primary key attribute values that define  the  items  and
                 the attributes associated with the items.

                 (map)
                     key -> (string)

                     value -> (structure)
                        Represents the data for an attribute.

                        Each  attribute  value  is  described  as a name-value
                        pair. The name is the data type, and the value is  the
                        data itself.

                        For  more  information,  see  Data Types in the Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            value -> (structure)
                               Represents the data for an attribute.

                               Each   attribute   value   is  described  as  a
                               name-value pair. The name is the data type, and
                               the value is the data itself.

                               For  more  information,  see  Data Types in the
                               Amazon DynamoDB Developer Guide .

                               S -> (string)
                                   An attribute of type String. For example:
                                      "S": "Hello"

                               N -> (string)
                                   An attribute of type Number. For example:
                                      "N": "123.45"

                                   Numbers are  sent  across  the  network  to
                                   DynamoDB  as  strings, to maximize compati-
                                   bility across languages and libraries. How-
                                   ever,  DynamoDB  treats them as number type
                                   attributes for mathematical operations.

                               B -> (blob)
                                   An attribute of type Binary. For example:
                                      "B":   "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmN-
                                      vZGVk"

                               SS -> (list)
                                   An  attribute of type String Set. For exam-
                                   ple:
                                      "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                   (string)

                               NS -> (list)
                                   An attribute of type Number Set. For  exam-
                                   ple:
                                      "NS": ["42.2", "-19", "7.5", "3.14"]

                                   Numbers  are  sent  across  the  network to
                                   DynamoDB as strings, to  maximize  compati-
                                   bility across languages and libraries. How-
                                   ever, DynamoDB treats them as  number  type
                                   attributes for mathematical operations.

                                   (string)

                               BS -> (list)
                                   An  attribute of type Binary Set. For exam-
                                   ple:
                                      "BS":      ["U3Vubnk=",      "UmFpbnk=",
                                      "U25vd3k="]

                                   (blob)

                               M -> (map)
                                   An attribute of type Map. For example:
                                      "M": {"Name": {"S": "Joe"}, "Age": {"N":
                                      "35"}}

                                   key -> (string)

                                   ( ... recursive ... )

                               L -> (list)
                                   An attribute of type List. For example:
                                      "L": [ {"S": "Cookies"}  ,  {"S":  "Cof-
                                      fee"}, {"N", "3.14159"}]

                                   ( ... recursive ... )

                               NULL -> (boolean)
                                   An attribute of type Null. For example:
                                      "NULL": true

                               BOOL -> (boolean)
                                   An attribute of type Boolean. For example:
                                      "BOOL": true

                        L -> (list)
                            An attribute of type List. For example:
                               "L":  [  {"S":  "Cookies"}  ,  {"S": "Coffee"},
                               {"N", "3.14159"}]

                            (structure)
                               Represents the data for an attribute.

                               Each  attribute  value  is   described   as   a
                               name-value pair. The name is the data type, and
                               the value is the data itself.

                               For more information, see  Data  Types  in  the
                               Amazon DynamoDB Developer Guide .

                               S -> (string)
                                   An attribute of type String. For example:
                                      "S": "Hello"

                               N -> (string)
                                   An attribute of type Number. For example:
                                      "N": "123.45"

                                   Numbers  are  sent  across  the  network to
                                   DynamoDB as strings, to  maximize  compati-
                                   bility across languages and libraries. How-
                                   ever, DynamoDB treats them as  number  type
                                   attributes for mathematical operations.

                               B -> (blob)
                                   An attribute of type Binary. For example:
                                      "B":   "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmN-
                                      vZGVk"

                               SS -> (list)
                                   An attribute of type String Set. For  exam-
                                   ple:
                                      "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                   (string)

                               NS -> (list)
                                   An  attribute of type Number Set. For exam-
                                   ple:
                                      "NS": ["42.2", "-19", "7.5", "3.14"]

                                   Numbers are  sent  across  the  network  to
                                   DynamoDB  as  strings, to maximize compati-
                                   bility across languages and libraries. How-
                                   ever,  DynamoDB  treats them as number type
                                   attributes for mathematical operations.

                                   (string)

                               BS -> (list)
                                   An attribute of type Binary Set. For  exam-
                                   ple:
                                      "BS":      ["U3Vubnk=",      "UmFpbnk=",
                                      "U25vd3k="]

                                   (blob)

                               M -> (map)
                                   An attribute of type Map. For example:
                                      "M": {"Name": {"S": "Joe"}, "Age": {"N":
                                      "35"}}

                                   key -> (string)

                                   ( ... recursive ... )

                               L -> (list)
                                   An attribute of type List. For example:
                                      "L":  [  {"S":  "Cookies"} , {"S": "Cof-
                                      fee"}, {"N", "3.14159"}]

                                   ( ... recursive ... )

                               NULL -> (boolean)
                                   An attribute of type Null. For example:
                                      "NULL": true

                               BOOL -> (boolean)
                                   An attribute of type Boolean. For example:
                                      "BOOL": true

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

              AttributesToGet -> (list)
                 This is a legacy parameter. Use ProjectionExpression instead.
                 For  more  information,  see Legacy Conditional Parameters in
                 the Amazon DynamoDB Developer Guide .

                 (string)

              ConsistentRead -> (boolean)
                 The consistency of a read operation. If set to true , then  a
                 strongly  consistent  read  is used; otherwise, an eventually
                 consistent read is used.

              ProjectionExpression -> (string)
                 A string that identifies one or more attributes  to  retrieve
                 from  the  table. These attributes can include scalars, sets,
                 or elements of a JSON document. The attributes in the Projec-
                 tionExpression must be separated by commas.

                 If no attribute names are specified, then all attributes will
                 be returned. If any  of  the  requested  attributes  are  not
                 found, they will not appear in the result.

                 For  more  information,  see Accessing Item Attributes in the
                 Amazon DynamoDB Developer Guide .

              ExpressionAttributeNames -> (map)
                 One or more substitution tokens for  attribute  names  in  an
                 expression.  The  following  are  some  use  cases  for using
                 ExpressionAttributeNames :

                 o To access an attribute whose name conflicts with a DynamoDB
                   reserved word.

                 o To  create  a  placeholder  for repeating occurrences of an
                   attribute name in an expression.

                 o To prevent special characters in  an  attribute  name  from
                   being misinterpreted in an expression.

                 Use  the  #  character  in  an  expression  to dereference an
                 attribute name. For example, consider the following attribute
                 name:

                 o Percentile

                 The name of this attribute conflicts with a reserved word, so
                 it cannot be used directly in an expression.  (For  the  com-
                 plete  list of reserved words, see Reserved Words in the Ama-
                 zon DynamoDB Developer Guide ).  To  work  around  this,  you
                 could specify the following for ExpressionAttributeNames :

                 o {"#P":"Percentile"}

                 You  could then use this substitution in an expression, as in
                 this example:

                 o #P = :val

                 NOTE:
                     Tokens that begin with the  :  character  are  expression
                     attribute  values , which are placeholders for the actual
                     value at runtime.

                 For more  information  on  expression  attribute  names,  see
                 Accessing  Item  Attributes  in the Amazon DynamoDB Developer
                 Guide .

                 key -> (string)

                 value -> (string)

       ConsumedCapacity -> (list)
          The read capacity units consumed by the entire  BatchGetItem  opera-
          tion.

          Each element consists of:

          o TableName - The table that consumed the provisioned throughput.

          o CapacityUnits - The total number of capacity units consumed.

          (structure)
              The  capacity  units consumed by an operation. The data returned
              includes the total provisioned throughput consumed,  along  with
              statistics  for the table and any indexes involved in the opera-
              tion. ConsumedCapacity is only returned if the request asked for
              it. For more information, see Provisioned Throughput in the Ama-
              zon DynamoDB Developer Guide .

              TableName -> (string)
                 The name of the table that was affected by the operation.

              CapacityUnits -> (double)
                 The total number of capacity units consumed by the operation.

              ReadCapacityUnits -> (double)
                 The total number of read capacity units consumed by the oper-
                 ation.

              WriteCapacityUnits -> (double)
                 The total number of write  capacity  units  consumed  by  the
                 operation.

              Table -> (structure)
                 The  amount  of  throughput consumed on the table affected by
                 the operation.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The  total  number  of write capacity units consumed on a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

              LocalSecondaryIndexes -> (map)
                 The  amount  of  throughput  consumed  on  each  local  index
                 affected by the operation.

                 key -> (string)

                 value -> (structure)
                     Represents the amount of provisioned throughput  capacity
                     consumed on a table or an index.

                     ReadCapacityUnits -> (double)
                        The  total number of read capacity units consumed on a
                        table or an index.

                     WriteCapacityUnits -> (double)
                        The total number of write capacity units consumed on a
                        table or an index.

                     CapacityUnits -> (double)
                        The total number of capacity units consumed on a table
                        or an index.

              GlobalSecondaryIndexes -> (map)
                 The amount  of  throughput  consumed  on  each  global  index
                 affected by the operation.

                 key -> (string)

                 value -> (structure)
                     Represents  the amount of provisioned throughput capacity
                     consumed on a table or an index.

                     ReadCapacityUnits -> (double)
                        The total number of read capacity units consumed on  a
                        table or an index.

                     WriteCapacityUnits -> (double)
                        The total number of write capacity units consumed on a
                        table or an index.

                     CapacityUnits -> (double)
                        The total number of capacity units consumed on a table
                        or an index.



                                                              BATCH-GET-ITEM()
