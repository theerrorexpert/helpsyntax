PUT-ITEM()                                                          PUT-ITEM()



NAME
       put-item -

DESCRIPTION
       Creates a new item, or replaces an old item with a new item. If an item
       that has the same primary key as the new item  already  exists  in  the
       specified  table,  the  new item completely replaces the existing item.
       You can perform a conditional put operation (add a new item if one with
       the  specified  primary key doesn't exist), or replace an existing item
       if it has certain attribute values. You can return the item's attribute
       values in the same operation, using the ReturnValues parameter.

       WARNING:
          This topic provides general information about the PutItem API.

          For  information on how to call the PutItem API using the Amazon Web
          Services SDK in specific languages, see the following:

          o PutItem in the Command Line Interface

          o PutItem in the SDK for .NET

          o PutItem in the SDK for C++

          o PutItem in the SDK for Go

          o PutItem in the SDK for Java

          o PutItem in the SDK for JavaScript

          o PutItem in the SDK for PHP V3

          o PutItem in the SDK for Python (Boto)

          o PutItem in the SDK for Ruby V2

       When you add an item, the primary key attributes are the only  required
       attributes. Attribute values cannot be null.

       Empty  String and Binary attribute values are allowed. Attribute values
       of type String and Binary must have a length greater than zero  if  the
       attribute  is  used  as  a key attribute for a table or index. Set type
       attributes cannot be empty.

       Invalid Requests with empty values will  be  rejected  with  a  Valida-
       tionException exception.

       NOTE:
          To  prevent a new item from replacing an existing item, use a condi-
          tional expression that contains  the  attribute_not_exists  function
          with  the  name of the attribute being used as the partition key for
          the table. Since every  record  must  contain  that  attribute,  the
          attribute_not_exists  function will only succeed if no matching item
          exists.

       For more information about PutItem , see Working with Items in the Ama-
       zon DynamoDB Developer Guide .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            put-item
          --table-name <value>
          --item <value>
          [--expected <value>]
          [--return-values <value>]
          [--return-consumed-capacity <value>]
          [--return-item-collection-metrics <value>]
          [--conditional-operator <value>]
          [--condition-expression <value>]
          [--expression-attribute-names <value>]
          [--expression-attribute-values <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --table-name (string)
          The name of the table to contain the item.

       --item (map)
          A  map  of  attribute name/value pairs, one for each attribute. Only
          the primary key attributes are required; you can optionally  provide
          other attribute name-value pairs for the item.

          You  must  provide  all  of  the attributes for the primary key. For
          example, with a simple primary key, you only need to provide a value
          for the partition key. For a composite primary key, you must provide
          both values for both the partition key and the sort key.

          If you specify any attributes that are part of an  index  key,  then
          the  data  types for those attributes must match those of the schema
          in the table's attribute definition.

          Empty String and Binary attribute values are allowed. Attribute val-
          ues  of  type String and Binary must have a length greater than zero
          if the attribute is used as a key attribute for a table or index.

          For more information about primary keys, see Primary Key in the Ama-
          zon DynamoDB Developer Guide .

          Each element in the Item map is an AttributeValue object.

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For more information, see Data  Types  in  the  Amazon  DynamoDB
              Developer Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":   [   {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N",
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name  is  the  data  type, and the value is the data
                     itself.

                     For more  information,  see  Data  Types  in  the  Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       JSON Syntax:

          {"string": {
                "S": "string",
                "N": "string",
                "B": blob,
                "SS": ["string", ...],
                "NS": ["string", ...],
                "BS": [blob, ...],
                "M": {"string": {
                      "S": "string",
                      "N": "string",
                      "B": blob,
                      "SS": ["string", ...],
                      "NS": ["string", ...],
                      "BS": [blob, ...],
                      "M": {"string": { ... recursive ... }
                        ...},
                      "L": [
                        { ... recursive ... }
                        ...
                      ],
                      "NULL": true|false,
                      "BOOL": true|false
                    }
                  ...},
                "L": [
                  {
                    "S": "string",
                    "N": "string",
                    "B": blob,
                    "SS": ["string", ...],
                    "NS": ["string", ...],
                    "BS": [blob, ...],
                    "M": {"string": { ... recursive ... }
                      ...},
                    "L": [
                      { ... recursive ... }
                      ...
                    ],
                    "NULL": true|false,
                    "BOOL": true|false
                  }
                  ...
                ],
                "NULL": true|false,
                "BOOL": true|false
              }
            ...}

       --expected (map)
          This is a legacy parameter.  Use  ConditionExpression  instead.  For
          more  information,  see  Expected  in  the Amazon DynamoDB Developer
          Guide .

          key -> (string)

          value -> (structure)
              Represents a condition to be compared with an  attribute  value.
              This  condition  can  be  used  with  DeleteItem  , PutItem , or
              UpdateItem operations; if the comparison evaluates to true,  the
              operation  succeeds;  if  not,  the operation fails. You can use
              ExpectedAttributeValue in one of two different ways:

              o Use AttributeValueList to specify one or more values  to  com-
                pare  against  an attribute. Use ComparisonOperator to specify
                how you want to perform  the  comparison.  If  the  comparison
                evaluates to true, then the conditional operation succeeds.

              o Use  Value  to  specify  a  value  that  DynamoDB will compare
                against an attribute. If the values  match,  then  ExpectedAt-
                tributeValue  evaluates  to true and the conditional operation
                succeeds. Optionally, you can also set Exists to false,  indi-
                cating  that  you do not expect to find the attribute value in
                the table. In this case, the  conditional  operation  succeeds
                only if the comparison evaluates to false.
                 Value and Exists are incompatible with AttributeValueList and
                 ComparisonOperator . Note that if you use both sets of param-
                 eters  at  once,  DynamoDB  will return a ValidationException
                 exception.

              Value -> (structure)
                 Represents the data for the expected attribute.

                 Each attribute value is described as a name-value  pair.  The
                 name is the data type, and the value is the data itself.

                 For  more  information, see Data Types in the Amazon DynamoDB
                 Developer Guide .

                 S -> (string)
                     An attribute of type String. For example:
                        "S": "Hello"

                 N -> (string)
                     An attribute of type Number. For example:
                        "N": "123.45"

                     Numbers are  sent  across  the  network  to  DynamoDB  as
                     strings,  to  maximize compatibility across languages and
                     libraries. However, DynamoDB treats them as  number  type
                     attributes for mathematical operations.

                 B -> (blob)
                     An attribute of type Binary. For example:
                        "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                 SS -> (list)
                     An attribute of type String Set. For example:
                        "SS": ["Giraffe", "Hippo" ,"Zebra"]

                     (string)

                 NS -> (list)
                     An attribute of type Number Set. For example:
                        "NS": ["42.2", "-19", "7.5", "3.14"]

                     Numbers  are  sent  across  the  network  to  DynamoDB as
                     strings, to maximize compatibility across  languages  and
                     libraries.  However,  DynamoDB treats them as number type
                     attributes for mathematical operations.

                     (string)

                 BS -> (list)
                     An attribute of type Binary Set. For example:
                        "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                     (blob)

                 M -> (map)
                     An attribute of type Map. For example:
                        "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                     key -> (string)

                     value -> (structure)
                        Represents the data for an attribute.

                        Each attribute value  is  described  as  a  name-value
                        pair.  The name is the data type, and the value is the
                        data itself.

                        For more information, see Data  Types  in  the  Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings, to  maximize  compatibility  across  lan-
                            guages  and  libraries.  However,  DynamoDB treats
                            them as number type  attributes  for  mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings, to  maximize  compatibility  across  lan-
                            guages  and  libraries.  However,  DynamoDB treats
                            them as number type  attributes  for  mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            ( ... recursive ... )

                        L -> (list)
                            An attribute of type List. For example:
                               "L": [  {"S":  "Cookies"}  ,  {"S":  "Coffee"},
                               {"N", "3.14159"}]

                            ( ... recursive ... )

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 L -> (list)
                     An attribute of type List. For example:
                        "L":  [  {"S":  "Cookies"}  ,  {"S":  "Coffee"}, {"N",
                        "3.14159"}]

                     (structure)
                        Represents the data for an attribute.

                        Each attribute value  is  described  as  a  name-value
                        pair.  The name is the data type, and the value is the
                        data itself.

                        For more information, see Data  Types  in  the  Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings, to  maximize  compatibility  across  lan-
                            guages  and  libraries.  However,  DynamoDB treats
                            them as number type  attributes  for  mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings, to  maximize  compatibility  across  lan-
                            guages  and  libraries.  However,  DynamoDB treats
                            them as number type  attributes  for  mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            ( ... recursive ... )

                        L -> (list)
                            An attribute of type List. For example:
                               "L": [  {"S":  "Cookies"}  ,  {"S":  "Coffee"},
                               {"N", "3.14159"}]

                            ( ... recursive ... )

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 NULL -> (boolean)
                     An attribute of type Null. For example:
                        "NULL": true

                 BOOL -> (boolean)
                     An attribute of type Boolean. For example:
                        "BOOL": true

              Exists -> (boolean)
                 Causes  DynamoDB  to  evaluate  the value before attempting a
                 conditional operation:

                 o If Exists is true , DynamoDB will  check  to  see  if  that
                   attribute  value  already  exists  in  the  table. If it is
                   found, then the operation succeeds. If it is not found, the
                   operation fails with a ConditionCheckFailedException .

                 o If  Exists  is  false , DynamoDB assumes that the attribute
                   value does not exist in the table. If  in  fact  the  value
                   does not exist, then the assumption is valid and the opera-
                   tion succeeds. If the value is found, despite  the  assump-
                   tion  that  it  does  not exist, the operation fails with a
                   ConditionCheckFailedException .

                 The default setting for Exists is true  .  If  you  supply  a
                 Value  all  by itself, DynamoDB assumes the attribute exists:
                 You don't have to set Exists to true , because it is implied.

                 DynamoDB returns a ValidationException if:

                 o Exists  is true but there is no Value to check. (You expect
                   a value to exist, but don't specify what that value is.)

                 o Exists is false but you also provide a Value . (You  cannot
                   expect  an  attribute to have a value, while also expecting
                   it not to exist.)

              ComparisonOperator -> (string)
                 A comparator for evaluating attributes in  the  AttributeVal-
                 ueList . For example, equals, greater than, less than, etc.

                 The following comparison operators are available:
                     EQ  | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS
                     | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN

                 The following are descriptions of each comparison operator.

                 o EQ : Equal. EQ is supported for all data  types,  including
                   lists  and  maps.   AttributeValueList can contain only one
                   AttributeValue element  of  type  String,  Number,  Binary,
                   String  Set, Number Set, or Binary Set. If an item contains
                   an AttributeValue element of a different type than the  one
                   provided  in  the  request,  the  value does not match. For
                   example,  {"S":"6"}  does  not  equal  {"N":"6"}  .   Also,
                   {"N":"6"} does not equal {"NS":["6", "2", "1"]} .

                 o NE : Not equal. NE is supported for all data types, includ-
                   ing lists and maps.  AttributeValueList  can  contain  only
                   one  AttributeValue  of type String, Number, Binary, String
                   Set, Number Set, or Binary Set.  If  an  item  contains  an
                   AttributeValue of a different type than the one provided in
                   the  request,  the  value  does  not  match.  For  example,
                   {"S":"6"}  does  not equal {"N":"6"} . Also, {"N":"6"} does
                   not equal {"NS":["6", "2", "1"]} .

                 o LE : Less than or equal.   AttributeValueList  can  contain
                   only  one AttributeValue element of type String, Number, or
                   Binary (not a set type). If an item contains an  Attribute-
                   Value  element of a different type than the one provided in
                   the  request,  the  value  does  not  match.  For  example,
                   {"S":"6"}  does  not equal {"N":"6"} . Also, {"N":"6"} does
                   not compare to {"NS":["6", "2", "1"]} .

                 o LT : Less than.   AttributeValueList can contain  only  one
                   AttributeValue of type String, Number, or Binary (not a set
                   type). If an item contains an AttributeValue element  of  a
                   different  type  than  the one provided in the request, the
                   value does not match. For example, {"S":"6"} does not equal
                   {"N":"6"} . Also, {"N":"6"} does not compare to {"NS":["6",
                   "2", "1"]} .

                 o GE : Greater than or equal.   AttributeValueList  can  con-
                   tain  only  one AttributeValue element of type String, Num-
                   ber, or Binary (not a set type). If  an  item  contains  an
                   AttributeValue  element  of  a  different type than the one
                   provided in the request, the  value  does  not  match.  For
                   example,   {"S":"6"}  does  not  equal  {"N":"6"}  .  Also,
                   {"N":"6"} does not compare to {"NS":["6", "2", "1"]} .

                 o GT : Greater than.   AttributeValueList  can  contain  only
                   one  AttributeValue  element  of  type  String,  Number, or
                   Binary (not a set type). If an item contains an  Attribute-
                   Value  element of a different type than the one provided in
                   the  request,  the  value  does  not  match.  For  example,
                   {"S":"6"}  does  not equal {"N":"6"} . Also, {"N":"6"} does
                   not compare to {"NS":["6", "2", "1"]} .

                 o NOT_NULL : The attribute exists. NOT_NULL is supported  for
                   all data types, including lists and maps.

                 NOTE:
                     This  operator  tests  for the existence of an attribute,
                     not its data type. If the data type of attribute "a "  is
                     null,  and you evaluate it using NOT_NULL , the result is
                     a Boolean true . This result is because the attribute  "a
                     "  exists;  its data type is not relevant to the NOT_NULL
                     comparison operator.

                 o NULL : The attribute does not exist. NULL is supported  for
                   all data types, including lists and maps.

                 NOTE:
                     This operator tests for the nonexistence of an attribute,
                     not its data type. If the data type of attribute "a "  is
                     null,  and  you  evaluate it using NULL , the result is a
                     Boolean false .  This  is  because  the  attribute  "a  "
                     exists; its data type is not relevant to the NULL compar-
                     ison operator.

                 o CONTAINS : Checks for a subsequence, or  value  in  a  set.
                   AttributeValueList can contain only one AttributeValue ele-
                   ment of type String, Number, or Binary (not a set type). If
                   the  target  attribute of the comparison is of type String,
                   then the operator checks for a substring match. If the tar-
                   get attribute of the comparison is of type Binary, then the
                   operator looks for a subsequence of the target that matches
                   the  input.  If the target attribute of the comparison is a
                   set ("SS ", "NS ", or "BS "), then the  operator  evaluates
                   to  true  if it finds an exact match with any member of the
                   set. CONTAINS is supported for lists:  When  evaluating  "a
                   CONTAINS b ", "a " can be a list; however, "b " cannot be a
                   set, a map, or a list.

                 o NOT_CONTAINS : Checks for  absence  of  a  subsequence,  or
                   absence  of  a value in a set.  AttributeValueList can con-
                   tain only one AttributeValue element of type  String,  Num-
                   ber, or Binary (not a set type). If the target attribute of
                   the comparison is a String, then the  operator  checks  for
                   the  absence  of a substring match. If the target attribute
                   of the comparison is Binary, then the operator  checks  for
                   the absence of a subsequence of the target that matches the
                   input. If the target attribute of the comparison is  a  set
                   ("SS  ",  "NS  ", or "BS "), then the operator evaluates to
                   true if it does not find an exact match with any member  of
                   the set. NOT_CONTAINS is supported for lists: When evaluat-
                   ing "a NOT CONTAINS b ", "a " can be a list; however, "b  "
                   cannot be a set, a map, or a list.

                 o BEGINS_WITH : Checks for a prefix.   AttributeValueList can
                   contain only one AttributeValue of type  String  or  Binary
                   (not  a  Number or a set type). The target attribute of the
                   comparison must be of type String or Binary (not  a  Number
                   or a set type).

                 o IN : Checks for matching elements in a list.  AttributeVal-
                   ueList can contain one or more AttributeValue  elements  of
                   type  String,  Number, or Binary. These attributes are com-
                   pared against an existing attribute of an item. If any ele-
                   ments  of  the  input  are equal to the item attribute, the
                   expression evaluates to true.

                 o BETWEEN : Greater than or equal to  the  first  value,  and
                   less  than  or  equal  to the second value.   AttributeVal-
                   ueList must contain two AttributeValue elements of the same
                   type,  either String, Number, or Binary (not a set type). A
                   target attribute matches if the  target  value  is  greater
                   than,  or  equal  to,  the  first element and less than, or
                   equal to, the  second  element.  If  an  item  contains  an
                   AttributeValue  element  of  a  different type than the one
                   provided in the request, the  value  does  not  match.  For
                   example,  {"S":"6"}  does  not compare to {"N":"6"} . Also,
                   {"N":"6"} does not compare to {"NS":["6", "2", "1"]}

              AttributeValueList -> (list)
                 One  or  more  values  to  evaluate  against   the   supplied
                 attribute.  The  number  of values in the list depends on the
                 ComparisonOperator being used.

                 For type Number, value comparisons are numeric.

                 String value comparisons for greater than,  equals,  or  less
                 than are based on ASCII character code values. For example, a
                 is greater than A , and a is greater than B . For a  list  of
                 code                        values,                       see
                 http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
                 .

                 For  Binary,  DynamoDB treats each byte of the binary data as
                 unsigned when it compares binary values.

                 For information on specifying data types in  JSON,  see  JSON
                 Data Format in the Amazon DynamoDB Developer Guide .

                 (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each attribute value is described as a  name-value
                            pair.  The name is the data type, and the value is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M": {"Name": {"S":  "Joe"},  "Age":  {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L":  [ {"S": "Cookies"} , {"S": "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        (structure)
                            Represents the data for an attribute.

                            Each  attribute value is described as a name-value
                            pair. The name is the data type, and the value  is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M":  {"Name":  {"S":  "Joe"}, "Age": {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L": [ {"S": "Cookies"} , {"S":  "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

       JSON Syntax:

          {"string": {
                "Value": {
                  "S": "string",
                  "N": "string",
                  "B": blob,
                  "SS": ["string", ...],
                  "NS": ["string", ...],
                  "BS": [blob, ...],
                  "M": {"string": {
                        "S": "string",
                        "N": "string",
                        "B": blob,
                        "SS": ["string", ...],
                        "NS": ["string", ...],
                        "BS": [blob, ...],
                        "M": {"string": { ... recursive ... }
                          ...},
                        "L": [
                          { ... recursive ... }
                          ...
                        ],
                        "NULL": true|false,
                        "BOOL": true|false
                      }
                    ...},
                  "L": [
                    {
                      "S": "string",
                      "N": "string",
                      "B": blob,
                      "SS": ["string", ...],
                      "NS": ["string", ...],
                      "BS": [blob, ...],
                      "M": {"string": { ... recursive ... }
                        ...},
                      "L": [
                        { ... recursive ... }
                        ...
                      ],
                      "NULL": true|false,
                      "BOOL": true|false
                    }
                    ...
                  ],
                  "NULL": true|false,
                  "BOOL": true|false
                },
                "Exists": true|false,
                "ComparisonOperator": "EQ"|"NE"|"IN"|"LE"|"LT"|"GE"|"GT"|"BETWEEN"|"NOT_NULL"|"NULL"|"CONTAINS"|"NOT_CONTAINS"|"BEGINS_WITH",
                "AttributeValueList": [
                  {
                    "S": "string",
                    "N": "string",
                    "B": blob,
                    "SS": ["string", ...],
                    "NS": ["string", ...],
                    "BS": [blob, ...],
                    "M": {"string": {
                          "S": "string",
                          "N": "string",
                          "B": blob,
                          "SS": ["string", ...],
                          "NS": ["string", ...],
                          "BS": [blob, ...],
                          "M": {"string": { ... recursive ... }
                            ...},
                          "L": [
                            { ... recursive ... }
                            ...
                          ],
                          "NULL": true|false,
                          "BOOL": true|false
                        }
                      ...},
                    "L": [
                      {
                        "S": "string",
                        "N": "string",
                        "B": blob,
                        "SS": ["string", ...],
                        "NS": ["string", ...],
                        "BS": [blob, ...],
                        "M": {"string": { ... recursive ... }
                          ...},
                        "L": [
                          { ... recursive ... }
                          ...
                        ],
                        "NULL": true|false,
                        "BOOL": true|false
                      }
                      ...
                    ],
                    "NULL": true|false,
                    "BOOL": true|false
                  }
                  ...
                ]
              }
            ...}

       --return-values (string)
          Use  ReturnValues  if  you  want  to get the item attributes as they
          appeared before they were updated  with  the  PutItem  request.  For
          PutItem , the valid values are:

          o NONE - If ReturnValues is not specified, or if its value is NONE ,
            then nothing is returned. (This setting is the default for Return-
            Values .)

          o ALL_OLD  - If PutItem overwrote an attribute name-value pair, then
            the content of the old item is returned.

          The values returned are strongly consistent.

          NOTE:
              The ReturnValues parameter is used by  several  DynamoDB  opera-
              tions; however, PutItem does not recognize any values other than
              NONE or ALL_OLD .

          Possible values:

          o NONE

          o ALL_OLD

          o UPDATED_OLD

          o ALL_NEW

          o UPDATED_NEW

       --return-consumed-capacity (string)
          Determines the level of detail about either provisioned or on-demand
          throughput consumption that is returned in the response:

          o INDEXES - The response includes the aggregate ConsumedCapacity for
            the operation, together with ConsumedCapacity for each  table  and
            secondary index that was accessed. Note that some operations, such
            as GetItem and BatchGetItem , do not access any indexes at all. In
            these  cases, specifying INDEXES will only return ConsumedCapacity
            information for table(s).

          o TOTAL - The response includes only the aggregate  ConsumedCapacity
            for the operation.

          o NONE - No ConsumedCapacity details are included in the response.

          Possible values:

          o INDEXES

          o TOTAL

          o NONE

       --return-item-collection-metrics (string)
          Determines  whether  item collection metrics are returned. If set to
          SIZE , the response includes statistics about item  collections,  if
          any,  that  were  modified  during the operation are returned in the
          response. If set to NONE (the default), no statistics are  returned.

          Possible values:

          o SIZE

          o NONE

       --conditional-operator (string)
          This  is  a  legacy  parameter. Use ConditionExpression instead. For
          more information, see ConditionalOperator  in  the  Amazon  DynamoDB
          Developer Guide .

          Possible values:

          o AND

          o OR

       --condition-expression (string)
          A  condition  that  must  be  satisfied  in  order for a conditional
          PutItem operation to succeed.

          An expression can contain any of the following:

          o Functions:    attribute_exists    |     attribute_not_exists     |
            attribute_type  |  contains  | begins_with | size   These function
            names are case-sensitive.

          o Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN

          o Logical operators: AND | OR | NOT

          For more information on condition expressions, see Condition Expres-
          sions in the Amazon DynamoDB Developer Guide .

       --expression-attribute-names (map)
          One  or  more  substitution tokens for attribute names in an expres-
          sion. The following are  some  use  cases  for  using  ExpressionAt-
          tributeNames :

          o To  access  an  attribute  whose  name  conflicts  with a DynamoDB
            reserved word.

          o To create a placeholder for repeating occurrences of an  attribute
            name in an expression.

          o To prevent special characters in an attribute name from being mis-
            interpreted in an expression.

          Use the # character in an expression  to  dereference  an  attribute
          name. For example, consider the following attribute name:

          o Percentile

          The  name  of  this  attribute conflicts with a reserved word, so it
          cannot be used directly in an expression. (For the complete list  of
          reserved  words, see Reserved Words in the Amazon DynamoDB Developer
          Guide ). To work around this, you could specify  the  following  for
          ExpressionAttributeNames :

          o {"#P":"Percentile"}

          You  could  then  use this substitution in an expression, as in this
          example:

          o #P = :val

          NOTE:
              Tokens that begin with the : character are expression  attribute
              values , which are placeholders for the actual value at runtime.

          For more information on expression attribute names,  see  Specifying
          Item Attributes in the Amazon DynamoDB Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --expression-attribute-values (map)
          One or more values that can be substituted in an expression.

          Use  the  :  (colon)  character  in  an expression to dereference an
          attribute value. For example,  suppose  that  you  wanted  to  check
          whether the value of the ProductStatus attribute was one of the fol-
          lowing:
              Available | Backordered | Discontinued

          You would first need to specify  ExpressionAttributeValues  as  fol-
          lows:
              {    ":avail":{"S":"Available"},    ":back":{"S":"Backordered"},
              ":disc":{"S":"Discontinued"} }

          You could then use these values in an expression, such as this:
              ProductStatus IN (:avail, :back, :disc)

          For more information on expression attribute values,  see  Condition
          Expressions in the Amazon DynamoDB Developer Guide .

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For more information, see Data  Types  in  the  Amazon  DynamoDB
              Developer Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":   [   {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N",
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name  is  the  data  type, and the value is the data
                     itself.

                     For more  information,  see  Data  Types  in  the  Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       JSON Syntax:

          {"string": {
                "S": "string",
                "N": "string",
                "B": blob,
                "SS": ["string", ...],
                "NS": ["string", ...],
                "BS": [blob, ...],
                "M": {"string": {
                      "S": "string",
                      "N": "string",
                      "B": blob,
                      "SS": ["string", ...],
                      "NS": ["string", ...],
                      "BS": [blob, ...],
                      "M": {"string": { ... recursive ... }
                        ...},
                      "L": [
                        { ... recursive ... }
                        ...
                      ],
                      "NULL": true|false,
                      "BOOL": true|false
                    }
                  ...},
                "L": [
                  {
                    "S": "string",
                    "N": "string",
                    "B": blob,
                    "SS": ["string", ...],
                    "NS": ["string", ...],
                    "BS": [blob, ...],
                    "M": {"string": { ... recursive ... }
                      ...},
                    "L": [
                      { ... recursive ... }
                      ...
                    ],
                    "NULL": true|false,
                    "BOOL": true|false
                  }
                  ...
                ],
                "NULL": true|false,
                "BOOL": true|false
              }
            ...}

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To add an item to a table

       The following put-item example adds a new item to  the  MusicCollection
       table.

          aws dynamodb put-item \
              --table-name MusicCollection \
              --item file://item.json \
              --return-consumed-capacity TOTAL \
              --return-item-collection-metrics SIZE

       Contents of item.json:

          {
              "Artist": {"S": "No One You Know"},
              "SongTitle": {"S": "Call Me Today"},
              "AlbumTitle": {"S": "Greatest Hits"}
          }

       Output:

          {
              "ConsumedCapacity": {
                  "TableName": "MusicCollection",
                  "CapacityUnits": 1.0
              },
              "ItemCollectionMetrics": {
                  "ItemCollectionKey": {
                      "Artist": {
                          "S": "No One You Know"
                      }
                  },
                  "SizeEstimateRangeGB": [
                      0.0,
                      1.0
                  ]
              }
          }

       For more information, see Writing an Item in the Amazon DynamoDB Devel-
       oper Guide.

       Example 2: To conditionally overwrite an item in a table

       The following put-item example overwrites an existing item in the  Mus-
       icCollection  table  only  if  that  existing  item  has  an AlbumTitle
       attribute with a value of Greatest Hits. The command returns the previ-
       ous value of the item.

          aws dynamodb put-item \
              --table-name MusicCollection \
              --item file://item.json \
              --condition-expression "#A = :A" \
              --expression-attribute-names file://names.json \
              --expression-attribute-values file://values.json \
              --return-values ALL_OLD

       Contents of item.json:

          {
              "Artist": {"S": "No One You Know"},
              "SongTitle": {"S": "Call Me Today"},
              "AlbumTitle": {"S": "Somewhat Famous"}
          }

       Contents of names.json:

          {
              "#A": "AlbumTitle"
          }

       Contents of values.json:

          {
              ":A": {"S": "Greatest Hits"}
          }

       Output:

          {
              "Attributes": {
                  "AlbumTitle": {
                      "S": "Greatest Hits"
                  },
                  "Artist": {
                      "S": "No One You Know"
                  },
                  "SongTitle": {
                      "S": "Call Me Today"
                  }
              }
          }

       If the key already exists, you should see the following output:

          A client error (ConditionalCheckFailedException) occurred when calling the PutItem operation: The conditional request failed.

       For more information, see Writing an Item in the Amazon DynamoDB Devel-
       oper Guide.

OUTPUT
       Attributes -> (map)
          The attribute values as they appeared before the PutItem  operation,
          but  only  if  ReturnValues  is specified as ALL_OLD in the request.
          Each element consists of an attribute name and an attribute value.

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For  more  information,  see  Data  Types in the Amazon DynamoDB
              Developer Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name  is  the  data  type, and the value is the data
                     itself.

                     For more  information,  see  Data  Types  in  the  Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":  [  {"S":  "Cookies"}  ,  {"S":   "Coffee"},   {"N",
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       ConsumedCapacity -> (structure)
          The  capacity  units  consumed  by  the  PutItem operation. The data
          returned includes the total provisioned throughput  consumed,  along
          with statistics for the table and any indexes involved in the opera-
          tion. ConsumedCapacity is only returned if the  ReturnConsumedCapac-
          ity  parameter  was  specified. For more information, see Read/Write
          Capacity Mode in the Amazon DynamoDB Developer Guide .

          TableName -> (string)
              The name of the table that was affected by the operation.

          CapacityUnits -> (double)
              The total number of capacity units consumed by the operation.

          ReadCapacityUnits -> (double)
              The total number of read capacity units consumed by  the  opera-
              tion.

          WriteCapacityUnits -> (double)
              The  total number of write capacity units consumed by the opera-
              tion.

          Table -> (structure)
              The amount of throughput consumed on the table affected  by  the
              operation.

              ReadCapacityUnits -> (double)
                 The  total  number of read capacity units consumed on a table
                 or an index.

              WriteCapacityUnits -> (double)
                 The total number of write capacity units consumed on a  table
                 or an index.

              CapacityUnits -> (double)
                 The  total number of capacity units consumed on a table or an
                 index.

          LocalSecondaryIndexes -> (map)
              The amount of throughput consumed on each local  index  affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The  total  number  of write capacity units consumed on a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

          GlobalSecondaryIndexes -> (map)
              The  amount of throughput consumed on each global index affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The total number of write capacity units  consumed  on  a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

       ItemCollectionMetrics -> (structure)
          Information about item collections, if any, that  were  affected  by
          the PutItem operation. ItemCollectionMetrics is only returned if the
          ReturnItemCollectionMetrics parameter was specified.  If  the  table
          does  not  have any local secondary indexes, this information is not
          returned in the response.

          Each ItemCollectionMetrics element consists of:

          o ItemCollectionKey - The partition key value of  the  item  collec-
            tion.  This  is  the  same  as the partition key value of the item
            itself.

          o SizeEstimateRangeGB - An estimate  of  item  collection  size,  in
            gigabytes.  This  value  is a two-element array containing a lower
            bound and an upper bound for the estimate. The  estimate  includes
            the  size  of  all  the  items  in the table, plus the size of all
            attributes projected into all of the local  secondary  indexes  on
            that table. Use this estimate to measure whether a local secondary
            index is approaching its size limit. The estimate  is  subject  to
            change over time; therefore, do not rely on the precision or accu-
            racy of the estimate.

          ItemCollectionKey -> (map)
              The partition key value of the item collection.  This  value  is
              the same as the partition key value of the item.

              key -> (string)

              value -> (structure)
                 Represents the data for an attribute.

                 Each  attribute  value is described as a name-value pair. The
                 name is the data type, and the value is the data itself.

                 For more information, see Data Types in the  Amazon  DynamoDB
                 Developer Guide .

                 S -> (string)
                     An attribute of type String. For example:
                        "S": "Hello"

                 N -> (string)
                     An attribute of type Number. For example:
                        "N": "123.45"

                     Numbers  are  sent  across  the  network  to  DynamoDB as
                     strings, to maximize compatibility across  languages  and
                     libraries.  However,  DynamoDB treats them as number type
                     attributes for mathematical operations.

                 B -> (blob)
                     An attribute of type Binary. For example:
                        "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                 SS -> (list)
                     An attribute of type String Set. For example:
                        "SS": ["Giraffe", "Hippo" ,"Zebra"]

                     (string)

                 NS -> (list)
                     An attribute of type Number Set. For example:
                        "NS": ["42.2", "-19", "7.5", "3.14"]

                     Numbers are  sent  across  the  network  to  DynamoDB  as
                     strings,  to  maximize compatibility across languages and
                     libraries. However, DynamoDB treats them as  number  type
                     attributes for mathematical operations.

                     (string)

                 BS -> (list)
                     An attribute of type Binary Set. For example:
                        "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                     (blob)

                 M -> (map)
                     An attribute of type Map. For example:
                        "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                     key -> (string)

                     value -> (structure)
                        Represents the data for an attribute.

                        Each  attribute  value  is  described  as a name-value
                        pair. The name is the data type, and the value is  the
                        data itself.

                        For  more  information,  see  Data Types in the Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            ( ... recursive ... )

                        L -> (list)
                            An attribute of type List. For example:
                               "L":  [  {"S":  "Cookies"}  ,  {"S": "Coffee"},
                               {"N", "3.14159"}]

                            ( ... recursive ... )

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 L -> (list)
                     An attribute of type List. For example:
                        "L": [  {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N",
                        "3.14159"}]

                     (structure)
                        Represents the data for an attribute.

                        Each  attribute  value  is  described  as a name-value
                        pair. The name is the data type, and the value is  the
                        data itself.

                        For  more  information,  see  Data Types in the Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            ( ... recursive ... )

                        L -> (list)
                            An attribute of type List. For example:
                               "L":  [  {"S":  "Cookies"}  ,  {"S": "Coffee"},
                               {"N", "3.14159"}]

                            ( ... recursive ... )

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 NULL -> (boolean)
                     An attribute of type Null. For example:
                        "NULL": true

                 BOOL -> (boolean)
                     An attribute of type Boolean. For example:
                        "BOOL": true

          SizeEstimateRangeGB -> (list)
              An estimate of item collection size, in gigabytes. This value is
              a  two-element array containing a lower bound and an upper bound
              for the estimate. The estimate includes  the  size  of  all  the
              items  in  the  table, plus the size of all attributes projected
              into all of the local secondary indexes on that table. Use  this
              estimate to measure whether a local secondary index is approach-
              ing its size limit.

              The estimate is subject to change over time; therefore,  do  not
              rely on the precision or accuracy of the estimate.

              (double)



                                                                    PUT-ITEM()
