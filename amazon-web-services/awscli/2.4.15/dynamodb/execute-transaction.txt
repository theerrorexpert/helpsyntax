EXECUTE-TRANSACTION()                                    EXECUTE-TRANSACTION()



NAME
       execute-transaction -

DESCRIPTION
       This  operation  allows you to perform transactional reads or writes on
       data stored in DynamoDB, using PartiQL.

       NOTE:
          The entire transaction must consist of  either  read  statements  or
          write statements, you cannot mix both in one transaction. The EXISTS
          function is an exception and can be used to check the  condition  of
          specific  attributes  of  the  item  in  a  similar manner to Condi-
          tionCheck in the TransactWriteItems API.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            execute-transaction
          --transact-statements <value>
          [--client-request-token <value>]
          [--return-consumed-capacity <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --transact-statements (list)
          The list of PartiQL statements representing the transaction to  run.

          (structure)
              Represents a PartiQL statment that uses parameters.

              Statement -> (string)
                 A PartiQL statment that uses parameters.

              Parameters -> (list)
                 The parameter values.

                 (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each attribute value is described as a  name-value
                            pair.  The name is the data type, and the value is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M": {"Name": {"S":  "Joe"},  "Age":  {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L":  [ {"S": "Cookies"} , {"S": "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        (structure)
                            Represents the data for an attribute.

                            Each  attribute value is described as a name-value
                            pair. The name is the data type, and the value  is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M":  {"Name":  {"S":  "Joe"}, "Age": {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L": [ {"S": "Cookies"} , {"S":  "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

       JSON Syntax:

          [
            {
              "Statement": "string",
              "Parameters": [
                {
                  "S": "string",
                  "N": "string",
                  "B": blob,
                  "SS": ["string", ...],
                  "NS": ["string", ...],
                  "BS": [blob, ...],
                  "M": {"string": {
                        "S": "string",
                        "N": "string",
                        "B": blob,
                        "SS": ["string", ...],
                        "NS": ["string", ...],
                        "BS": [blob, ...],
                        "M": {"string": { ... recursive ... }
                          ...},
                        "L": [
                          { ... recursive ... }
                          ...
                        ],
                        "NULL": true|false,
                        "BOOL": true|false
                      }
                    ...},
                  "L": [
                    {
                      "S": "string",
                      "N": "string",
                      "B": blob,
                      "SS": ["string", ...],
                      "NS": ["string", ...],
                      "BS": [blob, ...],
                      "M": {"string": { ... recursive ... }
                        ...},
                      "L": [
                        { ... recursive ... }
                        ...
                      ],
                      "NULL": true|false,
                      "BOOL": true|false
                    }
                    ...
                  ],
                  "NULL": true|false,
                  "BOOL": true|false
                }
                ...
              ]
            }
            ...
          ]

       --client-request-token (string)
          Set  this  value to get remaining results, if NextToken was returned
          in the statement response.

       --return-consumed-capacity (string)
          Determines the level of detail about either provisioned or on-demand
          throughput  consumption  that  is returned in the response. For more
          information, see TransactGetItems and TransactWriteItems .

          Possible values:

          o INDEXES

          o TOTAL

          o NONE

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       Responses -> (list)
          The response to a PartiQL transaction.

          (structure)
              Details for the requested item.

              Item -> (map)
                 Map of  attribute  data  consisting  of  the  data  type  and
                 attribute value.

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each attribute value is described as a  name-value
                            pair.  The name is the data type, and the value is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M": {"Name": {"S":  "Joe"},  "Age":  {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L":  [ {"S": "Cookies"} , {"S": "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        (structure)
                            Represents the data for an attribute.

                            Each  attribute value is described as a name-value
                            pair. The name is the data type, and the value  is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M":  {"Name":  {"S":  "Joe"}, "Age": {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L": [ {"S": "Cookies"} , {"S":  "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

       ConsumedCapacity -> (list)
          The  capacity  units consumed by the entire operation. The values of
          the list are ordered according to the ordering of the statements.

          (structure)
              The capacity units consumed by an operation. The  data  returned
              includes  the  total provisioned throughput consumed, along with
              statistics for the table and any indexes involved in the  opera-
              tion. ConsumedCapacity is only returned if the request asked for
              it. For more information, see Provisioned Throughput in the Ama-
              zon DynamoDB Developer Guide .

              TableName -> (string)
                 The name of the table that was affected by the operation.

              CapacityUnits -> (double)
                 The total number of capacity units consumed by the operation.

              ReadCapacityUnits -> (double)
                 The total number of read capacity units consumed by the oper-
                 ation.

              WriteCapacityUnits -> (double)
                 The  total  number  of  write  capacity units consumed by the
                 operation.

              Table -> (structure)
                 The amount of throughput consumed on the  table  affected  by
                 the operation.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The total number of write capacity units  consumed  on  a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

              LocalSecondaryIndexes -> (map)
                 The  amount  of  throughput  consumed  on  each  local  index
                 affected by the operation.

                 key -> (string)

                 value -> (structure)
                     Represents  the amount of provisioned throughput capacity
                     consumed on a table or an index.

                     ReadCapacityUnits -> (double)
                        The total number of read capacity units consumed on  a
                        table or an index.

                     WriteCapacityUnits -> (double)
                        The total number of write capacity units consumed on a
                        table or an index.

                     CapacityUnits -> (double)
                        The total number of capacity units consumed on a table
                        or an index.

              GlobalSecondaryIndexes -> (map)
                 The  amount  of  throughput  consumed  on  each  global index
                 affected by the operation.

                 key -> (string)

                 value -> (structure)
                     Represents the amount of provisioned throughput  capacity
                     consumed on a table or an index.

                     ReadCapacityUnits -> (double)
                        The  total number of read capacity units consumed on a
                        table or an index.

                     WriteCapacityUnits -> (double)
                        The total number of write capacity units consumed on a
                        table or an index.

                     CapacityUnits -> (double)
                        The total number of capacity units consumed on a table
                        or an index.



                                                         EXECUTE-TRANSACTION()
