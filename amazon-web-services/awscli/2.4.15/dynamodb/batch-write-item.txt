BATCH-WRITE-ITEM()                                          BATCH-WRITE-ITEM()



NAME
       batch-write-item -

DESCRIPTION
       The  BatchWriteItem  operation puts or deletes multiple items in one or
       more tables. A single call to BatchWriteItem can write up to 16  MB  of
       data, which can comprise as many as 25 put or delete requests. Individ-
       ual items to be written can be as large as 400 KB.

       NOTE:
          BatchWriteItem  cannot  update  items.  To  update  items,  use  the
          UpdateItem action.

       The  individual  PutItem  and DeleteItem operations specified in Batch-
       WriteItem are atomic; however BatchWriteItem as a whole is not. If  any
       requested operations fail because the table's provisioned throughput is
       exceeded or an internal processing failure occurs,  the  failed  opera-
       tions  are returned in the UnprocessedItems response parameter. You can
       investigate and optionally resend the requests.  Typically,  you  would
       call  BatchWriteItem  in  a loop. Each iteration would check for unpro-
       cessed items and submit a new BatchWriteItem request with those  unpro-
       cessed items until all items have been processed.

       If  none  of the items can be processed due to insufficient provisioned
       throughput on all of the tables in  the  request,  then  BatchWriteItem
       returns a ProvisionedThroughputExceededException .

       WARNING:
          If  DynamoDB  returns  any  unprocessed  items, you should retry the
          batch operation on those items. However, we strongly recommend  that
          you  use  an  exponential backoff algorithm . If you retry the batch
          operation immediately, the underlying read  or  write  requests  can
          still  fail due to throttling on the individual tables. If you delay
          the  batch  operation  using  exponential  backoff,  the  individual
          requests in the batch are much more likely to succeed.

          For more information, see Batch Operations and Error Handling in the
          Amazon DynamoDB Developer Guide .

       With BatchWriteItem , you can efficiently write or delete large amounts
       of  data,  such  as from Amazon EMR, or copy data from another database
       into DynamoDB. In order to improve performance with  these  large-scale
       operations,  BatchWriteItem does not behave in the same way as individ-
       ual PutItem and DeleteItem calls would. For example, you cannot specify
       conditions  on  individual  put and delete requests, and BatchWriteItem
       does not return deleted items in the response.

       If you use a programming language that supports  concurrency,  you  can
       use  threads  to write items in parallel. Your application must include
       the necessary logic to manage the threads. With  languages  that  don't
       support threading, you must update or delete the specified items one at
       a time. In both situations, BatchWriteItem performs the  specified  put
       and  delete  operations in parallel, giving you the power of the thread
       pool approach without having to introduce complexity into your applica-
       tion.

       Parallel  processing reduces latency, but each specified put and delete
       request consumes the same number of write capacity units whether it  is
       processed  in  parallel  or not. Delete operations on nonexistent items
       consume one write capacity unit.

       If one or more of the following is true, DynamoDB  rejects  the  entire
       batch write operation:

       o One  or  more tables specified in the BatchWriteItem request does not
         exist.

       o Primary key attributes specified on an item in  the  request  do  not
         match those in the corresponding table's primary key schema.

       o You  try  to perform multiple operations on the same item in the same
         BatchWriteItem request. For example, you cannot put  and  delete  the
         same item in the same BatchWriteItem request.

       o Your  request  contains  at  least  two items with identical hash and
         range keys (which essentially is two put operations).

       o There are more than 25 requests in the batch.

       o Any individual item in a batch exceeds 400 KB.

       o The total request size exceeds 16 MB.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            batch-write-item
          --request-items <value>
          [--return-consumed-capacity <value>]
          [--return-item-collection-metrics <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --request-items (map)
          A map of one or more table names and, for  each  table,  a  list  of
          operations to be performed (DeleteRequest or PutRequest ). Each ele-
          ment in the map consists of the following:

          o DeleteRequest - Perform a DeleteItem operation  on  the  specified
            item. The item to be deleted is identified by a Key subelement:

            o Key  - A map of primary key attribute values that uniquely iden-
              tify the item. Each entry in this map consists of  an  attribute
              name and an attribute value. For each primary key, you must pro-
              vide all of the key attributes. For example, with a simple  pri-
              mary  key,  you  only  need to provide a value for the partition
              key. For a composite primary key, you must  provide  values  for
              both the partition key and the sort key.

          o PutRequest  -  Perform  a PutItem operation on the specified item.
            The item to be put is identified by an Item subelement:

            o Item - A map of attributes and their values. Each entry in  this
              map  consists  of  an  attribute  name  and  an attribute value.
              Attribute values must  not  be  null;  string  and  binary  type
              attributes  must  have  lengths  greater than zero; and set type
              attributes must not be empty. Requests that contain empty values
              are  rejected with a ValidationException exception. If you spec-
              ify any attributes that are part of an index key, then the  data
              types for those attributes must match those of the schema in the
              table's attribute definition.

          key -> (string)

          value -> (list)
              (structure)
                 Represents an operation to perform  -  either  DeleteItem  or
                 PutItem  .  You can only request one of these operations, not
                 both, in a single WriteRequest . If you do  need  to  perform
                 both  of  these  operations, you need to provide two separate
                 WriteRequest objects.

                 PutRequest -> (structure)
                     A request to perform a PutItem operation.

                     Item -> (map)
                        A map of attribute name to  attribute  values,  repre-
                        senting  the primary key of an item to be processed by
                        PutItem . All of the table's  primary  key  attributes
                        must  be  specified,  and  their data types must match
                        those of the table's key schema. If any attributes are
                        present  in  the  item  that  are part of an index key
                        schema for the table, their types must match the index
                        key schema.

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each  attribute value is described as a name-value
                            pair. The name is the data type, and the value  is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M":  {"Name":  {"S":  "Joe"}, "Age": {"N":
                                   "35"}}

                               key -> (string)

                               value -> (structure)
                                   Represents the data for an attribute.

                                   Each attribute  value  is  described  as  a
                                   name-value pair. The name is the data type,
                                   and the value is the data itself.

                                   For more information, see Data Types in the
                                   Amazon DynamoDB Developer Guide .

                                   S -> (string)
                                      An  attribute  of type String. For exam-
                                      ple:
                                          "S": "Hello"

                                   N -> (string)
                                      An attribute of type Number.  For  exam-
                                      ple:
                                          "N": "123.45"

                                      Numbers  are  sent across the network to
                                      DynamoDB as strings, to maximize compat-
                                      ibility  across languages and libraries.
                                      However, DynamoDB treats them as  number
                                      type  attributes for mathematical opera-
                                      tions.

                                   B -> (blob)
                                      An attribute of type Binary.  For  exam-
                                      ple:
                                          "B":                          "dGhp-
                                          cyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                                   SS -> (list)
                                      An attribute of  type  String  Set.  For
                                      example:
                                          "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                      (string)

                                   NS -> (list)
                                      An  attribute  of  type  Number Set. For
                                      example:
                                          "NS": ["42.2", "-19", "7.5", "3.14"]

                                      Numbers  are  sent across the network to
                                      DynamoDB as strings, to maximize compat-
                                      ibility  across languages and libraries.
                                      However, DynamoDB treats them as  number
                                      type  attributes for mathematical opera-
                                      tions.

                                      (string)

                                   BS -> (list)
                                      An attribute of  type  Binary  Set.  For
                                      example:
                                          "BS":    ["U3Vubnk=",    "UmFpbnk=",
                                          "U25vd3k="]

                                      (blob)

                                   M -> (map)
                                      An attribute of type Map. For example:
                                          "M": {"Name": {"S":  "Joe"},  "Age":
                                          {"N": "35"}}

                                      key -> (string)

                                      ( ... recursive ... )

                                   L -> (list)
                                      An attribute of type List. For example:
                                          "L":  [  {"S":  "Cookies"}  ,  {"S":
                                          "Coffee"}, {"N", "3.14159"}]

                                      ( ... recursive ... )

                                   NULL -> (boolean)
                                      An attribute of type Null. For example:
                                          "NULL": true

                                   BOOL -> (boolean)
                                      An attribute of type Boolean. For  exam-
                                      ple:
                                          "BOOL": true

                            L -> (list)
                               An attribute of type List. For example:
                                   "L":  [ {"S": "Cookies"} , {"S": "Coffee"},
                                   {"N", "3.14159"}]

                               (structure)
                                   Represents the data for an attribute.

                                   Each attribute  value  is  described  as  a
                                   name-value pair. The name is the data type,
                                   and the value is the data itself.

                                   For more information, see Data Types in the
                                   Amazon DynamoDB Developer Guide .

                                   S -> (string)
                                      An  attribute  of type String. For exam-
                                      ple:
                                          "S": "Hello"

                                   N -> (string)
                                      An attribute of type Number.  For  exam-
                                      ple:
                                          "N": "123.45"

                                      Numbers  are  sent across the network to
                                      DynamoDB as strings, to maximize compat-
                                      ibility  across languages and libraries.
                                      However, DynamoDB treats them as  number
                                      type  attributes for mathematical opera-
                                      tions.

                                   B -> (blob)
                                      An attribute of type Binary.  For  exam-
                                      ple:
                                          "B":                          "dGhp-
                                          cyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                                   SS -> (list)
                                      An attribute of  type  String  Set.  For
                                      example:
                                          "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                      (string)

                                   NS -> (list)
                                      An  attribute  of  type  Number Set. For
                                      example:
                                          "NS": ["42.2", "-19", "7.5", "3.14"]

                                      Numbers  are  sent across the network to
                                      DynamoDB as strings, to maximize compat-
                                      ibility  across languages and libraries.
                                      However, DynamoDB treats them as  number
                                      type  attributes for mathematical opera-
                                      tions.

                                      (string)

                                   BS -> (list)
                                      An attribute of  type  Binary  Set.  For
                                      example:
                                          "BS":    ["U3Vubnk=",    "UmFpbnk=",
                                          "U25vd3k="]

                                      (blob)

                                   M -> (map)
                                      An attribute of type Map. For example:
                                          "M": {"Name": {"S":  "Joe"},  "Age":
                                          {"N": "35"}}

                                      key -> (string)

                                      ( ... recursive ... )

                                   L -> (list)
                                      An attribute of type List. For example:
                                          "L":  [  {"S":  "Cookies"}  ,  {"S":
                                          "Coffee"}, {"N", "3.14159"}]

                                      ( ... recursive ... )

                                   NULL -> (boolean)
                                      An attribute of type Null. For example:
                                          "NULL": true

                                   BOOL -> (boolean)
                                      An attribute of type Boolean. For  exam-
                                      ple:
                                          "BOOL": true

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                 DeleteRequest -> (structure)
                     A request to perform a DeleteItem operation.

                     Key -> (map)
                        A  map  of  attribute name to attribute values, repre-
                        senting the primary key of the item to delete. All  of
                        the  table's primary key attributes must be specified,
                        and their data types must match those of  the  table's
                        key schema.

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each  attribute value is described as a name-value
                            pair. The name is the data type, and the value  is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M":  {"Name":  {"S":  "Joe"}, "Age": {"N":
                                   "35"}}

                               key -> (string)

                               value -> (structure)
                                   Represents the data for an attribute.

                                   Each attribute  value  is  described  as  a
                                   name-value pair. The name is the data type,
                                   and the value is the data itself.

                                   For more information, see Data Types in the
                                   Amazon DynamoDB Developer Guide .

                                   S -> (string)
                                      An  attribute  of type String. For exam-
                                      ple:
                                          "S": "Hello"

                                   N -> (string)
                                      An attribute of type Number.  For  exam-
                                      ple:
                                          "N": "123.45"

                                      Numbers  are  sent across the network to
                                      DynamoDB as strings, to maximize compat-
                                      ibility  across languages and libraries.
                                      However, DynamoDB treats them as  number
                                      type  attributes for mathematical opera-
                                      tions.

                                   B -> (blob)
                                      An attribute of type Binary.  For  exam-
                                      ple:
                                          "B":                          "dGhp-
                                          cyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                                   SS -> (list)
                                      An attribute of  type  String  Set.  For
                                      example:
                                          "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                      (string)

                                   NS -> (list)
                                      An  attribute  of  type  Number Set. For
                                      example:
                                          "NS": ["42.2", "-19", "7.5", "3.14"]

                                      Numbers  are  sent across the network to
                                      DynamoDB as strings, to maximize compat-
                                      ibility  across languages and libraries.
                                      However, DynamoDB treats them as  number
                                      type  attributes for mathematical opera-
                                      tions.

                                      (string)

                                   BS -> (list)
                                      An attribute of  type  Binary  Set.  For
                                      example:
                                          "BS":    ["U3Vubnk=",    "UmFpbnk=",
                                          "U25vd3k="]

                                      (blob)

                                   M -> (map)
                                      An attribute of type Map. For example:
                                          "M": {"Name": {"S":  "Joe"},  "Age":
                                          {"N": "35"}}

                                      key -> (string)

                                      ( ... recursive ... )

                                   L -> (list)
                                      An attribute of type List. For example:
                                          "L":  [  {"S":  "Cookies"}  ,  {"S":
                                          "Coffee"}, {"N", "3.14159"}]

                                      ( ... recursive ... )

                                   NULL -> (boolean)
                                      An attribute of type Null. For example:
                                          "NULL": true

                                   BOOL -> (boolean)
                                      An attribute of type Boolean. For  exam-
                                      ple:
                                          "BOOL": true

                            L -> (list)
                               An attribute of type List. For example:
                                   "L":  [ {"S": "Cookies"} , {"S": "Coffee"},
                                   {"N", "3.14159"}]

                               (structure)
                                   Represents the data for an attribute.

                                   Each attribute  value  is  described  as  a
                                   name-value pair. The name is the data type,
                                   and the value is the data itself.

                                   For more information, see Data Types in the
                                   Amazon DynamoDB Developer Guide .

                                   S -> (string)
                                      An  attribute  of type String. For exam-
                                      ple:
                                          "S": "Hello"

                                   N -> (string)
                                      An attribute of type Number.  For  exam-
                                      ple:
                                          "N": "123.45"

                                      Numbers  are  sent across the network to
                                      DynamoDB as strings, to maximize compat-
                                      ibility  across languages and libraries.
                                      However, DynamoDB treats them as  number
                                      type  attributes for mathematical opera-
                                      tions.

                                   B -> (blob)
                                      An attribute of type Binary.  For  exam-
                                      ple:
                                          "B":                          "dGhp-
                                          cyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                                   SS -> (list)
                                      An attribute of  type  String  Set.  For
                                      example:
                                          "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                      (string)

                                   NS -> (list)
                                      An  attribute  of  type  Number Set. For
                                      example:
                                          "NS": ["42.2", "-19", "7.5", "3.14"]

                                      Numbers  are  sent across the network to
                                      DynamoDB as strings, to maximize compat-
                                      ibility  across languages and libraries.
                                      However, DynamoDB treats them as  number
                                      type  attributes for mathematical opera-
                                      tions.

                                      (string)

                                   BS -> (list)
                                      An attribute of  type  Binary  Set.  For
                                      example:
                                          "BS":    ["U3Vubnk=",    "UmFpbnk=",
                                          "U25vd3k="]

                                      (blob)

                                   M -> (map)
                                      An attribute of type Map. For example:
                                          "M": {"Name": {"S":  "Joe"},  "Age":
                                          {"N": "35"}}

                                      key -> (string)

                                      ( ... recursive ... )

                                   L -> (list)
                                      An attribute of type List. For example:
                                          "L":  [  {"S":  "Cookies"}  ,  {"S":
                                          "Coffee"}, {"N", "3.14159"}]

                                      ( ... recursive ... )

                                   NULL -> (boolean)
                                      An attribute of type Null. For example:
                                          "NULL": true

                                   BOOL -> (boolean)
                                      An attribute of type Boolean. For  exam-
                                      ple:
                                          "BOOL": true

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

       JSON Syntax:

          {"string": [
                {
                  "PutRequest": {
                    "Item": {"string": {
                          "S": "string",
                          "N": "string",
                          "B": blob,
                          "SS": ["string", ...],
                          "NS": ["string", ...],
                          "BS": [blob, ...],
                          "M": {"string": {
                                "S": "string",
                                "N": "string",
                                "B": blob,
                                "SS": ["string", ...],
                                "NS": ["string", ...],
                                "BS": [blob, ...],
                                "M": {"string": { ... recursive ... }
                                  ...},
                                "L": [
                                  { ... recursive ... }
                                  ...
                                ],
                                "NULL": true|false,
                                "BOOL": true|false
                              }
                            ...},
                          "L": [
                            {
                              "S": "string",
                              "N": "string",
                              "B": blob,
                              "SS": ["string", ...],
                              "NS": ["string", ...],
                              "BS": [blob, ...],
                              "M": {"string": { ... recursive ... }
                                ...},
                              "L": [
                                { ... recursive ... }
                                ...
                              ],
                              "NULL": true|false,
                              "BOOL": true|false
                            }
                            ...
                          ],
                          "NULL": true|false,
                          "BOOL": true|false
                        }
                      ...}
                  },
                  "DeleteRequest": {
                    "Key": {"string": {
                          "S": "string",
                          "N": "string",
                          "B": blob,
                          "SS": ["string", ...],
                          "NS": ["string", ...],
                          "BS": [blob, ...],
                          "M": {"string": {
                                "S": "string",
                                "N": "string",
                                "B": blob,
                                "SS": ["string", ...],
                                "NS": ["string", ...],
                                "BS": [blob, ...],
                                "M": {"string": { ... recursive ... }
                                  ...},
                                "L": [
                                  { ... recursive ... }
                                  ...
                                ],
                                "NULL": true|false,
                                "BOOL": true|false
                              }
                            ...},
                          "L": [
                            {
                              "S": "string",
                              "N": "string",
                              "B": blob,
                              "SS": ["string", ...],
                              "NS": ["string", ...],
                              "BS": [blob, ...],
                              "M": {"string": { ... recursive ... }
                                ...},
                              "L": [
                                { ... recursive ... }
                                ...
                              ],
                              "NULL": true|false,
                              "BOOL": true|false
                            }
                            ...
                          ],
                          "NULL": true|false,
                          "BOOL": true|false
                        }
                      ...}
                  }
                }
                ...
              ]
            ...}

       --return-consumed-capacity (string)
          Determines the level of detail about either provisioned or on-demand
          throughput consumption that is returned in the response:

          o INDEXES - The response includes the aggregate ConsumedCapacity for
            the  operation,  together with ConsumedCapacity for each table and
            secondary index that was accessed. Note that some operations, such
            as GetItem and BatchGetItem , do not access any indexes at all. In
            these cases, specifying INDEXES will only return  ConsumedCapacity
            information for table(s).

          o TOTAL  - The response includes only the aggregate ConsumedCapacity
            for the operation.

          o NONE - No ConsumedCapacity details are included in the response.

          Possible values:

          o INDEXES

          o TOTAL

          o NONE

       --return-item-collection-metrics (string)
          Determines whether item collection metrics are returned. If  set  to
          SIZE  ,  the response includes statistics about item collections, if
          any, that were modified during the operation  are  returned  in  the
          response.  If set to NONE (the default), no statistics are returned.

          Possible values:

          o SIZE

          o NONE

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To add multiple items to a table

       The following batch-write-item example adds three new items to the Mus-
       icCollection  table  using  a  batch of three PutItem requests. It also
       requests information about the number of write capacity units  consumed
       by the operation and any item collections modified by the operation.

          aws dynamodb batch-write-item \
              --request-items file://request-items.json \
              --return-consumed-capacity INDEXES \
              --return-item-collection-metrics SIZE

       Contents of request-items.json:

          {
              "MusicCollection": [
                  {
                      "PutRequest": {
                          "Item": {
                              "Artist": {"S": "No One You Know"},
                              "SongTitle": {"S": "Call Me Today"},
                              "AlbumTitle": {"S": "Somewhat Famous"}
                          }
                      }
                  },
                  {
                      "PutRequest": {
                          "Item": {
                              "Artist": {"S": "Acme Band"},
                              "SongTitle": {"S": "Happy Day"},
                              "AlbumTitle": {"S": "Songs About Life"}
                          }
                      }
                  },
                  {
                      "PutRequest": {
                          "Item": {
                              "Artist": {"S": "No One You Know"},
                              "SongTitle": {"S": "Scared of My Shadow"},
                              "AlbumTitle": {"S": "Blue Sky Blues"}
                          }
                      }
                  }
              ]
          }

       Output:

          {
              "UnprocessedItems": {},
              "ItemCollectionMetrics": {
                  "MusicCollection": [
                      {
                          "ItemCollectionKey": {
                              "Artist": {
                                  "S": "No One You Know"
                              }
                          },
                          "SizeEstimateRangeGB": [
                              0.0,
                              1.0
                          ]
                      },
                      {
                          "ItemCollectionKey": {
                              "Artist": {
                                  "S": "Acme Band"
                              }
                          },
                          "SizeEstimateRangeGB": [
                              0.0,
                              1.0
                          ]
                      }
                  ]
              },
              "ConsumedCapacity": [
                  {
                      "TableName": "MusicCollection",
                      "CapacityUnits": 6.0,
                      "Table": {
                          "CapacityUnits": 3.0
                      },
                      "LocalSecondaryIndexes": {
                          "AlbumTitleIndex": {
                              "CapacityUnits": 3.0
                          }
                      }
                  }
              ]
          }

       For  more  information,  see  Batch  Operations  in the Amazon DynamoDB
       Developer Guide.

OUTPUT
       UnprocessedItems -> (map)
          A map of tables and requests against those tables that were not pro-
          cessed.   The   UnprocessedItems  value  is  in  the  same  form  as
          RequestItems , so you can provide this value directly  to  a  subse-
          quent BatchGetItem operation. For more information, see RequestItems
          in the Request Parameters section.

          Each UnprocessedItems entry consists of a table name and,  for  that
          table,  a list of operations to perform (DeleteRequest or PutRequest
          ).

          o DeleteRequest - Perform a DeleteItem operation  on  the  specified
            item. The item to be deleted is identified by a Key subelement:

            o Key  - A map of primary key attribute values that uniquely iden-
              tify the item. Each entry in this map consists of  an  attribute
              name and an attribute value.

          o PutRequest  -  Perform  a PutItem operation on the specified item.
            The item to be put is identified by an Item subelement:

            o Item - A map of attributes and their values. Each entry in  this
              map  consists  of  an  attribute  name  and  an attribute value.
              Attribute values must  not  be  null;  string  and  binary  type
              attributes  must  have  lengths  greater than zero; and set type
              attributes must not be empty. Requests that contain empty values
              will  be  rejected  with a ValidationException exception. If you
              specify any attributes that are part of an index key,  then  the
              data  types  for those attributes must match those of the schema
              in the table's attribute definition.

          If there are no unprocessed items remaining, the  response  contains
          an empty UnprocessedItems map.

          key -> (string)

          value -> (list)
              (structure)
                 Represents  an  operation  to  perform - either DeleteItem or
                 PutItem . You can only request one of these  operations,  not
                 both,  in  a  single WriteRequest . If you do need to perform
                 both of these operations, you need to  provide  two  separate
                 WriteRequest objects.

                 PutRequest -> (structure)
                     A request to perform a PutItem operation.

                     Item -> (map)
                        A  map  of  attribute name to attribute values, repre-
                        senting the primary key of an item to be processed  by
                        PutItem  .  All  of the table's primary key attributes
                        must be specified, and their  data  types  must  match
                        those of the table's key schema. If any attributes are
                        present in the item that are  part  of  an  index  key
                        schema for the table, their types must match the index
                        key schema.

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each attribute value is described as a  name-value
                            pair.  The name is the data type, and the value is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M": {"Name": {"S":  "Joe"},  "Age":  {"N":
                                   "35"}}

                               key -> (string)

                               value -> (structure)
                                   Represents the data for an attribute.

                                   Each  attribute  value  is  described  as a
                                   name-value pair. The name is the data type,
                                   and the value is the data itself.

                                   For more information, see Data Types in the
                                   Amazon DynamoDB Developer Guide .

                                   S -> (string)
                                      An attribute of type String.  For  exam-
                                      ple:
                                          "S": "Hello"

                                   N -> (string)
                                      An  attribute  of type Number. For exam-
                                      ple:
                                          "N": "123.45"

                                      Numbers are sent across the  network  to
                                      DynamoDB as strings, to maximize compat-
                                      ibility across languages and  libraries.
                                      However,  DynamoDB treats them as number
                                      type attributes for mathematical  opera-
                                      tions.

                                   B -> (blob)
                                      An  attribute  of type Binary. For exam-
                                      ple:
                                          "B":                          "dGhp-
                                          cyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                                   SS -> (list)
                                      An  attribute  of  type  String Set. For
                                      example:
                                          "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                      (string)

                                   NS -> (list)
                                      An attribute of  type  Number  Set.  For
                                      example:
                                          "NS": ["42.2", "-19", "7.5", "3.14"]

                                      Numbers are sent across the  network  to
                                      DynamoDB as strings, to maximize compat-
                                      ibility across languages and  libraries.
                                      However,  DynamoDB treats them as number
                                      type attributes for mathematical  opera-
                                      tions.

                                      (string)

                                   BS -> (list)
                                      An  attribute  of  type  Binary Set. For
                                      example:
                                          "BS":    ["U3Vubnk=",    "UmFpbnk=",
                                          "U25vd3k="]

                                      (blob)

                                   M -> (map)
                                      An attribute of type Map. For example:
                                          "M":  {"Name":  {"S": "Joe"}, "Age":
                                          {"N": "35"}}

                                      key -> (string)

                                      ( ... recursive ... )

                                   L -> (list)
                                      An attribute of type List. For example:
                                          "L":  [  {"S":  "Cookies"}  ,  {"S":
                                          "Coffee"}, {"N", "3.14159"}]

                                      ( ... recursive ... )

                                   NULL -> (boolean)
                                      An attribute of type Null. For example:
                                          "NULL": true

                                   BOOL -> (boolean)
                                      An  attribute of type Boolean. For exam-
                                      ple:
                                          "BOOL": true

                            L -> (list)
                               An attribute of type List. For example:
                                   "L": [ {"S": "Cookies"} , {"S":  "Coffee"},
                                   {"N", "3.14159"}]

                               (structure)
                                   Represents the data for an attribute.

                                   Each  attribute  value  is  described  as a
                                   name-value pair. The name is the data type,
                                   and the value is the data itself.

                                   For more information, see Data Types in the
                                   Amazon DynamoDB Developer Guide .

                                   S -> (string)
                                      An attribute of type String.  For  exam-
                                      ple:
                                          "S": "Hello"

                                   N -> (string)
                                      An  attribute  of type Number. For exam-
                                      ple:
                                          "N": "123.45"

                                      Numbers are sent across the  network  to
                                      DynamoDB as strings, to maximize compat-
                                      ibility across languages and  libraries.
                                      However,  DynamoDB treats them as number
                                      type attributes for mathematical  opera-
                                      tions.

                                   B -> (blob)
                                      An  attribute  of type Binary. For exam-
                                      ple:
                                          "B":                          "dGhp-
                                          cyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                                   SS -> (list)
                                      An  attribute  of  type  String Set. For
                                      example:
                                          "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                      (string)

                                   NS -> (list)
                                      An attribute of  type  Number  Set.  For
                                      example:
                                          "NS": ["42.2", "-19", "7.5", "3.14"]

                                      Numbers are sent across the  network  to
                                      DynamoDB as strings, to maximize compat-
                                      ibility across languages and  libraries.
                                      However,  DynamoDB treats them as number
                                      type attributes for mathematical  opera-
                                      tions.

                                      (string)

                                   BS -> (list)
                                      An  attribute  of  type  Binary Set. For
                                      example:
                                          "BS":    ["U3Vubnk=",    "UmFpbnk=",
                                          "U25vd3k="]

                                      (blob)

                                   M -> (map)
                                      An attribute of type Map. For example:
                                          "M":  {"Name":  {"S": "Joe"}, "Age":
                                          {"N": "35"}}

                                      key -> (string)

                                      ( ... recursive ... )

                                   L -> (list)
                                      An attribute of type List. For example:
                                          "L":  [  {"S":  "Cookies"}  ,  {"S":
                                          "Coffee"}, {"N", "3.14159"}]

                                      ( ... recursive ... )

                                   NULL -> (boolean)
                                      An attribute of type Null. For example:
                                          "NULL": true

                                   BOOL -> (boolean)
                                      An  attribute of type Boolean. For exam-
                                      ple:
                                          "BOOL": true

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                 DeleteRequest -> (structure)
                     A request to perform a DeleteItem operation.

                     Key -> (map)
                        A map of attribute name to  attribute  values,  repre-
                        senting  the primary key of the item to delete. All of
                        the table's primary key attributes must be  specified,
                        and  their  data types must match those of the table's
                        key schema.

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each attribute value is described as a  name-value
                            pair.  The name is the data type, and the value is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M": {"Name": {"S":  "Joe"},  "Age":  {"N":
                                   "35"}}

                               key -> (string)

                               value -> (structure)
                                   Represents the data for an attribute.

                                   Each  attribute  value  is  described  as a
                                   name-value pair. The name is the data type,
                                   and the value is the data itself.

                                   For more information, see Data Types in the
                                   Amazon DynamoDB Developer Guide .

                                   S -> (string)
                                      An attribute of type String.  For  exam-
                                      ple:
                                          "S": "Hello"

                                   N -> (string)
                                      An  attribute  of type Number. For exam-
                                      ple:
                                          "N": "123.45"

                                      Numbers are sent across the  network  to
                                      DynamoDB as strings, to maximize compat-
                                      ibility across languages and  libraries.
                                      However,  DynamoDB treats them as number
                                      type attributes for mathematical  opera-
                                      tions.

                                   B -> (blob)
                                      An  attribute  of type Binary. For exam-
                                      ple:
                                          "B":                          "dGhp-
                                          cyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                                   SS -> (list)
                                      An  attribute  of  type  String Set. For
                                      example:
                                          "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                      (string)

                                   NS -> (list)
                                      An attribute of  type  Number  Set.  For
                                      example:
                                          "NS": ["42.2", "-19", "7.5", "3.14"]

                                      Numbers are sent across the  network  to
                                      DynamoDB as strings, to maximize compat-
                                      ibility across languages and  libraries.
                                      However,  DynamoDB treats them as number
                                      type attributes for mathematical  opera-
                                      tions.

                                      (string)

                                   BS -> (list)
                                      An  attribute  of  type  Binary Set. For
                                      example:
                                          "BS":    ["U3Vubnk=",    "UmFpbnk=",
                                          "U25vd3k="]

                                      (blob)

                                   M -> (map)
                                      An attribute of type Map. For example:
                                          "M":  {"Name":  {"S": "Joe"}, "Age":
                                          {"N": "35"}}

                                      key -> (string)

                                      ( ... recursive ... )

                                   L -> (list)
                                      An attribute of type List. For example:
                                          "L":  [  {"S":  "Cookies"}  ,  {"S":
                                          "Coffee"}, {"N", "3.14159"}]

                                      ( ... recursive ... )

                                   NULL -> (boolean)
                                      An attribute of type Null. For example:
                                          "NULL": true

                                   BOOL -> (boolean)
                                      An  attribute of type Boolean. For exam-
                                      ple:
                                          "BOOL": true

                            L -> (list)
                               An attribute of type List. For example:
                                   "L": [ {"S": "Cookies"} , {"S":  "Coffee"},
                                   {"N", "3.14159"}]

                               (structure)
                                   Represents the data for an attribute.

                                   Each  attribute  value  is  described  as a
                                   name-value pair. The name is the data type,
                                   and the value is the data itself.

                                   For more information, see Data Types in the
                                   Amazon DynamoDB Developer Guide .

                                   S -> (string)
                                      An attribute of type String.  For  exam-
                                      ple:
                                          "S": "Hello"

                                   N -> (string)
                                      An  attribute  of type Number. For exam-
                                      ple:
                                          "N": "123.45"

                                      Numbers are sent across the  network  to
                                      DynamoDB as strings, to maximize compat-
                                      ibility across languages and  libraries.
                                      However,  DynamoDB treats them as number
                                      type attributes for mathematical  opera-
                                      tions.

                                   B -> (blob)
                                      An  attribute  of type Binary. For exam-
                                      ple:
                                          "B":                          "dGhp-
                                          cyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                                   SS -> (list)
                                      An  attribute  of  type  String Set. For
                                      example:
                                          "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                      (string)

                                   NS -> (list)
                                      An attribute of  type  Number  Set.  For
                                      example:
                                          "NS": ["42.2", "-19", "7.5", "3.14"]

                                      Numbers are sent across the  network  to
                                      DynamoDB as strings, to maximize compat-
                                      ibility across languages and  libraries.
                                      However,  DynamoDB treats them as number
                                      type attributes for mathematical  opera-
                                      tions.

                                      (string)

                                   BS -> (list)
                                      An  attribute  of  type  Binary Set. For
                                      example:
                                          "BS":    ["U3Vubnk=",    "UmFpbnk=",
                                          "U25vd3k="]

                                      (blob)

                                   M -> (map)
                                      An attribute of type Map. For example:
                                          "M":  {"Name":  {"S": "Joe"}, "Age":
                                          {"N": "35"}}

                                      key -> (string)

                                      ( ... recursive ... )

                                   L -> (list)
                                      An attribute of type List. For example:
                                          "L":  [  {"S":  "Cookies"}  ,  {"S":
                                          "Coffee"}, {"N", "3.14159"}]

                                      ( ... recursive ... )

                                   NULL -> (boolean)
                                      An attribute of type Null. For example:
                                          "NULL": true

                                   BOOL -> (boolean)
                                      An  attribute of type Boolean. For exam-
                                      ple:
                                          "BOOL": true

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

       ItemCollectionMetrics -> (map)
          A list of tables that were processed by BatchWriteItem and, for each
          table,  information about any item collections that were affected by
          individual DeleteItem or PutItem operations.

          Each entry consists of the following subelements:

          o ItemCollectionKey - The partition key value of  the  item  collec-
            tion. This is the same as the partition key value of the item.

          o SizeEstimateRangeGB   -  An  estimate  of  item  collection  size,
            expressed in GB. This is a two-element array  containing  a  lower
            bound  and  an upper bound for the estimate. The estimate includes
            the size of all the items in the  table,  plus  the  size  of  all
            attributes  projected  into  all of the local secondary indexes on
            the table. Use this estimate to measure whether a local  secondary
            index  is  approaching  its size limit. The estimate is subject to
            change over time; therefore, do not rely on the precision or accu-
            racy of the estimate.

          key -> (string)

          value -> (list)
              (structure)
                 Information   about  item  collections,  if  any,  that  were
                 affected by  the  operation.  ItemCollectionMetrics  is  only
                 returned  if  the request asked for it. If the table does not
                 have any local secondary indexes,  this  information  is  not
                 returned in the response.

                 ItemCollectionKey -> (map)
                     The  partition  key  value  of  the item collection. This
                     value is the same as the partition key value of the item.

                     key -> (string)

                     value -> (structure)
                        Represents the data for an attribute.

                        Each  attribute  value  is  described  as a name-value
                        pair. The name is the data type, and the value is  the
                        data itself.

                        For  more  information,  see  Data Types in the Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            value -> (structure)
                               Represents the data for an attribute.

                               Each   attribute   value   is  described  as  a
                               name-value pair. The name is the data type, and
                               the value is the data itself.

                               For  more  information,  see  Data Types in the
                               Amazon DynamoDB Developer Guide .

                               S -> (string)
                                   An attribute of type String. For example:
                                      "S": "Hello"

                               N -> (string)
                                   An attribute of type Number. For example:
                                      "N": "123.45"

                                   Numbers are  sent  across  the  network  to
                                   DynamoDB  as  strings, to maximize compati-
                                   bility across languages and libraries. How-
                                   ever,  DynamoDB  treats them as number type
                                   attributes for mathematical operations.

                               B -> (blob)
                                   An attribute of type Binary. For example:
                                      "B":   "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmN-
                                      vZGVk"

                               SS -> (list)
                                   An  attribute of type String Set. For exam-
                                   ple:
                                      "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                   (string)

                               NS -> (list)
                                   An attribute of type Number Set. For  exam-
                                   ple:
                                      "NS": ["42.2", "-19", "7.5", "3.14"]

                                   Numbers  are  sent  across  the  network to
                                   DynamoDB as strings, to  maximize  compati-
                                   bility across languages and libraries. How-
                                   ever, DynamoDB treats them as  number  type
                                   attributes for mathematical operations.

                                   (string)

                               BS -> (list)
                                   An  attribute of type Binary Set. For exam-
                                   ple:
                                      "BS":      ["U3Vubnk=",      "UmFpbnk=",
                                      "U25vd3k="]

                                   (blob)

                               M -> (map)
                                   An attribute of type Map. For example:
                                      "M": {"Name": {"S": "Joe"}, "Age": {"N":
                                      "35"}}

                                   key -> (string)

                                   ( ... recursive ... )

                               L -> (list)
                                   An attribute of type List. For example:
                                      "L": [ {"S": "Cookies"}  ,  {"S":  "Cof-
                                      fee"}, {"N", "3.14159"}]

                                   ( ... recursive ... )

                               NULL -> (boolean)
                                   An attribute of type Null. For example:
                                      "NULL": true

                               BOOL -> (boolean)
                                   An attribute of type Boolean. For example:
                                      "BOOL": true

                        L -> (list)
                            An attribute of type List. For example:
                               "L":  [  {"S":  "Cookies"}  ,  {"S": "Coffee"},
                               {"N", "3.14159"}]

                            (structure)
                               Represents the data for an attribute.

                               Each  attribute  value  is   described   as   a
                               name-value pair. The name is the data type, and
                               the value is the data itself.

                               For more information, see  Data  Types  in  the
                               Amazon DynamoDB Developer Guide .

                               S -> (string)
                                   An attribute of type String. For example:
                                      "S": "Hello"

                               N -> (string)
                                   An attribute of type Number. For example:
                                      "N": "123.45"

                                   Numbers  are  sent  across  the  network to
                                   DynamoDB as strings, to  maximize  compati-
                                   bility across languages and libraries. How-
                                   ever, DynamoDB treats them as  number  type
                                   attributes for mathematical operations.

                               B -> (blob)
                                   An attribute of type Binary. For example:
                                      "B":   "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmN-
                                      vZGVk"

                               SS -> (list)
                                   An attribute of type String Set. For  exam-
                                   ple:
                                      "SS": ["Giraffe", "Hippo" ,"Zebra"]

                                   (string)

                               NS -> (list)
                                   An  attribute of type Number Set. For exam-
                                   ple:
                                      "NS": ["42.2", "-19", "7.5", "3.14"]

                                   Numbers are  sent  across  the  network  to
                                   DynamoDB  as  strings, to maximize compati-
                                   bility across languages and libraries. How-
                                   ever,  DynamoDB  treats them as number type
                                   attributes for mathematical operations.

                                   (string)

                               BS -> (list)
                                   An attribute of type Binary Set. For  exam-
                                   ple:
                                      "BS":      ["U3Vubnk=",      "UmFpbnk=",
                                      "U25vd3k="]

                                   (blob)

                               M -> (map)
                                   An attribute of type Map. For example:
                                      "M": {"Name": {"S": "Joe"}, "Age": {"N":
                                      "35"}}

                                   key -> (string)

                                   ( ... recursive ... )

                               L -> (list)
                                   An attribute of type List. For example:
                                      "L":  [  {"S":  "Cookies"} , {"S": "Cof-
                                      fee"}, {"N", "3.14159"}]

                                   ( ... recursive ... )

                               NULL -> (boolean)
                                   An attribute of type Null. For example:
                                      "NULL": true

                               BOOL -> (boolean)
                                   An attribute of type Boolean. For example:
                                      "BOOL": true

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 SizeEstimateRangeGB -> (list)
                     An estimate of item collection size, in  gigabytes.  This
                     value is a two-element array containing a lower bound and
                     an upper bound for the estimate.  The  estimate  includes
                     the  size of all the items in the table, plus the size of
                     all attributes projected into all of the local  secondary
                     indexes  on  that  table.  Use  this  estimate to measure
                     whether a local secondary index is approaching  its  size
                     limit.

                     The  estimate  is subject to change over time; therefore,
                     do not rely on the precision or accuracy of the estimate.

                     (double)

       ConsumedCapacity -> (list)
          The  capacity units consumed by the entire BatchWriteItem operation.

          Each element consists of:

          o TableName - The table that consumed the provisioned throughput.

          o CapacityUnits - The total number of capacity units consumed.

          (structure)
              The capacity units consumed by an operation. The  data  returned
              includes  the  total provisioned throughput consumed, along with
              statistics for the table and any indexes involved in the  opera-
              tion. ConsumedCapacity is only returned if the request asked for
              it. For more information, see Provisioned Throughput in the Ama-
              zon DynamoDB Developer Guide .

              TableName -> (string)
                 The name of the table that was affected by the operation.

              CapacityUnits -> (double)
                 The total number of capacity units consumed by the operation.

              ReadCapacityUnits -> (double)
                 The total number of read capacity units consumed by the oper-
                 ation.

              WriteCapacityUnits -> (double)
                 The  total  number  of  write  capacity units consumed by the
                 operation.

              Table -> (structure)
                 The amount of throughput consumed on the  table  affected  by
                 the operation.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The total number of write capacity units  consumed  on  a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

              LocalSecondaryIndexes -> (map)
                 The  amount  of  throughput  consumed  on  each  local  index
                 affected by the operation.

                 key -> (string)

                 value -> (structure)
                     Represents  the amount of provisioned throughput capacity
                     consumed on a table or an index.

                     ReadCapacityUnits -> (double)
                        The total number of read capacity units consumed on  a
                        table or an index.

                     WriteCapacityUnits -> (double)
                        The total number of write capacity units consumed on a
                        table or an index.

                     CapacityUnits -> (double)
                        The total number of capacity units consumed on a table
                        or an index.

              GlobalSecondaryIndexes -> (map)
                 The  amount  of  throughput  consumed  on  each  global index
                 affected by the operation.

                 key -> (string)

                 value -> (structure)
                     Represents the amount of provisioned throughput  capacity
                     consumed on a table or an index.

                     ReadCapacityUnits -> (double)
                        The  total number of read capacity units consumed on a
                        table or an index.

                     WriteCapacityUnits -> (double)
                        The total number of write capacity units consumed on a
                        table or an index.

                     CapacityUnits -> (double)
                        The total number of capacity units consumed on a table
                        or an index.



                                                            BATCH-WRITE-ITEM()
