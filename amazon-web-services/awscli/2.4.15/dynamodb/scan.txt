SCAN()                                                                  SCAN()



NAME
       scan -

DESCRIPTION
       The  Scan  operation  returns  one or more items and item attributes by
       accessing every item in a table or a secondary index. To have  DynamoDB
       return fewer items, you can provide a FilterExpression operation.

       If  the  total number of scanned items exceeds the maximum dataset size
       limit of 1 MB, the scan stops and results are returned to the user as a
       LastEvaluatedKey  value to continue the scan in a subsequent operation.
       The results also include the number of items  exceeding  the  limit.  A
       scan can result in no table data meeting the filter criteria.

       A single Scan operation reads up to the maximum number of items set (if
       using the Limit parameter) or a maximum of 1 MB of data and then  apply
       any filtering to the results using FilterExpression . If LastEvaluated-
       Key is present in the response, you need to paginate  the  result  set.
       For more information, see Paginating the Results in the Amazon DynamoDB
       Developer Guide .
          Scan operations proceed sequentially; however,  for  faster  perfor-
          mance  on a large table or secondary index, applications can request
          a parallel Scan operation by providing the Segment and TotalSegments
          parameters.  For  more  information, see Parallel Scan in the Amazon
          DynamoDB Developer Guide .

          Scan uses eventually consistent reads when accessing the data  in  a
          table;  therefore,  the  result set might not include the changes to
          data in the table immediately before the  operation  began.  If  you
          need  a  consistent  copy  of the data, as of the time that the Scan
          begins, you can set the ConsistentRead parameter to true .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

       scan is a paginated operation. Multiple API  calls  may  be  issued  in
       order to retrieve the entire data set of results. You can disable pagi-
       nation by providing the --no-paginate argument.   When  using  --output
       text  and  the  --query  argument  on a paginated response, the --query
       argument must extract data from the  results  of  the  following  query
       expressions: Items, Count, ScannedCount

SYNOPSIS
            scan
          --table-name <value>
          [--index-name <value>]
          [--attributes-to-get <value>]
          [--select <value>]
          [--scan-filter <value>]
          [--conditional-operator <value>]
          [--return-consumed-capacity <value>]
          [--total-segments <value>]
          [--segment <value>]
          [--projection-expression <value>]
          [--filter-expression <value>]
          [--expression-attribute-names <value>]
          [--expression-attribute-values <value>]
          [--consistent-read | --no-consistent-read]
          [--cli-input-json | --cli-input-yaml]
          [--starting-token <value>]
          [--page-size <value>]
          [--max-items <value>]
          [--generate-cli-skeleton <value>]

OPTIONS
       --table-name (string)
          The  name  of  the  table containing the requested items; or, if you
          provide IndexName , the name  of  the  table  to  which  that  index
          belongs.

       --index-name (string)
          The  name  of a secondary index to scan. This index can be any local
          secondary index or global secondary index. Note that if you use  the
          IndexName parameter, you must also provide TableName .

       --attributes-to-get (list)
          This  is  a  legacy parameter. Use ProjectionExpression instead. For
          more information, see AttributesToGet in the Amazon DynamoDB  Devel-
          oper Guide .

          (string)

       Syntax:

          "string" "string" ...

       --select (string)
          The  attributes  to  be returned in the result. You can retrieve all
          item attributes, specific item attributes,  the  count  of  matching
          items,  or  in  the  case of an index, some or all of the attributes
          projected into the index.

          o ALL_ATTRIBUTES - Returns all of the item attributes from the spec-
            ified  table  or index. If you query a local secondary index, then
            for each matching item in the index, DynamoDB fetches  the  entire
            item  from the parent table. If the index is configured to project
            all item attributes, then all of the data can be obtained from the
            local secondary index, and no fetching is required.

          o ALL_PROJECTED_ATTRIBUTES  -  Allowed  only when querying an index.
            Retrieves all attributes that have been projected into the  index.
            If  the index is configured to project all attributes, this return
            value is equivalent to specifying ALL_ATTRIBUTES .

          o COUNT - Returns the number of  matching  items,  rather  than  the
            matching items themselves.

          o SPECIFIC_ATTRIBUTES  -  Returns  only  the  attributes  listed  in
            AttributesToGet . This return value is  equivalent  to  specifying
            AttributesToGet  without  specifying any value for Select . If you
            query or scan a local secondary index and request only  attributes
            that  are  projected into that index, the operation reads only the
            index and not the table. If any of the  requested  attributes  are
            not  projected  into  the  local secondary index, DynamoDB fetches
            each of these attributes from the parent table. This extra  fetch-
            ing incurs additional throughput cost and latency. If you query or
            scan a global secondary index, you  can  only  request  attributes
            that  are projected into the index. Global secondary index queries
            cannot fetch attributes from the parent table.

          If  neither  Select  nor  AttributesToGet  are  specified,  DynamoDB
          defaults  to  ALL_ATTRIBUTES  when  accessing  a table, and ALL_PRO-
          JECTED_ATTRIBUTES when accessing  an  index.  You  cannot  use  both
          Select  and AttributesToGet together in a single request, unless the
          value for Select is SPECIFIC_ATTRIBUTES . (This usage is  equivalent
          to specifying AttributesToGet without any value for Select .)

          NOTE:
              If  you  use  the ProjectionExpression parameter, then the value
              for Select can only be SPECIFIC_ATTRIBUTES . Any other value for
              Select will return an error.

          Possible values:

          o ALL_ATTRIBUTES

          o ALL_PROJECTED_ATTRIBUTES

          o SPECIFIC_ATTRIBUTES

          o COUNT

       --scan-filter (map)
          This  is  a legacy parameter. Use FilterExpression instead. For more
          information, see ScanFilter in the Amazon DynamoDB Developer Guide .

          key -> (string)

          value -> (structure)
              Represents the selection criteria for a Query or Scan operation:

              o For a Query operation, Condition is used  for  specifying  the
                KeyConditions  to  use  when querying a table or an index. For
                KeyConditions , only the following  comparison  operators  are
                supported:   EQ  |  LE  | LT | GE | GT | BEGINS_WITH | BETWEEN
                Condition is also used in a QueryFilter , which evaluates  the
                query results and returns only the desired values.

              o For  a  Scan  operation,  Condition  is used in a ScanFilter ,
                which evaluates the scan results and returns only the  desired
                values.

              AttributeValueList -> (list)
                 One   or   more  values  to  evaluate  against  the  supplied
                 attribute. The number of values in the list  depends  on  the
                 ComparisonOperator being used.

                 For type Number, value comparisons are numeric.

                 String  value  comparisons  for greater than, equals, or less
                 than are based on ASCII character code values. For example, a
                 is  greater  than A , and a is greater than B . For a list of
                 code                       values,                        see
                 http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
                 .

                 For Binary, DynamoDB treats each byte of the binary  data  as
                 unsigned when it compares binary values.

                 (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        value -> (structure)
                            Represents the data for an attribute.

                            Each attribute value is described as a  name-value
                            pair.  The name is the data type, and the value is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M": {"Name": {"S":  "Joe"},  "Age":  {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L":  [ {"S": "Cookies"} , {"S": "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        (structure)
                            Represents the data for an attribute.

                            Each  attribute value is described as a name-value
                            pair. The name is the data type, and the value  is
                            the data itself.

                            For more information, see Data Types in the Amazon
                            DynamoDB Developer Guide .

                            S -> (string)
                               An attribute of type String. For example:
                                   "S": "Hello"

                            N -> (string)
                               An attribute of type Number. For example:
                                   "N": "123.45"

                               Numbers are sent across the network to DynamoDB
                               as  strings,  to  maximize compatibility across
                               languages  and  libraries.  However,   DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                            B -> (blob)
                               An attribute of type Binary. For example:
                                   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                            SS -> (list)
                               An attribute of type String Set. For example:
                                   "SS": ["Giraffe", "Hippo" ,"Zebra"]

                               (string)

                            NS -> (list)
                               An attribute of type Number Set. For example:
                                   "NS": ["42.2", "-19", "7.5", "3.14"]

                               Numbers are sent across the network to DynamoDB
                               as strings, to  maximize  compatibility  across
                               languages   and  libraries.  However,  DynamoDB
                               treats them as number type attributes for math-
                               ematical operations.

                               (string)

                            BS -> (list)
                               An attribute of type Binary Set. For example:
                                   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                               (blob)

                            M -> (map)
                               An attribute of type Map. For example:
                                   "M":  {"Name":  {"S":  "Joe"}, "Age": {"N":
                                   "35"}}

                               key -> (string)

                               ( ... recursive ... )

                            L -> (list)
                               An attribute of type List. For example:
                                   "L": [ {"S": "Cookies"} , {"S":  "Coffee"},
                                   {"N", "3.14159"}]

                               ( ... recursive ... )

                            NULL -> (boolean)
                               An attribute of type Null. For example:
                                   "NULL": true

                            BOOL -> (boolean)
                               An attribute of type Boolean. For example:
                                   "BOOL": true

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              ComparisonOperator -> (string)
                 A  comparator for evaluating attributes. For example, equals,
                 greater than, less than, etc.

                 The following comparison operators are available:
                     EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL |  CONTAINS
                     | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN

                 The following are descriptions of each comparison operator.

                 o EQ  :  Equal. EQ is supported for all data types, including
                   lists and maps.  AttributeValueList can  contain  only  one
                   AttributeValue  element  of  type  String,  Number, Binary,
                   String Set, Number Set, or Binary Set. If an item  contains
                   an  AttributeValue element of a different type than the one
                   provided in the request, the  value  does  not  match.  For
                   example,   {"S":"6"}  does  not  equal  {"N":"6"}  .  Also,
                   {"N":"6"} does not equal {"NS":["6", "2", "1"]} .

                 o NE : Not equal. NE is supported for all data types, includ-
                   ing  lists  and  maps.  AttributeValueList can contain only
                   one AttributeValue of type String, Number,  Binary,  String
                   Set,  Number  Set,  or  Binary  Set. If an item contains an
                   AttributeValue of a different type than the one provided in
                   the  request,  the  value  does  not  match.  For  example,
                   {"S":"6"} does not equal {"N":"6"} . Also,  {"N":"6"}  does
                   not equal {"NS":["6", "2", "1"]} .

                 o LE  :  Less than or equal.   AttributeValueList can contain
                   only one AttributeValue element of type String, Number,  or
                   Binary  (not a set type). If an item contains an Attribute-
                   Value element of a different type than the one provided  in
                   the  request,  the  value  does  not  match.  For  example,
                   {"S":"6"} does not equal {"N":"6"} . Also,  {"N":"6"}  does
                   not compare to {"NS":["6", "2", "1"]} .

                 o LT  :  Less than.   AttributeValueList can contain only one
                   AttributeValue of type String, Number, or Binary (not a set
                   type).  If  an item contains an AttributeValue element of a
                   different type than the one provided in  the  request,  the
                   value does not match. For example, {"S":"6"} does not equal
                   {"N":"6"} . Also, {"N":"6"} does not compare to {"NS":["6",
                   "2", "1"]} .

                 o GE  :  Greater than or equal.   AttributeValueList can con-
                   tain only one AttributeValue element of type  String,  Num-
                   ber,  or  Binary  (not  a set type). If an item contains an
                   AttributeValue element of a different  type  than  the  one
                   provided  in  the  request,  the  value does not match. For
                   example,  {"S":"6"}  does  not  equal  {"N":"6"}  .   Also,
                   {"N":"6"} does not compare to {"NS":["6", "2", "1"]} .

                 o GT  :  Greater  than.   AttributeValueList can contain only
                   one AttributeValue  element  of  type  String,  Number,  or
                   Binary  (not a set type). If an item contains an Attribute-
                   Value element of a different type than the one provided  in
                   the  request,  the  value  does  not  match.  For  example,
                   {"S":"6"} does not equal {"N":"6"} . Also,  {"N":"6"}  does
                   not compare to {"NS":["6", "2", "1"]} .

                 o NOT_NULL  : The attribute exists. NOT_NULL is supported for
                   all data types, including lists and maps.

                 NOTE:
                     This operator tests for the existence  of  an  attribute,
                     not  its data type. If the data type of attribute "a " is
                     null, and you evaluate it using NOT_NULL , the result  is
                     a  Boolean true . This result is because the attribute "a
                     " exists; its data type is not relevant to  the  NOT_NULL
                     comparison operator.

                 o NULL  : The attribute does not exist. NULL is supported for
                   all data types, including lists and maps.

                 NOTE:
                     This operator tests for the nonexistence of an attribute,
                     not  its data type. If the data type of attribute "a " is
                     null, and you evaluate it using NULL , the  result  is  a
                     Boolean  false  .  This  is  because  the  attribute "a "
                     exists; its data type is not relevant to the NULL compar-
                     ison operator.

                 o CONTAINS  :  Checks  for  a subsequence, or value in a set.
                   AttributeValueList can contain only one AttributeValue ele-
                   ment of type String, Number, or Binary (not a set type). If
                   the target attribute of the comparison is of  type  String,
                   then the operator checks for a substring match. If the tar-
                   get attribute of the comparison is of type Binary, then the
                   operator looks for a subsequence of the target that matches
                   the input. If the target attribute of the comparison  is  a
                   set  ("SS  ", "NS ", or "BS "), then the operator evaluates
                   to true if it finds an exact match with any member  of  the
                   set.  CONTAINS  is  supported for lists: When evaluating "a
                   CONTAINS b ", "a " can be a list; however, "b " cannot be a
                   set, a map, or a list.

                 o NOT_CONTAINS  :  Checks  for  absence  of a subsequence, or
                   absence of a value in a set.  AttributeValueList  can  con-
                   tain  only  one AttributeValue element of type String, Num-
                   ber, or Binary (not a set type). If the target attribute of
                   the  comparison  is  a String, then the operator checks for
                   the absence of a substring match. If the  target  attribute
                   of  the  comparison is Binary, then the operator checks for
                   the absence of a subsequence of the target that matches the
                   input.  If  the target attribute of the comparison is a set
                   ("SS ", "NS ", or "BS "), then the  operator  evaluates  to
                   true  if it does not find an exact match with any member of
                   the set. NOT_CONTAINS is supported for lists: When evaluat-
                   ing  "a NOT CONTAINS b ", "a " can be a list; however, "b "
                   cannot be a set, a map, or a list.

                 o BEGINS_WITH : Checks for a prefix.   AttributeValueList can
                   contain  only  one  AttributeValue of type String or Binary
                   (not a Number or a set type). The target attribute  of  the
                   comparison  must  be of type String or Binary (not a Number
                   or a set type).

                 o IN : Checks for matching elements in a list.  AttributeVal-
                   ueList  can  contain one or more AttributeValue elements of
                   type String, Number, or Binary. These attributes  are  com-
                   pared against an existing attribute of an item. If any ele-
                   ments of the input are equal to  the  item  attribute,  the
                   expression evaluates to true.

                 o BETWEEN  :  Greater  than  or equal to the first value, and
                   less than or equal to  the  second  value.    AttributeVal-
                   ueList must contain two AttributeValue elements of the same
                   type, either String, Number, or Binary (not a set type).  A
                   target  attribute  matches  if  the target value is greater
                   than, or equal to, the first  element  and  less  than,  or
                   equal  to,  the  second  element.  If  an  item contains an
                   AttributeValue element of a different  type  than  the  one
                   provided  in  the  request,  the  value does not match. For
                   example, {"S":"6"} does not compare to  {"N":"6"}  .  Also,
                   {"N":"6"} does not compare to {"NS":["6", "2", "1"]}

                 For usage examples of AttributeValueList and ComparisonOpera-
                 tor  ,  see  Legacy  Conditional  Parameters  in  the  Amazon
                 DynamoDB Developer Guide .

       JSON Syntax:

          {"string": {
                "AttributeValueList": [
                  {
                    "S": "string",
                    "N": "string",
                    "B": blob,
                    "SS": ["string", ...],
                    "NS": ["string", ...],
                    "BS": [blob, ...],
                    "M": {"string": {
                          "S": "string",
                          "N": "string",
                          "B": blob,
                          "SS": ["string", ...],
                          "NS": ["string", ...],
                          "BS": [blob, ...],
                          "M": {"string": { ... recursive ... }
                            ...},
                          "L": [
                            { ... recursive ... }
                            ...
                          ],
                          "NULL": true|false,
                          "BOOL": true|false
                        }
                      ...},
                    "L": [
                      {
                        "S": "string",
                        "N": "string",
                        "B": blob,
                        "SS": ["string", ...],
                        "NS": ["string", ...],
                        "BS": [blob, ...],
                        "M": {"string": { ... recursive ... }
                          ...},
                        "L": [
                          { ... recursive ... }
                          ...
                        ],
                        "NULL": true|false,
                        "BOOL": true|false
                      }
                      ...
                    ],
                    "NULL": true|false,
                    "BOOL": true|false
                  }
                  ...
                ],
                "ComparisonOperator": "EQ"|"NE"|"IN"|"LE"|"LT"|"GE"|"GT"|"BETWEEN"|"NOT_NULL"|"NULL"|"CONTAINS"|"NOT_CONTAINS"|"BEGINS_WITH"
              }
            ...}

       --conditional-operator (string)
          This  is  a legacy parameter. Use FilterExpression instead. For more
          information, see ConditionalOperator in the Amazon  DynamoDB  Devel-
          oper Guide .

          Possible values:

          o AND

          o OR

       --return-consumed-capacity (string)
          Determines the level of detail about either provisioned or on-demand
          throughput consumption that is returned in the response:

          o INDEXES - The response includes the aggregate ConsumedCapacity for
            the  operation,  together with ConsumedCapacity for each table and
            secondary index that was accessed. Note that some operations, such
            as GetItem and BatchGetItem , do not access any indexes at all. In
            these cases, specifying INDEXES will only return  ConsumedCapacity
            information for table(s).

          o TOTAL  - The response includes only the aggregate ConsumedCapacity
            for the operation.

          o NONE - No ConsumedCapacity details are included in the response.

          Possible values:

          o INDEXES

          o TOTAL

          o NONE

       --total-segments (integer)
          For a parallel Scan request, TotalSegments represents the total num-
          ber  of  segments into which the Scan operation will be divided. The
          value of TotalSegments corresponds  to  the  number  of  application
          workers  that  will  perform  the parallel scan. For example, if you
          want to use four application threads to scan a table  or  an  index,
          specify a TotalSegments value of 4.

          The  value for TotalSegments must be greater than or equal to 1, and
          less than or equal to 1000000. If you specify a TotalSegments  value
          of 1, the Scan operation will be sequential rather than parallel.

          If you specify TotalSegments , you must also specify Segment .

       --segment (integer)
          For  a  parallel Scan request, Segment identifies an individual seg-
          ment to be scanned by an application worker.

          Segment IDs are zero-based, so the first segment is  always  0.  For
          example, if you want to use four application threads to scan a table
          or an index, then the first thread specifies a Segment value  of  0,
          the second thread specifies 1, and so on.

          The  value of LastEvaluatedKey returned from a parallel Scan request
          must be used as ExclusiveStartKey with the same segment ID in a sub-
          sequent Scan operation.

          The  value  for Segment must be greater than or equal to 0, and less
          than the value provided for TotalSegments .

          If you provide Segment , you must also provide TotalSegments .

       --projection-expression (string)
          A string that identifies one or more attributes to retrieve from the
          specified  table  or  index.  These  attributes can include scalars,
          sets, or elements of a JSON document. The attributes in the  expres-
          sion must be separated by commas.

          If  no  attribute  names  are specified, then all attributes will be
          returned. If any of the requested attributes  are  not  found,  they
          will not appear in the result.

          For  more  information, see Specifying Item Attributes in the Amazon
          DynamoDB Developer Guide .

       --filter-expression (string)
          A string that contains conditions that DynamoDB  applies  after  the
          Scan  operation,  but before the data is returned to you. Items that
          do not satisfy the FilterExpression criteria are not returned.

          NOTE:
              A FilterExpression is applied after the items have already  been
              read;  the  process of filtering does not consume any additional
              read capacity units.

          For more information, see Filter Expressions in the Amazon  DynamoDB
          Developer Guide .

       --expression-attribute-names (map)
          One  or  more  substitution tokens for attribute names in an expres-
          sion. The following are  some  use  cases  for  using  ExpressionAt-
          tributeNames :

          o To  access  an  attribute  whose  name  conflicts  with a DynamoDB
            reserved word.

          o To create a placeholder for repeating occurrences of an  attribute
            name in an expression.

          o To prevent special characters in an attribute name from being mis-
            interpreted in an expression.

          Use the # character in an expression  to  dereference  an  attribute
          name. For example, consider the following attribute name:

          o Percentile

          The  name  of  this  attribute conflicts with a reserved word, so it
          cannot be used directly in an expression. (For the complete list  of
          reserved  words, see Reserved Words in the Amazon DynamoDB Developer
          Guide ). To work around this, you could specify  the  following  for
          ExpressionAttributeNames :

          o {"#P":"Percentile"}

          You  could  then  use this substitution in an expression, as in this
          example:

          o #P = :val

          NOTE:
              Tokens that begin with the : character are expression  attribute
              values , which are placeholders for the actual value at runtime.

          For more information on expression attribute names,  see  Specifying
          Item Attributes in the Amazon DynamoDB Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --expression-attribute-values (map)
          One or more values that can be substituted in an expression.

          Use  the  :  (colon)  character  in  an expression to dereference an
          attribute value. For example,  suppose  that  you  wanted  to  check
          whether the value of the ProductStatus attribute was one of the fol-
          lowing:
              Available | Backordered | Discontinued

          You would first need to specify  ExpressionAttributeValues  as  fol-
          lows:
              {    ":avail":{"S":"Available"},    ":back":{"S":"Backordered"},
              ":disc":{"S":"Discontinued"} }

          You could then use these values in an expression, such as this:
              ProductStatus IN (:avail, :back, :disc)

          For more information on expression attribute values,  see  Condition
          Expressions in the Amazon DynamoDB Developer Guide .

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For more information, see Data  Types  in  the  Amazon  DynamoDB
              Developer Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":   [   {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N",
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name  is  the  data  type, and the value is the data
                     itself.

                     For more  information,  see  Data  Types  in  the  Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       JSON Syntax:

          {"string": {
                "S": "string",
                "N": "string",
                "B": blob,
                "SS": ["string", ...],
                "NS": ["string", ...],
                "BS": [blob, ...],
                "M": {"string": {
                      "S": "string",
                      "N": "string",
                      "B": blob,
                      "SS": ["string", ...],
                      "NS": ["string", ...],
                      "BS": [blob, ...],
                      "M": {"string": { ... recursive ... }
                        ...},
                      "L": [
                        { ... recursive ... }
                        ...
                      ],
                      "NULL": true|false,
                      "BOOL": true|false
                    }
                  ...},
                "L": [
                  {
                    "S": "string",
                    "N": "string",
                    "B": blob,
                    "SS": ["string", ...],
                    "NS": ["string", ...],
                    "BS": [blob, ...],
                    "M": {"string": { ... recursive ... }
                      ...},
                    "L": [
                      { ... recursive ... }
                      ...
                    ],
                    "NULL": true|false,
                    "BOOL": true|false
                  }
                  ...
                ],
                "NULL": true|false,
                "BOOL": true|false
              }
            ...}

       --consistent-read | --no-consistent-read (boolean)
          A Boolean value that determines the read  consistency  model  during
          the scan:

          o If  ConsistentRead  is  false  ,  then the data returned from Scan
            might not contain the results from other recently completed  write
            operations (PutItem , UpdateItem , or DeleteItem ).

          o If  ConsistentRead is true , then all of the write operations that
            completed before the Scan began are guaranteed to be contained  in
            the Scan response.

          The default setting for ConsistentRead is false .

          The  ConsistentRead  parameter  is not supported on global secondary
          indexes. If you scan a global secondary  index  with  ConsistentRead
          set to true, you will receive a ValidationException .

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --starting-token (string)
          A  token to specify where to start paginating. This is the NextToken
          from a previously truncated response.

          For usage examples, see Pagination in the AWS Command Line Interface
          User Guide .

       --page-size (integer)
          The  size of each page to get in the AWS service call. This does not
          affect the number of items returned in the command's output. Setting
          a  smaller  page  size  results  in  more  calls to the AWS service,
          retrieving fewer items in each call. This can help prevent  the  AWS
          service calls from timing out.

          For usage examples, see Pagination in the AWS Command Line Interface
          User Guide .

       --max-items (integer)
          The total number of items to return in the command's output. If  the
          total  number of items available is more than the value specified, a
          NextToken is provided in the command's output. To resume pagination,
          provide the NextToken value in the starting-token argument of a sub-
          sequent command. Do not use the NextToken response element  directly
          outside of the AWS CLI.

          For usage examples, see Pagination in the AWS Command Line Interface
          User Guide .

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To scan a table

       The following scan example scans the entire MusicCollection table,  and
       then  narrows the results to songs by the artist "No One You Know". For
       each item, only the album title and song title are returned.

          aws dynamodb scan \
              --table-name MusicCollection \
              --filter-expression "Artist = :a" \
              --projection-expression "#ST, #AT" \
              --expression-attribute-names file://expression-attribute-names.json \
              --expression-attribute-values file://expression-attribute-values.json

       Contents of expression-attribute-names.json:

          {
              "#ST": "SongTitle",
              "#AT":"AlbumTitle"
          }

       Contents of expression-attribute-values.json:

          {
              ":a": {"S": "No One You Know"}
          }

       Output:

          {
              "Count": 2,
              "Items": [
                  {
                      "SongTitle": {
                          "S": "Call Me Today"
                      },
                      "AlbumTitle": {
                          "S": "Somewhat Famous"
                      }
                  },
                  {
                      "SongTitle": {
                          "S": "Scared of My Shadow"
                      },
                      "AlbumTitle": {
                          "S": "Blue Sky Blues"
                      }
                  }
              ],
              "ScannedCount": 3,
              "ConsumedCapacity": null
          }

       For more information, see Working with Scans in DynamoDB in the  Amazon
       DynamoDB Developer Guide.

OUTPUT
       Items -> (list)
          An  array of item attributes that match the scan criteria. Each ele-
          ment in this array consists of an attribute name and the  value  for
          that attribute.

          (map)
              key -> (string)

              value -> (structure)
                 Represents the data for an attribute.

                 Each  attribute  value is described as a name-value pair. The
                 name is the data type, and the value is the data itself.

                 For more information, see Data Types in the  Amazon  DynamoDB
                 Developer Guide .

                 S -> (string)
                     An attribute of type String. For example:
                        "S": "Hello"

                 N -> (string)
                     An attribute of type Number. For example:
                        "N": "123.45"

                     Numbers  are  sent  across  the  network  to  DynamoDB as
                     strings, to maximize compatibility across  languages  and
                     libraries.  However,  DynamoDB treats them as number type
                     attributes for mathematical operations.

                 B -> (blob)
                     An attribute of type Binary. For example:
                        "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                 SS -> (list)
                     An attribute of type String Set. For example:
                        "SS": ["Giraffe", "Hippo" ,"Zebra"]

                     (string)

                 NS -> (list)
                     An attribute of type Number Set. For example:
                        "NS": ["42.2", "-19", "7.5", "3.14"]

                     Numbers are  sent  across  the  network  to  DynamoDB  as
                     strings,  to  maximize compatibility across languages and
                     libraries. However, DynamoDB treats them as  number  type
                     attributes for mathematical operations.

                     (string)

                 BS -> (list)
                     An attribute of type Binary Set. For example:
                        "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                     (blob)

                 M -> (map)
                     An attribute of type Map. For example:
                        "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                     key -> (string)

                     value -> (structure)
                        Represents the data for an attribute.

                        Each  attribute  value  is  described  as a name-value
                        pair. The name is the data type, and the value is  the
                        data itself.

                        For  more  information,  see  Data Types in the Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            ( ... recursive ... )

                        L -> (list)
                            An attribute of type List. For example:
                               "L":  [  {"S":  "Cookies"}  ,  {"S": "Coffee"},
                               {"N", "3.14159"}]

                            ( ... recursive ... )

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 L -> (list)
                     An attribute of type List. For example:
                        "L": [  {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N",
                        "3.14159"}]

                     (structure)
                        Represents the data for an attribute.

                        Each  attribute  value  is  described  as a name-value
                        pair. The name is the data type, and the value is  the
                        data itself.

                        For  more  information,  see  Data Types in the Amazon
                        DynamoDB Developer Guide .

                        S -> (string)
                            An attribute of type String. For example:
                               "S": "Hello"

                        N -> (string)
                            An attribute of type Number. For example:
                               "N": "123.45"

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                        B -> (blob)
                            An attribute of type Binary. For example:
                               "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                        SS -> (list)
                            An attribute of type String Set. For example:
                               "SS": ["Giraffe", "Hippo" ,"Zebra"]

                            (string)

                        NS -> (list)
                            An attribute of type Number Set. For example:
                               "NS": ["42.2", "-19", "7.5", "3.14"]

                            Numbers are sent across the network to DynamoDB as
                            strings,  to  maximize  compatibility  across lan-
                            guages and  libraries.  However,  DynamoDB  treats
                            them  as  number  type attributes for mathematical
                            operations.

                            (string)

                        BS -> (list)
                            An attribute of type Binary Set. For example:
                               "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                            (blob)

                        M -> (map)
                            An attribute of type Map. For example:
                               "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                            key -> (string)

                            ( ... recursive ... )

                        L -> (list)
                            An attribute of type List. For example:
                               "L":  [  {"S":  "Cookies"}  ,  {"S": "Coffee"},
                               {"N", "3.14159"}]

                            ( ... recursive ... )

                        NULL -> (boolean)
                            An attribute of type Null. For example:
                               "NULL": true

                        BOOL -> (boolean)
                            An attribute of type Boolean. For example:
                               "BOOL": true

                 NULL -> (boolean)
                     An attribute of type Null. For example:
                        "NULL": true

                 BOOL -> (boolean)
                     An attribute of type Boolean. For example:
                        "BOOL": true

       Count -> (integer)
          The number of items in the response.

          If you set ScanFilter in the request, then Count is  the  number  of
          items returned after the filter was applied, and ScannedCount is the
          number of matching items before the filter was applied.

          If you did not use a filter in the request, then Count is  the  same
          as ScannedCount .

       ScannedCount -> (integer)
          The  number  of items evaluated, before any ScanFilter is applied. A
          high ScannedCount value with few, or no, Count results indicates  an
          inefficient  Scan  operation.  For  more  information, see Count and
          ScannedCount in the Amazon DynamoDB Developer Guide .

          If you did not use a filter in the request, then ScannedCount is the
          same as Count .

       LastEvaluatedKey -> (map)
          The  primary  key of the item where the operation stopped, inclusive
          of the previous result set. Use this value to start a new operation,
          excluding this value in the new request.

          If  LastEvaluatedKey  is  empty, then the "last page" of results has
          been processed and there is no more data to be retrieved.

          If LastEvaluatedKey is not empty, it does not necessarily mean  that
          there  is more data in the result set. The only way to know when you
          have reached the end of the result set is when  LastEvaluatedKey  is
          empty.

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For more information, see Data  Types  in  the  Amazon  DynamoDB
              Developer Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":   [   {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N",
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name  is  the  data  type, and the value is the data
                     itself.

                     For more  information,  see  Data  Types  in  the  Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       ConsumedCapacity -> (structure)
          The capacity units consumed by the Scan operation. The data returned
          includes  the total provisioned throughput consumed, along with sta-
          tistics for the table and any indexes  involved  in  the  operation.
          ConsumedCapacity  is  only  returned  if  the ReturnConsumedCapacity
          parameter was  specified.  For  more  information,  see  Provisioned
          Throughput in the Amazon DynamoDB Developer Guide .

          TableName -> (string)
              The name of the table that was affected by the operation.

          CapacityUnits -> (double)
              The total number of capacity units consumed by the operation.

          ReadCapacityUnits -> (double)
              The  total  number of read capacity units consumed by the opera-
              tion.

          WriteCapacityUnits -> (double)
              The total number of write capacity units consumed by the  opera-
              tion.

          Table -> (structure)
              The  amount  of throughput consumed on the table affected by the
              operation.

              ReadCapacityUnits -> (double)
                 The total number of read capacity units consumed on  a  table
                 or an index.

              WriteCapacityUnits -> (double)
                 The  total number of write capacity units consumed on a table
                 or an index.

              CapacityUnits -> (double)
                 The total number of capacity units consumed on a table or  an
                 index.

          LocalSecondaryIndexes -> (map)
              The  amount  of throughput consumed on each local index affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The total number of write capacity units  consumed  on  a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

          GlobalSecondaryIndexes -> (map)
              The amount of throughput consumed on each global index  affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The  total  number  of write capacity units consumed on a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.



                                                                        SCAN()
