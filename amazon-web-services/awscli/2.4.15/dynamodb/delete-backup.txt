DELETE-BACKUP()                                                DELETE-BACKUP()



NAME
       delete-backup -

DESCRIPTION
       Deletes an existing backup of a table.

       You can call DeleteBackup at a maximum rate of 10 times per second.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            delete-backup
          --backup-arn <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --backup-arn (string)
          The ARN associated with the backup.

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To delete an existing DynamoDB backup

       The  following  delete-backup  example  deletes  the specified existing
       backup.

          aws dynamodb delete-backup \
              --backup-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a

       Output:

          {
              "BackupDescription": {
                  "BackupDetails": {
                      "BackupArn": "arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a",
                      "BackupName": "MusicCollectionBackup",
                      "BackupSizeBytes": 0,
                      "BackupStatus": "DELETED",
                      "BackupType": "USER",
                      "BackupCreationDateTime": 1576616366.715
                  },
                  "SourceTableDetails": {
                      "TableName": "MusicCollection",
                      "TableId": "b0c04bcc-309b-4352-b2ae-9088af169fe2",
                      "TableArn": "arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection",
                      "TableSizeBytes": 0,
                      "KeySchema": [
                          {
                              "AttributeName": "Artist",
                              "KeyType": "HASH"
                          },
                          {
                              "AttributeName": "SongTitle",
                              "KeyType": "RANGE"
                          }
                      ],
                      "TableCreationDateTime": 1576615228.571,
                      "ProvisionedThroughput": {
                          "ReadCapacityUnits": 5,
                          "WriteCapacityUnits": 5
                      },
                      "ItemCount": 0,
                      "BillingMode": "PROVISIONED"
                  },
                  "SourceTableFeatureDetails": {}
              }
          }

       For more information, see On-Demand Backup and Restore for DynamoDB  in
       the Amazon DynamoDB Developer Guide.

OUTPUT
       BackupDescription -> (structure)
          Contains the description of the backup created for the table.

          BackupDetails -> (structure)
              Contains the details of the backup created for the table.

              BackupArn -> (string)
                 ARN associated with the backup.

              BackupName -> (string)
                 Name of the requested backup.

              BackupSizeBytes -> (long)
                 Size of the backup in bytes.

              BackupStatus -> (string)
                 Backup  can  be  in  one  of  the following states: CREATING,
                 ACTIVE, DELETED.

              BackupType -> (string)
                 BackupType:

                 o USER - You create and  manage  these  using  the  on-demand
                   backup feature.

                 o SYSTEM  - If you delete a table with point-in-time recovery
                   enabled, a SYSTEM backup is automatically  created  and  is
                   retained  for 35 days (at no additional cost). System back-
                   ups allow you to restore the deleted table to the state  it
                   was in just before the point of deletion.

                 o AWS_BACKUP  -  On-demand  backup created by you from Backup
                   service.

              BackupCreationDateTime -> (timestamp)
                 Time at which the backup was created.  This  is  the  request
                 time of the backup.

              BackupExpiryDateTime -> (timestamp)
                 Time  at  which  the  automatic  on-demand  backup created by
                 DynamoDB will expire. This SYSTEM  on-demand  backup  expires
                 automatically 35 days after its creation.

          SourceTableDetails -> (structure)
              Contains the details of the table when the backup was created.

              TableName -> (string)
                 The name of the table for which the backup was created.

              TableId -> (string)
                 Unique identifier for the table for which the backup was cre-
                 ated.

              TableArn -> (string)
                 ARN of the table for which backup was created.

              TableSizeBytes -> (long)
                 Size of the table in bytes. Note that this is an  approximate
                 value.

              KeySchema -> (list)
                 Schema of the table.

                 (structure)
                     Represents a single element of a key schema. A key schema
                     specifies the attributes that make up the primary key  of
                     a table, or the key attributes of an index.

                     A  KeySchemaElement  represents  exactly one attribute of
                     the primary key. For example, a simple primary key  would
                     be represented by one KeySchemaElement (for the partition
                     key).  A  composite  primary  key   would   require   one
                     KeySchemaElement  for  the  partition  key,  and  another
                     KeySchemaElement for the sort key.

                     A KeySchemaElement must be a scalar, top-level  attribute
                     (not  a  nested  attribute). The data type must be one of
                     String, Number, or Binary. The attribute cannot be nested
                     within a List or a Map.

                     AttributeName -> (string)
                        The name of a key attribute.

                     KeyType -> (string)
                        The role that this key attribute will assume:

                        o HASH - partition key

                        o RANGE - sort key

                        NOTE:
                            The  partition key of an item is also known as its
                            hash attribute . The term "hash attribute" derives
                            from DynamoDB's usage of an internal hash function
                            to evenly distribute data items across partitions,
                            based on their partition key values.

                            The sort key of an item is also known as its range
                            attribute . The  term  "range  attribute"  derives
                            from  the  way DynamoDB stores items with the same
                            partition key physically close together, in sorted
                            order by the sort key value.

              TableCreationDateTime -> (timestamp)
                 Time when the source table was created.

              ProvisionedThroughput -> (structure)
                 Read  IOPs  and  Write  IOPS on the table when the backup was
                 created.

                 ReadCapacityUnits -> (long)
                     The maximum number of strongly consistent reads  consumed
                     per  second before DynamoDB returns a ThrottlingException
                     . For more information, see  Specifying  Read  and  Write
                     Requirements in the Amazon DynamoDB Developer Guide .

                     If  read/write capacity mode is PAY_PER_REQUEST the value
                     is set to 0.

                 WriteCapacityUnits -> (long)
                     The maximum number of writes consumed per  second  before
                     DynamoDB  returns a ThrottlingException . For more infor-
                     mation, see Specifying Read and Write Requirements in the
                     Amazon DynamoDB Developer Guide .

                     If  read/write capacity mode is PAY_PER_REQUEST the value
                     is set to 0.

              ItemCount -> (long)
                 Number of items in the table. Note that this is  an  approxi-
                 mate value.

              BillingMode -> (string)
                 Controls  how  you  are charged for read and write throughput
                 and how you manage capacity.  This  setting  can  be  changed
                 later.

                 o PROVISIONED  -  Sets the read/write capacity mode to PROVI-
                   SIONED . We recommend  using  PROVISIONED  for  predictable
                   workloads.

                 o PAY_PER_REQUEST  -  Sets  the  read/write  capacity mode to
                   PAY_PER_REQUEST . We recommend  using  PAY_PER_REQUEST  for
                   unpredictable workloads.

          SourceTableFeatureDetails -> (structure)
              Contains  the  details of the features enabled on the table when
              the backup was created. For example, LSIs, GSIs, streams, TTL.

              LocalSecondaryIndexes -> (list)
                 Represents the LSI properties for the table when  the  backup
                 was created. It includes the IndexName, KeySchema and Projec-
                 tion for the LSIs on the table at the time of backup.

                 (structure)
                     Represents the properties of a local secondary index  for
                     the table when the backup was created.

                     IndexName -> (string)
                        Represents the name of the local secondary index.

                     KeySchema -> (list)
                        The  complete  key schema for a local secondary index,
                        which consists of one or more pairs of attribute names
                        and key types:

                        o HASH - partition key

                        o RANGE - sort key

                        NOTE:
                            The  partition key of an item is also known as its
                            hash attribute . The term "hash attribute" derives
                            from DynamoDB's usage of an internal hash function
                            to evenly distribute data items across partitions,
                            based on their partition key values.

                            The sort key of an item is also known as its range
                            attribute . The  term  "range  attribute"  derives
                            from  the  way DynamoDB stores items with the same
                            partition key physically close together, in sorted
                            order by the sort key value.

                        (structure)
                            Represents a single element of a key schema. A key
                            schema specifies the attributes that make  up  the
                            primary  key  of a table, or the key attributes of
                            an index.

                            A   KeySchemaElement   represents   exactly    one
                            attribute  of the primary key. For example, a sim-
                            ple  primary  key  would  be  represented  by  one
                            KeySchemaElement  (for  the partition key). A com-
                            posite primary key would require one KeySchemaEle-
                            ment   for   the   partition   key,   and  another
                            KeySchemaElement for the sort key.

                            A KeySchemaElement must  be  a  scalar,  top-level
                            attribute  (not a nested attribute). The data type
                            must be one of  String,  Number,  or  Binary.  The
                            attribute cannot be nested within a List or a Map.

                            AttributeName -> (string)
                               The name of a key attribute.

                            KeyType -> (string)
                               The role that this key attribute will assume:

                               o HASH - partition key

                               o RANGE - sort key

                               NOTE:
                                   The partition key of an item is also  known
                                   as  its  hash  attribute  .  The term "hash
                                   attribute" derives from DynamoDB's usage of
                                   an  internal  hash  function to evenly dis-
                                   tribute data items across partitions, based
                                   on their partition key values.

                                   The  sort  key  of an item is also known as
                                   its  range  attribute  .  The  term  "range
                                   attribute"  derives  from  the way DynamoDB
                                   stores items with the  same  partition  key
                                   physically  close together, in sorted order
                                   by the sort key value.

                     Projection -> (structure)
                        Represents attributes that are copied (projected) from
                        the  table  into the global secondary index. These are
                        in addition to the primary key  attributes  and  index
                        key attributes, which are automatically projected.

                        ProjectionType -> (string)
                            The  set of attributes that are projected into the
                            index:

                            o KEYS_ONLY - Only the index and primary keys  are
                              projected into the index.

                            o INCLUDE   -   In   addition  to  the  attributes
                              described in KEYS_ONLY  ,  the  secondary  index
                              will  include  other non-key attributes that you
                              specify.

                            o ALL - All of the table attributes are  projected
                              into the index.

                        NonKeyAttributes -> (list)
                            Represents  the non-key attribute names which will
                            be projected into the index.

                            For local secondary indexes, the  total  count  of
                            NonKeyAttributes  summed  across  all of the local
                            secondary indexes, must  not  exceed  20.  If  you
                            project  the  same  attribute  into  two different
                            indexes, this counts as  two  distinct  attributes
                            when determining the total.

                            (string)

              GlobalSecondaryIndexes -> (list)
                 Represents  the  GSI properties for the table when the backup
                 was created. It includes the  IndexName,  KeySchema,  Projec-
                 tion,  and ProvisionedThroughput for the GSIs on the table at
                 the time of backup.

                 (structure)
                     Represents the properties of a global secondary index for
                     the table when the backup was created.

                     IndexName -> (string)
                        The name of the global secondary index.

                     KeySchema -> (list)
                        The  complete key schema for a global secondary index,
                        which consists of one or more pairs of attribute names
                        and key types:

                        o HASH - partition key

                        o RANGE - sort key

                        NOTE:
                            The  partition key of an item is also known as its
                            hash attribute . The term "hash attribute" derives
                            from DynamoDB's usage of an internal hash function
                            to evenly distribute data items across partitions,
                            based on their partition key values.

                            The sort key of an item is also known as its range
                            attribute . The  term  "range  attribute"  derives
                            from  the  way DynamoDB stores items with the same
                            partition key physically close together, in sorted
                            order by the sort key value.

                        (structure)
                            Represents a single element of a key schema. A key
                            schema specifies the attributes that make  up  the
                            primary  key  of a table, or the key attributes of
                            an index.

                            A   KeySchemaElement   represents   exactly    one
                            attribute  of the primary key. For example, a sim-
                            ple  primary  key  would  be  represented  by  one
                            KeySchemaElement  (for  the partition key). A com-
                            posite primary key would require one KeySchemaEle-
                            ment   for   the   partition   key,   and  another
                            KeySchemaElement for the sort key.

                            A KeySchemaElement must  be  a  scalar,  top-level
                            attribute  (not a nested attribute). The data type
                            must be one of  String,  Number,  or  Binary.  The
                            attribute cannot be nested within a List or a Map.

                            AttributeName -> (string)
                               The name of a key attribute.

                            KeyType -> (string)
                               The role that this key attribute will assume:

                               o HASH - partition key

                               o RANGE - sort key

                               NOTE:
                                   The partition key of an item is also  known
                                   as  its  hash  attribute  .  The term "hash
                                   attribute" derives from DynamoDB's usage of
                                   an  internal  hash  function to evenly dis-
                                   tribute data items across partitions, based
                                   on their partition key values.

                                   The  sort  key  of an item is also known as
                                   its  range  attribute  .  The  term  "range
                                   attribute"  derives  from  the way DynamoDB
                                   stores items with the  same  partition  key
                                   physically  close together, in sorted order
                                   by the sort key value.

                     Projection -> (structure)
                        Represents attributes that are copied (projected) from
                        the  table  into the global secondary index. These are
                        in addition to the primary key  attributes  and  index
                        key attributes, which are automatically projected.

                        ProjectionType -> (string)
                            The  set of attributes that are projected into the
                            index:

                            o KEYS_ONLY - Only the index and primary keys  are
                              projected into the index.

                            o INCLUDE   -   In   addition  to  the  attributes
                              described in KEYS_ONLY  ,  the  secondary  index
                              will  include  other non-key attributes that you
                              specify.

                            o ALL - All of the table attributes are  projected
                              into the index.

                        NonKeyAttributes -> (list)
                            Represents  the non-key attribute names which will
                            be projected into the index.

                            For local secondary indexes, the  total  count  of
                            NonKeyAttributes  summed  across  all of the local
                            secondary indexes, must  not  exceed  20.  If  you
                            project  the  same  attribute  into  two different
                            indexes, this counts as  two  distinct  attributes
                            when determining the total.

                            (string)

                     ProvisionedThroughput -> (structure)
                        Represents the provisioned throughput settings for the
                        specified global secondary index.

                        ReadCapacityUnits -> (long)
                            The maximum number of  strongly  consistent  reads
                            consumed  per  second  before  DynamoDB  returns a
                            ThrottlingException . For  more  information,  see
                            Specifying Read and Write Requirements in the Ama-
                            zon DynamoDB Developer Guide .

                            If read/write capacity mode is PAY_PER_REQUEST the
                            value is set to 0.

                        WriteCapacityUnits -> (long)
                            The  maximum  number of writes consumed per second
                            before DynamoDB returns  a  ThrottlingException  .
                            For  more  information,  see  Specifying  Read and
                            Write Requirements in the Amazon  DynamoDB  Devel-
                            oper Guide .

                            If read/write capacity mode is PAY_PER_REQUEST the
                            value is set to 0.

              StreamDescription -> (structure)
                 Stream settings on the table when the backup was created.

                 StreamEnabled -> (boolean)
                     Indicates whether DynamoDB Streams is enabled  (true)  or
                     disabled (false) on the table.

                 StreamViewType -> (string)
                     When  an  item  in  the table is modified, StreamViewType
                     determines what information is written to the stream  for
                     this table. Valid values for StreamViewType are:

                     o KEYS_ONLY  -  Only  the  key attributes of the modified
                       item are written to the stream.

                     o NEW_IMAGE - The entire item, as it appears after it was
                       modified, is written to the stream.

                     o OLD_IMAGE  -  The entire item, as it appeared before it
                       was modified, is written to the stream.

                     o NEW_AND_OLD_IMAGES - Both the  new  and  the  old  item
                       images of the item are written to the stream.

              TimeToLiveDescription -> (structure)
                 Time  to  Live settings on the table when the backup was cre-
                 ated.

                 TimeToLiveStatus -> (string)
                     The TTL status for the table.

                 AttributeName -> (string)
                     The name of the TTL attribute for items in the table.

              SSEDescription -> (structure)
                 The description of the server-side encryption status  on  the
                 table when the backup was created.

                 Status -> (string)
                     Represents  the  current state of server-side encryption.
                     The only supported values are:

                     o ENABLED - Server-side encryption is enabled.

                     o UPDATING - Server-side encryption is being updated.

                 SSEType -> (string)
                     Server-side encryption type. The only supported value is:

                     o KMS  -  Server-side encryption that uses Key Management
                       Service. The key is stored in your account and is  man-
                       aged by KMS (KMS charges apply).

                 KMSMasterKeyArn -> (string)
                     The KMS key ARN used for the KMS encryption.

                 InaccessibleEncryptionDateTime -> (timestamp)
                     Indicates  the  time,  in  UNIX  epoch  date format, when
                     DynamoDB detected that the table's KMS key was inaccessi-
                     ble.  This  attribute  will automatically be cleared when
                     DynamoDB detects that the table's KMS key  is  accessible
                     again.  DynamoDB will initiate the table archival process
                     when table's KMS key remains inaccessible for  more  than
                     seven days from this date.



                                                               DELETE-BACKUP()
