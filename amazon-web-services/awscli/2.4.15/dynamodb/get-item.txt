GET-ITEM()                                                          GET-ITEM()



NAME
       get-item -

DESCRIPTION
       The GetItem operation returns a set of attributes for the item with the
       given primary key. If there is  no  matching  item,  GetItem  does  not
       return any data and there will be no Item element in the response.
          GetItem  provides  an eventually consistent read by default. If your
          application requires a strongly consistent read, set  ConsistentRead
          to  true  . Although a strongly consistent read might take more time
          than an eventually consistent  read,  it  always  returns  the  last
          updated value.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            get-item
          --table-name <value>
          --key <value>
          [--attributes-to-get <value>]
          [--consistent-read | --no-consistent-read]
          [--return-consumed-capacity <value>]
          [--projection-expression <value>]
          [--expression-attribute-names <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --table-name (string)
          The name of the table containing the requested item.

       --key (map)
          A map of attribute names to AttributeValue objects, representing the
          primary key of the item to retrieve.

          For the primary key, you must provide all  of  the  attributes.  For
          example, with a simple primary key, you only need to provide a value
          for the partition key. For a composite primary key, you must provide
          values for both the partition key and the sort key.

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For more information, see Data  Types  in  the  Amazon  DynamoDB
              Developer Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":   [   {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N",
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name  is  the  data  type, and the value is the data
                     itself.

                     For more  information,  see  Data  Types  in  the  Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       JSON Syntax:

          {"string": {
                "S": "string",
                "N": "string",
                "B": blob,
                "SS": ["string", ...],
                "NS": ["string", ...],
                "BS": [blob, ...],
                "M": {"string": {
                      "S": "string",
                      "N": "string",
                      "B": blob,
                      "SS": ["string", ...],
                      "NS": ["string", ...],
                      "BS": [blob, ...],
                      "M": {"string": { ... recursive ... }
                        ...},
                      "L": [
                        { ... recursive ... }
                        ...
                      ],
                      "NULL": true|false,
                      "BOOL": true|false
                    }
                  ...},
                "L": [
                  {
                    "S": "string",
                    "N": "string",
                    "B": blob,
                    "SS": ["string", ...],
                    "NS": ["string", ...],
                    "BS": [blob, ...],
                    "M": {"string": { ... recursive ... }
                      ...},
                    "L": [
                      { ... recursive ... }
                      ...
                    ],
                    "NULL": true|false,
                    "BOOL": true|false
                  }
                  ...
                ],
                "NULL": true|false,
                "BOOL": true|false
              }
            ...}

       --attributes-to-get (list)
          This is a legacy parameter. Use  ProjectionExpression  instead.  For
          more  information, see AttributesToGet in the Amazon DynamoDB Devel-
          oper Guide .

          (string)

       Syntax:

          "string" "string" ...

       --consistent-read | --no-consistent-read (boolean)
          Determines the read consistency model: If set to  true  ,  then  the
          operation  uses  strongly consistent reads; otherwise, the operation
          uses eventually consistent reads.

       --return-consumed-capacity (string)
          Determines the level of detail about either provisioned or on-demand
          throughput consumption that is returned in the response:

          o INDEXES - The response includes the aggregate ConsumedCapacity for
            the operation, together with ConsumedCapacity for each  table  and
            secondary index that was accessed. Note that some operations, such
            as GetItem and BatchGetItem , do not access any indexes at all. In
            these  cases, specifying INDEXES will only return ConsumedCapacity
            information for table(s).

          o TOTAL - The response includes only the aggregate  ConsumedCapacity
            for the operation.

          o NONE - No ConsumedCapacity details are included in the response.

          Possible values:

          o INDEXES

          o TOTAL

          o NONE

       --projection-expression (string)
          A string that identifies one or more attributes to retrieve from the
          table. These attributes can include scalars, sets, or elements of  a
          JSON document. The attributes in the expression must be separated by
          commas.

          If no  attribute  names  are  specified,  then  all  attributes  are
          returned.  If any of the requested attributes are not found, they do
          not appear in the result.

          For more information, see Specifying Item Attributes in  the  Amazon
          DynamoDB Developer Guide .

       --expression-attribute-names (map)
          One  or  more  substitution tokens for attribute names in an expres-
          sion. The following are  some  use  cases  for  using  ExpressionAt-
          tributeNames :

          o To  access  an  attribute  whose  name  conflicts  with a DynamoDB
            reserved word.

          o To create a placeholder for repeating occurrences of an  attribute
            name in an expression.

          o To prevent special characters in an attribute name from being mis-
            interpreted in an expression.

          Use the # character in an expression  to  dereference  an  attribute
          name. For example, consider the following attribute name:

          o Percentile

          The  name  of  this  attribute conflicts with a reserved word, so it
          cannot be used directly in an expression. (For the complete list  of
          reserved  words, see Reserved Words in the Amazon DynamoDB Developer
          Guide ). To work around this, you could specify  the  following  for
          ExpressionAttributeNames :

          o {"#P":"Percentile"}

          You  could  then  use this substitution in an expression, as in this
          example:

          o #P = :val

          NOTE:
              Tokens that begin with the : character are expression  attribute
              values , which are placeholders for the actual value at runtime.

          For more information on expression attribute names,  see  Specifying
          Item Attributes in the Amazon DynamoDB Developer Guide .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To read an item in a table

       The  following get-item example retrieves an item from the MusicCollec-
       tion table. The table has a  hash-and-range  primary  key  (Artist  and
       SongTitle),  so  you must specify both of these attributes. The command
       also requests information about the read capacity consumed by the oper-
       ation.

          aws dynamodb get-item \
              --table-name MusicCollection \
              --key file://key.json \
              --return-consumed-capacity TOTAL

       Contents of key.json:

          {
              "Artist": {"S": "Acme Band"},
              "SongTitle": {"S": "Happy Day"}
          }

       Output:

          {
              "Item": {
                  "AlbumTitle": {
                      "S": "Songs About Life"
                  },
                  "SongTitle": {
                      "S": "Happy Day"
                  },
                  "Artist": {
                      "S": "Acme Band"
                  }
              },
              "ConsumedCapacity": {
                  "TableName": "MusicCollection",
                  "CapacityUnits": 0.5
              }
          }

       For more information, see Reading an Item in the Amazon DynamoDB Devel-
       oper Guide.

       Example 2: To read an item using a consistent read

       The following example retrieves an item from the MusicCollection  table
       using strongly consistent reads.

          aws dynamodb get-item \
              --table-name MusicCollection \
              --key file://key.json \
              --consistent-read \
              --return-consumed-capacity TOTAL

       Contents of key.json:

          {
              "Artist": {"S": "Acme Band"},
              "SongTitle": {"S": "Happy Day"}
          }

       Output:

          {
              "Item": {
                  "AlbumTitle": {
                      "S": "Songs About Life"
                  },
                  "SongTitle": {
                      "S": "Happy Day"
                  },
                  "Artist": {
                      "S": "Acme Band"
                  }
              },
              "ConsumedCapacity": {
                  "TableName": "MusicCollection",
                  "CapacityUnits": 1.0
              }
          }

       For more information, see Reading an Item in the Amazon DynamoDB Devel-
       oper Guide.

       Example 3: To retrieve specific attributes of an item

       The following example uses a projection  expression  to  retrieve  only
       three attributes of the desired item.

          aws dynamodb get-item \
              --table-name ProductCatalog \
              --key '{"Id": {"N": "102"}}' \
              --projection-expression "#T, #C, #P" \
              --expression-attribute-names file://names.json

       Contents of names.json:

          {
              "#T": "Title",
              "#C": "ProductCategory",
              "#P": "Price"
          }

       Output:

          {
              "Item": {
                  "Price": {
                      "N": "20"
                  },
                  "Title": {
                      "S": "Book 102 Title"
                  },
                  "ProductCategory": {
                      "S": "Book"
                  }
              }
          }

       For more information, see Reading an Item in the Amazon DynamoDB Devel-
       oper Guide.

OUTPUT
       Item -> (map)
          A map of attribute names to AttributeValue objects, as specified  by
          ProjectionExpression .

          key -> (string)

          value -> (structure)
              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name
              is the data type, and the value is the data itself.

              For more information, see Data  Types  in  the  Amazon  DynamoDB
              Developer Guide .

              S -> (string)
                 An attribute of type String. For example:
                     "S": "Hello"

              N -> (string)
                 An attribute of type Number. For example:
                     "N": "123.45"

                 Numbers  are  sent across the network to DynamoDB as strings,
                 to maximize compatibility  across  languages  and  libraries.
                 However,  DynamoDB  treats them as number type attributes for
                 mathematical operations.

              B -> (blob)
                 An attribute of type Binary. For example:
                     "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

              SS -> (list)
                 An attribute of type String Set. For example:
                     "SS": ["Giraffe", "Hippo" ,"Zebra"]

                 (string)

              NS -> (list)
                 An attribute of type Number Set. For example:
                     "NS": ["42.2", "-19", "7.5", "3.14"]

                 Numbers are sent across the network to DynamoDB  as  strings,
                 to  maximize  compatibility  across  languages and libraries.
                 However, DynamoDB treats them as number type  attributes  for
                 mathematical operations.

                 (string)

              BS -> (list)
                 An attribute of type Binary Set. For example:
                     "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                 (blob)

              M -> (map)
                 An attribute of type Map. For example:
                     "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                 key -> (string)

                 value -> (structure)
                     Represents the data for an attribute.

                     Each  attribute  value is described as a name-value pair.
                     The name is the data type, and  the  value  is  the  data
                     itself.

                     For  more  information,  see  Data  Types  in  the Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L": [ {"S": "Cookies"} , {"S":  "Coffee"},  {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              L -> (list)
                 An attribute of type List. For example:
                     "L":   [   {"S":  "Cookies"}  ,  {"S":  "Coffee"},  {"N",
                     "3.14159"}]

                 (structure)
                     Represents the data for an attribute.

                     Each attribute value is described as a  name-value  pair.
                     The  name  is  the  data  type, and the value is the data
                     itself.

                     For more  information,  see  Data  Types  in  the  Amazon
                     DynamoDB Developer Guide .

                     S -> (string)
                        An attribute of type String. For example:
                            "S": "Hello"

                     N -> (string)
                        An attribute of type Number. For example:
                            "N": "123.45"

                        Numbers  are  sent  across  the network to DynamoDB as
                        strings, to maximize  compatibility  across  languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                     B -> (blob)
                        An attribute of type Binary. For example:
                            "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"

                     SS -> (list)
                        An attribute of type String Set. For example:
                            "SS": ["Giraffe", "Hippo" ,"Zebra"]

                        (string)

                     NS -> (list)
                        An attribute of type Number Set. For example:
                            "NS": ["42.2", "-19", "7.5", "3.14"]

                        Numbers are sent across the  network  to  DynamoDB  as
                        strings,  to  maximize  compatibility across languages
                        and libraries. However, DynamoDB treats them as number
                        type attributes for mathematical operations.

                        (string)

                     BS -> (list)
                        An attribute of type Binary Set. For example:
                            "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]

                        (blob)

                     M -> (map)
                        An attribute of type Map. For example:
                            "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}

                        key -> (string)

                        ( ... recursive ... )

                     L -> (list)
                        An attribute of type List. For example:
                            "L":  [  {"S": "Cookies"} , {"S": "Coffee"}, {"N",
                            "3.14159"}]

                        ( ... recursive ... )

                     NULL -> (boolean)
                        An attribute of type Null. For example:
                            "NULL": true

                     BOOL -> (boolean)
                        An attribute of type Boolean. For example:
                            "BOOL": true

              NULL -> (boolean)
                 An attribute of type Null. For example:
                     "NULL": true

              BOOL -> (boolean)
                 An attribute of type Boolean. For example:
                     "BOOL": true

       ConsumedCapacity -> (structure)
          The capacity units consumed  by  the  GetItem  operation.  The  data
          returned  includes  the total provisioned throughput consumed, along
          with statistics for the table and any indexes involved in the opera-
          tion.  ConsumedCapacity is only returned if the ReturnConsumedCapac-
          ity parameter was specified. For more  information,  see  Read/Write
          Capacity Mode in the Amazon DynamoDB Developer Guide .

          TableName -> (string)
              The name of the table that was affected by the operation.

          CapacityUnits -> (double)
              The total number of capacity units consumed by the operation.

          ReadCapacityUnits -> (double)
              The  total  number of read capacity units consumed by the opera-
              tion.

          WriteCapacityUnits -> (double)
              The total number of write capacity units consumed by the  opera-
              tion.

          Table -> (structure)
              The  amount  of throughput consumed on the table affected by the
              operation.

              ReadCapacityUnits -> (double)
                 The total number of read capacity units consumed on  a  table
                 or an index.

              WriteCapacityUnits -> (double)
                 The  total number of write capacity units consumed on a table
                 or an index.

              CapacityUnits -> (double)
                 The total number of capacity units consumed on a table or  an
                 index.

          LocalSecondaryIndexes -> (map)
              The  amount  of throughput consumed on each local index affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The total number of write capacity units  consumed  on  a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.

          GlobalSecondaryIndexes -> (map)
              The amount of throughput consumed on each global index  affected
              by the operation.

              key -> (string)

              value -> (structure)
                 Represents the amount of provisioned throughput capacity con-
                 sumed on a table or an index.

                 ReadCapacityUnits -> (double)
                     The total number of read capacity units consumed on a ta-
                     ble or an index.

                 WriteCapacityUnits -> (double)
                     The  total  number  of write capacity units consumed on a
                     table or an index.

                 CapacityUnits -> (double)
                     The total number of capacity units consumed on a table or
                     an index.



                                                                    GET-ITEM()
