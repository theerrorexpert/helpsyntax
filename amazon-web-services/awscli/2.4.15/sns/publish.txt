PUBLISH()                                                            PUBLISH()



NAME
       publish -

DESCRIPTION
       Sends  a  message  to an Amazon SNS topic, a text message (SMS message)
       directly to a phone number, or a message to a mobile platform  endpoint
       (when you specify the TargetArn ).

       If  you  send  a message to a topic, Amazon SNS delivers the message to
       each endpoint that is subscribed to the topic. The format of  the  mes-
       sage depends on the notification protocol for each subscribed endpoint.

       When a messageId is returned, the message is saved and Amazon SNS imme-
       diately deliverers it to subscribers.

       To  use  the  Publish  action for publishing a message to a mobile end-
       point, such as an app on a Kindle device  or  mobile  phone,  you  must
       specify the EndpointArn for the TargetArn parameter. The EndpointArn is
       returned when making a call with the CreatePlatformEndpoint action.

       For more information about formatting messages, see Send  Custom  Plat-
       form-Specific Payloads in Messages to Mobile Devices .

       WARNING:
          You  can  publish  messages only to topics and endpoints in the same
          Amazon Web Services Region.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            publish
          [--topic-arn <value>]
          [--target-arn <value>]
          [--phone-number <value>]
          --message <value>
          [--subject <value>]
          [--message-structure <value>]
          [--message-attributes <value>]
          [--message-deduplication-id <value>]
          [--message-group-id <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --topic-arn (string)
          The topic you want to publish to.

          If you don't specify a value for the TopicArn  parameter,  you  must
          specify a value for the PhoneNumber or TargetArn parameters.

       --target-arn (string)
          If  you  don't specify a value for the TargetArn parameter, you must
          specify a value for the PhoneNumber or TopicArn parameters.

       --phone-number (string)
          The phone number to which you want to deliver an  SMS  message.  Use
          E.164 format.

          If you don't specify a value for the PhoneNumber parameter, you must
          specify a value for the TargetArn or TopicArn parameters.

       --message (string)
          The message you want to send.

          If you are publishing to a topic and you want to send the same  mes-
          sage  to all transport protocols, include the text of the message as
          a String value. If you want to  send  different  messages  for  each
          transport  protocol, set the value of the MessageStructure parameter
          to json and use a JSON object for the Message parameter.

          Constraints:

          o With the exception of SMS, messages must be UTF-8 encoded  strings
            and  at  most  256  KB in size (262,144 bytes, not 262,144 charac-
            ters).

          o For SMS, each message can contain up to 140 characters. This char-
            acter  limit  depends  on the encoding schema. For example, an SMS
            message can contain 160 GSM characters, 140 ASCII  characters,  or
            70  UCS-2  characters.  If you publish a message that exceeds this
            size limit, Amazon SNS sends the  message  as  multiple  messages,
            each  fitting  within  the  size  limit. Messages aren't truncated
            mid-word but are cut off at whole-word boundaries. The total  size
            limit for a single SMS Publish action is 1,600 characters.

          JSON-specific constraints:

          o Keys  in  the  JSON  object that correspond to supported transport
            protocols must have simple JSON string values.

          o The values will be parsed (unescaped) before they are used in out-
            going messages.

          o Outbound  notifications are JSON encoded (meaning that the charac-
            ters will be reescaped for sending).

          o Values have a minimum length  of  0  (the  empty  string,  "",  is
            allowed).

          o Values  have  a maximum length bounded by the overall message size
            (so, including multiple protocols may limit message sizes).

          o Non-string values will cause the key to be ignored.

          o Keys that do not correspond to supported transport  protocols  are
            ignored.

          o Duplicate keys are not allowed.

          o Failure  to parse or validate any key or value in the message will
            cause the Publish call to return an error (no partial delivery).

       --subject (string)
          Optional parameter to be used as the "Subject" line when the message
          is  delivered  to email endpoints. This field will also be included,
          if present, in the standard JSON messages delivered  to  other  end-
          points.

          Constraints:  Subjects must be ASCII text that begins with a letter,
          number, or punctuation mark; must not include line breaks or control
          characters; and must be less than 100 characters long.

       --message-structure (string)
          Set MessageStructure to json if you want to send a different message
          for each protocol. For example, using one publish  action,  you  can
          send a short message to your SMS subscribers and a longer message to
          your email subscribers. If you set MessageStructure to  json  ,  the
          value of the Message parameter must:

          o be a syntactically valid JSON object; and

          o contain  at  least  a top-level JSON key of "default" with a value
            that is a string.

          You can define other top-level keys that define the message you want
          to send to a specific transport protocol (e.g., "http").

          Valid value: json

       --message-attributes (map)
          Message attributes for Publish action.

          Name -> (string)

          Value -> (structure)
              The  user-specified  message  attribute  value.  For string data
              types, the value attribute has the same restrictions on the con-
              tent as the message body. For more information, see Publish .

              Name,  type,  and  value must not be empty or null. In addition,
              the message body should not be empty or null. All parts  of  the
              message attribute, including name, type, and value, are included
              in the message size  restriction,  which  is  currently  256  KB
              (262,144  bytes).  For  more information, see Amazon SNS message
              attributes and Publishing to a mobile phone in  the  Amazon  SNS
              Developer Guide.

              DataType -> (string)
                 Amazon SNS supports the following logical data types: String,
                 String.Array, Number, and Binary. For more  information,  see
                 Message Attribute Data Types .

              StringValue -> (string)
                 Strings  are Unicode with UTF8 binary encoding. For a list of
                 code values, see ASCII Printable Characters .

              BinaryValue -> (blob)
                 Binary type attributes can store any binary data,  for  exam-
                 ple, compressed data, encrypted data, or images.

       Shorthand Syntax:

          KeyName1=DataType=string,StringValue=string,BinaryValue=blob,KeyName2=DataType=string,StringValue=string,BinaryValue=blob

       JSON Syntax:

          {"string": {
                "DataType": "string",
                "StringValue": "string",
                "BinaryValue": blob
              }
            ...}

       --message-deduplication-id (string)
          This parameter applies only to FIFO (first-in-first-out) topics. The
          MessageDeduplicationId can contain up to 128 alphanumeric characters
          (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~) .

          Every message must have a unique MessageDeduplicationId , which is a
          token  used  for deduplication of sent messages. If a message with a
          particular MessageDeduplicationId is sent successfully, any  message
          sent  with the same MessageDeduplicationId during the 5-minute dedu-
          plication interval is treated as a duplicate.

          If the topic has ContentBasedDeduplication set, the system generates
          a  MessageDeduplicationId based on the contents of the message. Your
          MessageDeduplicationId overrides the generated one.

       --message-group-id (string)
          This parameter applies only to FIFO (first-in-first-out) topics. The
          MessageGroupId  can  contain up to 128 alphanumeric characters (a-z,
          A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~) .

          The MessageGroupId is a tag that specifies that a message belongs to
          a  specific  message group. Messages that belong to the same message
          group are processed in a FIFO manner (however, messages in different
          message  groups might be processed out of order). Every message must
          include a MessageGroupId .

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To publish a message to a topic

       The following publish example publishes the specified  message  to  the
       specified  SNS topic. The message comes from a text file, which enables
       you to include line breaks.

          aws sns publish \
              --topic-arn "arn:aws:sns:us-west-2:123456789012:my-topic" \
              --message file://message.txt

       Contents of message.txt:

          Hello World
          Second Line

       Output:

          {
              "MessageId": "123a45b6-7890-12c3-45d6-111122223333"
          }

       Example 2: To publish an SMS message to a phone number

       The following publish example publishes the message Hello world! to the
       phone number +1-555-555-0100.

          aws sns publish \
              --message "Hello world!" \
              --phone-number +1-555-555-0100

       Output:

          {
              "MessageId": "123a45b6-7890-12c3-45d6-333322221111"
          }

OUTPUT
       MessageId -> (string)
          Unique identifier assigned to the published message.

          Length Constraint: Maximum 100 characters

       SequenceNumber -> (string)
          This response element applies only to FIFO (first-in-first-out) top-
          ics.

          The sequence number is a large, non-consecutive number  that  Amazon
          SNS  assigns  to  each  message. The length of SequenceNumber is 128
          bits. SequenceNumber continues to increase for each MessageGroupId .



                                                                     PUBLISH()
