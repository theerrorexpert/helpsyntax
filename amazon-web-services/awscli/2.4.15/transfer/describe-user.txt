DESCRIBE-USER()                                                DESCRIBE-USER()



NAME
       describe-user -

DESCRIPTION
       Describes  the  user  assigned  to  the  specific  file transfer proto-
       col-enabled server, as identified by its ServerId property.

       The response from this call returns the properties of the user  associ-
       ated with the ServerId value that was specified.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            describe-user
          --server-id <value>
          --user-name <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --server-id (string)
          A  system-assigned unique identifier for a server that has this user
          assigned.

       --user-name (string)
          The name of the user assigned to one or more servers. User names are
          part  of  the  sign-in  credentials  to  use the Amazon Web Services
          Transfer Family service and perform file transfer tasks.

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       ServerId -> (string)
          A system-assigned unique identifier for a server that has this  user
          assigned.

       User -> (structure)
          An  array  containing  the  properties  of  the user account for the
          ServerID value that you specified.

          Arn -> (string)
              Specifies the unique Amazon Resource Name  (ARN)  for  the  user
              that was requested to be described.

          HomeDirectory -> (string)
              The  landing  directory  (folder) for a user when they log in to
              the server using the client.

              A HomeDirectory example is /bucket_name/home/mydirectory .

          HomeDirectoryMappings -> (list)
              Logical directory mappings that specify what Amazon S3 or Amazon
              EFS  paths  and  keys should be visible to your user and how you
              want to make them visible. You must specify the Entry and Target
              pair,  where Entry shows how the path is made visible and Target
              is the actual Amazon S3 or Amazon EFS path. If you only  specify
              a  target, it is displayed as is. You also must ensure that your
              Amazon Web Services Identity and Access  Management  (IAM)  role
              provides  access to paths in Target . This value can only be set
              when HomeDirectoryType is set to LOGICAL .

              In most cases, you can use this value  instead  of  the  session
              policy  to  lock your user down to the designated home directory
              ("chroot "). To do this, you can set Entry to '/' and set Target
              to the HomeDirectory parameter value.

              (structure)
                 Represents  an  object  that contains entries and targets for
                 HomeDirectoryMappings .

                 The following is an Entry and Target pair example for  chroot
                 .
                     [  { "Entry:": "/", "Target": "/bucket_name/home/mydirec-
                     tory" } ]

                 NOTE:
                     If the target of a logical directory entry does not exist
                     in  Amazon  S3  or  EFS, the entry is ignored. As a work-
                     around, you can use the Amazon S3 API or EFS API to  cre-
                     ate  0  byte objects as place holders for your directory.
                     If using the CLI, use the s3api or efsapi call instead of
                     s3  or  efs  so you can use the put-object operation. For
                     example, you use  the  following:  aws  s3api  put-object
                     --bucket  bucketname  --key  path/to/folder/  . Make sure
                     that the end of the key name ends in a /  for  it  to  be
                     considered a folder.

                 Entry -> (string)
                     Represents an entry for HomeDirectoryMappings .

                 Target -> (string)
                     Represents  the map target that is used in a HomeDirecto-
                     rymapEntry .

          HomeDirectoryType -> (string)
              The type of landing directory (folder) you want your users' home
              directory  to be when they log into the server. If you set it to
              PATH , the user will see the absolute Amazon S3  bucket  or  EFS
              paths  as is in their file transfer protocol clients. If you set
              it LOGICAL , you need to provide mappings  in  the  HomeDirecto-
              ryMappings for how you want to make Amazon S3 or EFS paths visi-
              ble to your users.

          Policy -> (string)
              A session policy for your user so that you can use the same  IAM
              role  across multiple users. This policy scopes down user access
              to portions of their Amazon S3 bucket. Variables  that  you  can
              use  inside  this policy include ${Transfer:UserName} , ${Trans-
              fer:HomeDirectory} , and ${Transfer:HomeBucket} .

          PosixProfile -> (structure)
              Specifies the full POSIX identity, including  user  ID  (Uid  ),
              group  ID (Gid ), and any secondary groups IDs (SecondaryGids ),
              that controls your users' access to  your  Amazon  Elastic  File
              System (Amazon EFS) file systems. The POSIX permissions that are
              set on files and directories in your file system  determine  the
              level  of access your users get when transferring files into and
              out of your Amazon EFS file systems.

              Uid -> (long)
                 The POSIX user ID used for all EFS operations by this user.

              Gid -> (long)
                 The POSIX group ID used for all EFS operations by this  user.

              SecondaryGids -> (list)
                 The  secondary POSIX group IDs used for all EFS operations by
                 this user.

                 (long)

          Role -> (string)
              Specifies the Amazon Resource Name (ARN) of the  IAM  role  that
              controls your users' access to your Amazon S3 bucket or EFS file
              system. The policies attached to this role determine  the  level
              of  access that you want to provide your users when transferring
              files into and out of your Amazon S3 bucket or EFS file  system.
              The  IAM  role  should  also  contain  a trust relationship that
              allows the server to access your resources when  servicing  your
              users' transfer requests.

          SshPublicKeys -> (list)
              Specifies  the public key portion of the Secure Shell (SSH) keys
              stored for the described user.

              (structure)
                 Provides information about the public Secure Shell (SSH)  key
                 that  is associated with a user account for the specific file
                 transfer protocol-enabled server (as identified  by  ServerId
                 ).  The  information  returned  includes the date the key was
                 imported, the public key contents, and the public key  ID.  A
                 user  can  store more than one SSH public key associated with
                 their user name on a specific server.

                 DateImported -> (timestamp)
                     Specifies the date that the public key was added  to  the
                     user account.

                 SshPublicKeyBody -> (string)
                     Specifies  the content of the SSH public key as specified
                     by the PublicKeyId .

                 SshPublicKeyId -> (string)
                     Specifies the SshPublicKeyId parameter contains the iden-
                     tifier of the public key.

          Tags -> (list)
              Specifies the key-value pairs for the user requested. Tag can be
              used to search for and group users for a variety of purposes.

              (structure)
                 Creates a key-value pair for a specific  resource.  Tags  are
                 metadata  that you can use to search for and group a resource
                 for various purposes. You can apply tags to  servers,  users,
                 and  roles. A tag key can take more than one value. For exam-
                 ple, to group servers for accounting purposes, you might cre-
                 ate  a  tag  called  Group and assign the values Research and
                 Accounting to that group.

                 Key -> (string)
                     The name assigned to the tag that you create.

                 Value -> (string)
                     Contains one or more values that you assigned to the  key
                     name you create.

          UserName -> (string)
              Specifies  the  name  of  the  user  that  was  requested  to be
              described. User names are used for authentication purposes. This
              is the string that will be used by your user when they log in to
              your server.



                                                               DESCRIBE-USER()
