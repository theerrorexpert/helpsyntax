POST-TEXT()                                                        POST-TEXT()



NAME
       post-text -

DESCRIPTION
       Sends user input to Amazon Lex. Client applications can use this API to
       send requests to Amazon Lex at runtime. Amazon Lex then interprets  the
       user input using the machine learning model it built for the bot.

       In  response, Amazon Lex returns the next message to convey to the user
       an optional responseCard to display.  Consider  the  following  example
       messages:

       o For  a  user  input "I would like a pizza", Amazon Lex might return a
         response with a message eliciting slot data (for example, PizzaSize):
         "What size pizza would you like?"

       o After  the  user  provides all of the pizza order information, Amazon
         Lex might return a response with a message to obtain  user  confirma-
         tion "Proceed with the pizza order?".

       o After  the user replies to a confirmation prompt with a "yes", Amazon
         Lex might return a conclusion  statement:  "Thank  you,  your  cheese
         pizza has been ordered.".

       Not  all  Amazon  Lex  messages require a user response. For example, a
       conclusion statement does not require a response. Some messages require
       only a "yes" or "no" user response. In addition to the message , Amazon
       Lex provides additional context about the message in the response  that
       you  might  use to enhance client behavior, for example, to display the
       appropriate  client  user  interface.  These  are  the  slotToElicit  ,
       dialogState  ,  intentName , and slots fields in the response. Consider
       the following examples:

       o If the message is to elicit slot data, Amazon Lex returns the follow-
         ing context information:

         o dialogState set to ElicitSlot

         o intentName set to the intent name in the current context

         o slotToElicit  set to the slot name for which the message is elicit-
           ing information

         o slots set to a map of slots, configured for the intent,  with  cur-
           rently known values

       o If  the  message  is a confirmation prompt, the dialogState is set to
         ConfirmIntent and SlotToElicit is set to null.

       o If the message is a clarification prompt (configured for the  intent)
         that indicates that user intent is not understood, the dialogState is
         set to ElicitIntent and slotToElicit is set to null.

       In addition, Amazon Lex also returns your application-specific session-
       Attributes  . For more information, see Managing Conversation Context .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            post-text
          --bot-name <value>
          --bot-alias <value>
          --user-id <value>
          [--session-attributes <value>]
          [--request-attributes <value>]
          --input-text <value>
          [--active-contexts <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --bot-name (string)
          The name of the Amazon Lex bot.

       --bot-alias (string)
          The alias of the Amazon Lex bot.

       --user-id (string)
          The ID of the client application user. Amazon Lex uses this to iden-
          tify  a  user's conversation with your bot. At runtime, each request
          must contain the userID field.

          To decide the user ID to use for your application, consider the fol-
          lowing factors.

          o The  userID  field  must  not  contain any personally identifiable
            information of the user, for example, name,  personal  identifica-
            tion numbers, or other end user personal information.

          o If  you want a user to start a conversation on one device and con-
            tinue on another device, use a user-specific identifier.

          o If you want the same user to be able to have two independent  con-
            versations  on  two  different  devices,  choose a device-specific
            identifier.

          o A user can't have two independent conversations with two different
            versions of the same bot. For example, a user can't have a conver-
            sation with the PROD and BETA versions of the  same  bot.  If  you
            anticipate  that  a  user  will need to have conversation with two
            different versions, for example, while testing,  include  the  bot
            alias in the user ID to separate the two conversations.

       --session-attributes (map)
          Application-specific  information  passed  between  Amazon Lex and a
          client application.

          For more information, see Setting Session Attributes .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --request-attributes (map)
          Request-specific information passed between Amazon Lex and a  client
          application.

          The  namespace  x-amz-lex: is reserved for special attributes. Don't
          create any request attributes with the prefix x-amz-lex: .

          For more information, see Setting Request Attributes .

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --input-text (string)
          The text that the user entered (Amazon Lex interprets this text).

       --active-contexts (list)
          A list of contexts active for the request. A context  can  be  acti-
          vated  when a previous intent is fulfilled, or by including the con-
          text in the request,

          If you don't specify a list of contexts, Amazon  Lex  will  use  the
          current  list  of  contexts for the session. If you specify an empty
          list, all contexts for the session are cleared.

          (structure)
              A context is a variable that contains information about the cur-
              rent  state  of  the conversation between a user and Amazon Lex.
              Context can be set automatically by Amazon Lex when an intent is
              fulfilled,  or  it  can be set at runtime using the PutContent ,
              PutText , or PutSession operation.

              name -> (string)
                 The name of the context.

              timeToLive -> (structure)
                 The length of time or number of turns that a context  remains
                 active.

                 timeToLiveInSeconds -> (integer)
                     The  number  of seconds that the context should be active
                     after it is first  sent  in  a  PostContent  or  PostText
                     response. You can set the value between 5 and 86,400 sec-
                     onds (24 hours).

                 turnsToLive -> (integer)
                     The number of conversation turns that the context  should
                     be  active.  A  conversation  turn  is one PostContent or
                     PostText request and the corresponding response from Ama-
                     zon Lex.

              parameters -> (map)
                 State  variables  for  the current context. You can use these
                 values as default values for slots in subsequent events.

                 key -> (string)

                 value -> (string)

       Shorthand Syntax:

          name=string,timeToLive={timeToLiveInSeconds=integer,turnsToLive=integer},parameters={KeyName1=string,KeyName2=string} ...

       JSON Syntax:

          [
            {
              "name": "string",
              "timeToLive": {
                "timeToLiveInSeconds": integer,
                "turnsToLive": integer
              },
              "parameters": {"string": "string"
                ...}
            }
            ...
          ]

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       intentName -> (string)
          The current user intent that Amazon Lex is aware of.

       nluIntentConfidence -> (structure)
          Provides a score that indicates how confident Amazon Lex is that the
          returned intent is the one that matches the user's intent. The score
          is between 0.0 and 1.0. For more information, see Confidence  Scores
          .

          The  score is a relative score, not an absolute score. The score may
          change based on improvements to Amazon Lex.

          score -> (double)
              A score that indicates how  confident  Amazon  Lex  is  that  an
              intent  satisfies  the  user's  intent.  Ranges between 0.00 and
              1.00. Higher scores indicate higher confidence.

       alternativeIntents -> (list)
          One to four alternative intents that may be applicable to the user's
          intent.

          Each  alternative includes a score that indicates how confident Ama-
          zon Lex is that the intent matches the user's  intent.  The  intents
          are sorted by the confidence score.

          (structure)
              An  intent that Amazon Lex suggests satisfies the user's intent.
              Includes the name of the intent, the confidence that Amazon  Lex
              has  that  the user's intent is satisfied, and the slots defined
              for the intent.

              intentName -> (string)
                 The name of the intent that Amazon Lex suggests satisfies the
                 user's intent.

              nluIntentConfidence -> (structure)
                 Indicates  how  confident Amazon Lex is that an intent satis-
                 fies the user's intent.

                 score -> (double)
                     A score that indicates how confident Amazon Lex  is  that
                     an  intent  satisfies  the  user's intent. Ranges between
                     0.00 and 1.00. Higher scores indicate higher  confidence.

              slots -> (map)
                 The  slot  and  slot  values  associated  with  the predicted
                 intent.

                 key -> (string)

                 value -> (string)

       slots -> (map)
          The intent slots that Amazon Lex detected from the user input in the
          conversation.

          Amazon  Lex creates a resolution list containing likely values for a
          slot. The value that it returns is determined by the valueSelection-
          Strategy selected when the slot type was created or updated. If val-
          ueSelectionStrategy is set to ORIGINAL_VALUE , the value provided by
          the  user is returned, if the user value is similar to the slot val-
          ues. If valueSelectionStrategy is set to TOP_RESOLUTION  Amazon  Lex
          returns  the  first  value in the resolution list or, if there is no
          resolution list, null. If you don't specify a valueSelectionStrategy
          , the default is ORIGINAL_VALUE .

          key -> (string)

          value -> (string)

       sessionAttributes -> (map)
          A  map  of key-value pairs representing the session-specific context
          information.

          key -> (string)

          value -> (string)

       message -> (string)
          The message to convey to the user. The message  can  come  from  the
          bot's configuration or from a Lambda function.

          If  the  intent  is not configured with a Lambda function, or if the
          Lambda function  returned  Delegate  as  the  dialogAction.type  its
          response,  Amazon  Lex  decides  on  the  next  course of action and
          selects an appropriate message from the bot's configuration based on
          the  current  interaction  context. For example, if Amazon Lex isn't
          able to understand user input, it uses a clarification  prompt  mes-
          sage.

          When  you  create  an intent you can assign messages to groups. When
          messages are assigned to groups Amazon Lex returns one message  from
          each  group  in  the  response. The message field is an escaped JSON
          string containing the  messages.  For  more  information  about  the
          structure of the JSON string returned, see  msg-prompts-formats .

          If  the  Lambda  function returns a message, Amazon Lex passes it to
          the client in its response.

       sentimentResponse -> (structure)
          The sentiment expressed in and utterance.

          When the bot is configured to send utterances to  Amazon  Comprehend
          for sentiment analysis, this field contains the result of the analy-
          sis.

          sentimentLabel -> (string)
              The inferred sentiment that Amazon Comprehend  has  the  highest
              confidence in.

          sentimentScore -> (string)
              The likelihood that the sentiment was correctly inferred.

       messageFormat -> (string)
          The format of the response message. One of the following values:

          o PlainText - The message contains plain UTF-8 text.

          o CustomPayload  -  The  message  is  a custom format defined by the
            Lambda function.

          o SSML - The message contains text formatted for voice output.

          o Composite - The message contains an escaped JSON object containing
            one  or  more messages from the groups that messages were assigned
            to when the intent was created.

       dialogState -> (string)
          Identifies the current state of the  user  interaction.  Amazon  Lex
          returns  one of the following values as dialogState . The client can
          optionally use this information to customize the user interface.

          o ElicitIntent - Amazon Lex wants to elicit user intent.  For  exam-
            ple,  a user might utter an intent ("I want to order a pizza"). If
            Amazon Lex cannot infer the user intent from  this  utterance,  it
            will return this dialogState.

          o ConfirmIntent  - Amazon Lex is expecting a "yes" or "no" response.
            For example, Amazon Lex wants user confirmation before  fulfilling
            an  intent.   Instead  of  a  simple  "yes"  or "no," a user might
            respond with additional information. For example, "yes,  but  make
            it thick crust pizza" or "no, I want to order a drink". Amazon Lex
            can process such additional information (in these examples, update
            the  crust  type  slot  value, or change intent from OrderPizza to
            OrderDrink).

          o ElicitSlot - Amazon Lex is expecting a slot value for the  current
            intent.   For  example,  suppose  that  in the response Amazon Lex
            sends this message: "What size pizza  would  you  like?".  A  user
            might  reply  with the slot value (e.g., "medium"). The user might
            also provide additional information in the response (e.g., "medium
            thick crust pizza"). Amazon Lex can process such additional infor-
            mation appropriately.

          o Fulfilled - Conveys that the Lambda function  configured  for  the
            intent has successfully fulfilled the intent.

          o ReadyForFulfillment  -  Conveys that the client has to fulfill the
            intent.

          o Failed - Conveys that the conversation with the user failed.  This
            can  happen  for  various  reasons including that the user did not
            provide an appropriate response to prompts from the  service  (you
            can configure how many times Amazon Lex can prompt a user for spe-
            cific information), or the Lambda function failed to  fulfill  the
            intent.

       slotToElicit -> (string)
          If  the  dialogState  value  is ElicitSlot , returns the name of the
          slot for which Amazon Lex is eliciting a value.

       responseCard -> (structure)
          Represents the options that the user has to respond to  the  current
          prompt.  Response  Card  can come from the bot configuration (in the
          Amazon Lex console, choose the settings button next to  a  slot)  or
          from a code hook (Lambda function).

          version -> (string)
              The version of the response card format.

          contentType -> (string)
              The content type of the response.

          genericAttachments -> (list)
              An array of attachment objects representing options.

              (structure)
                 Represents  an  option  rendered to the user when a prompt is
                 shown. It could be an image, a button, a link, or text.

                 title -> (string)
                     The title of the option.

                 subTitle -> (string)
                     The subtitle shown below the title.

                 attachmentLinkUrl -> (string)
                     The URL of an attachment to the response card.

                 imageUrl -> (string)
                     The URL of an image that is displayed to the user.

                 buttons -> (list)
                     The list of options to show to the user.

                     (structure)
                        Represents an option to be shown on the  client  plat-
                        form (Facebook, Slack, etc.)

                        text -> (string)
                            Text that is visible to the user on the button.

                        value -> (string)
                            The  value  sent to Amazon Lex when a user chooses
                            the button.  For  example,  consider  button  text
                            "NYC." When the user chooses the button, the value
                            sent can be "New York City."

       sessionId -> (string)
          A unique identifier for the session.

       botVersion -> (string)
          The version of the bot that responded to the conversation.  You  can
          use  this  information  to help determine if one version of a bot is
          performing better than another version.

       activeContexts -> (list)
          A list of active contexts for the session. A context can be set when
          an intent is fulfilled or by calling the PostContent , PostText , or
          PutSession operation.

          You can use a context to control the intents that can follow  up  an
          intent, or to modify the operation of your application.

          (structure)
              A context is a variable that contains information about the cur-
              rent state of the conversation between a user  and  Amazon  Lex.
              Context can be set automatically by Amazon Lex when an intent is
              fulfilled, or it can be set at runtime using  the  PutContent  ,
              PutText , or PutSession operation.

              name -> (string)
                 The name of the context.

              timeToLive -> (structure)
                 The  length of time or number of turns that a context remains
                 active.

                 timeToLiveInSeconds -> (integer)
                     The number of seconds that the context should  be  active
                     after  it  is  first  sent  in  a PostContent or PostText
                     response. You can set the value between 5 and 86,400 sec-
                     onds (24 hours).

                 turnsToLive -> (integer)
                     The  number of conversation turns that the context should
                     be active. A conversation  turn  is  one  PostContent  or
                     PostText request and the corresponding response from Ama-
                     zon Lex.

              parameters -> (map)
                 State variables for the current context. You  can  use  these
                 values as default values for slots in subsequent events.

                 key -> (string)

                 value -> (string)



                                                                   POST-TEXT()
