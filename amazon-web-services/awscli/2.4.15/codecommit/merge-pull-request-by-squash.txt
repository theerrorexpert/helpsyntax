MERGE-PULL-REQUEST-BY-SQUASH()                  MERGE-PULL-REQUEST-BY-SQUASH()



NAME
       merge-pull-request-by-squash -

DESCRIPTION
       Attempts  to  merge the source commit of a pull request into the speci-
       fied destination branch for that pull request at the  specified  commit
       using  the squash merge strategy. If the merge is successful, it closes
       the pull request.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            merge-pull-request-by-squash
          --pull-request-id <value>
          --repository-name <value>
          [--source-commit-id <value>]
          [--conflict-detail-level <value>]
          [--conflict-resolution-strategy <value>]
          [--commit-message <value>]
          [--author-name <value>]
          [--email <value>]
          [--keep-empty-folders | --no-keep-empty-folders]
          [--conflict-resolution <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --pull-request-id (string)
          The system-generated ID of the pull request. To  get  this  ID,  use
          ListPullRequests .

       --repository-name (string)
          The name of the repository where the pull request was created.

       --source-commit-id (string)
          The  full  commit  ID  of the original or updated commit in the pull
          request source branch. Pass this value  if  you  want  an  exception
          thrown if the current commit ID of the tip of the source branch does
          not match this commit ID.

       --conflict-detail-level (string)
          The level of conflict detail to use.  If  unspecified,  the  default
          FILE_LEVEL is used, which returns a not-mergeable result if the same
          file has differences in both branches. If LINE_LEVEL is specified, a
          conflict  is  considered  not  mergeable  if  the  same file in both
          branches has differences on the same line.

          Possible values:

          o FILE_LEVEL

          o LINE_LEVEL

       --conflict-resolution-strategy (string)
          Specifies which branch to use when resolving conflicts,  or  whether
          to attempt automatically merging two versions of a file. The default
          is NONE, which requires any conflicts to be resolved manually before
          the merge operation is successful.

          Possible values:

          o NONE

          o ACCEPT_SOURCE

          o ACCEPT_DESTINATION

          o AUTOMERGE

       --commit-message (string)
          The  commit  message  to  include  in the commit information for the
          merge.

       --author-name (string)
          The name of the author who created the commit. This  information  is
          used as both the author and committer for the commit.

       --email (string)
          The  email address of the person merging the branches. This informa-
          tion is used in the commit information for the merge.

       --keep-empty-folders | --no-keep-empty-folders (boolean)
          If the commit contains deletions, whether to keep a folder or folder
          structure  if  the changes leave the folders empty. If true, a .git-
          keep file is created for empty folders. The default is false.

       --conflict-resolution (structure)
          If AUTOMERGE is the conflict resolution strategy, a list  of  inputs
          to use when resolving conflicts during a merge.

          replaceContents -> (list)
              Files  to  have  content  replaced as part of the merge conflict
              resolution.

              (structure)
                 Information about a replacement content entry in the conflict
                 of a merge or pull request operation.

                 filePath -> (string)
                     The path of the conflicting file.

                 replacementType -> (string)
                     The  replacement  type  to  use  when  determining how to
                     resolve the conflict.

                 content -> (blob)
                     The base-64 encoded content to use when  the  replacement
                     type is USE_NEW_CONTENT.

                 fileMode -> (string)
                     The file mode to apply during conflict resoltion.

          deleteFiles -> (list)
              Files to be deleted as part of the merge conflict resolution.

              (structure)
                 A file that is deleted as part of a commit.

                 filePath -> (string)
                     The  full  path  of the file to be deleted, including the
                     name of the file.

          setFileModes -> (list)
              File modes that are set as part of the  merge  conflict  resolu-
              tion.

              (structure)
                 Information about the file mode changes.

                 filePath -> (string)
                     The  full  path  to  the  file, including the name of the
                     file.

                 fileMode -> (string)
                     The file mode for the file.

       Shorthand Syntax:

          replaceContents=[{filePath=string,replacementType=string,content=blob,fileMode=string},{filePath=string,replacementType=string,content=blob,fileMode=string}],deleteFiles=[{filePath=string},{filePath=string}],setFileModes=[{filePath=string,fileMode=string},{filePath=string,fileMode=string}]

       JSON Syntax:

          {
            "replaceContents": [
              {
                "filePath": "string",
                "replacementType": "KEEP_BASE"|"KEEP_SOURCE"|"KEEP_DESTINATION"|"USE_NEW_CONTENT",
                "content": blob,
                "fileMode": "EXECUTABLE"|"NORMAL"|"SYMLINK"
              }
              ...
            ],
            "deleteFiles": [
              {
                "filePath": "string"
              }
              ...
            ],
            "setFileModes": [
              {
                "filePath": "string",
                "fileMode": "EXECUTABLE"|"NORMAL"|"SYMLINK"
              }
              ...
            ]
          }

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To merge a pull request using the squash merge strategy

       The following merge-pull-request-by-squash example  merges  and  closes
       the  specified  pull  request using the conflict resolution strategy of
       ACCEPT_SOURCE in a repository named MyDemoRepo.

          aws codecommit merge-pull-request-by-squash \
              --pull-request-id 47 \
              --source-commit-id 99132ab0EXAMPLE \
              --repository-name MyDemoRepo \
              --conflict-detail-level LINE_LEVEL \
              --conflict-resolution-strategy ACCEPT_SOURCE \
              --name "Jorge Souza" --email "jorge_souza@example.com" \
              --commit-message "Merging pull request 47 by squash and accepting source in merge conflicts"

       Output:

          {
              "pullRequest": {
                  "approvalRules": [
                      {
                          "approvalRuleContent": "{\"Version\": \"2018-11-08\",\"DestinationReferences\": [\"refs/heads/main\"],\"Statements\": [{\"Type\": \"Approvers\",\"NumberOfApprovalsNeeded\": 2,\"ApprovalPoolMembers\": [\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\"]}]}",
                          "approvalRuleId": "dd8b17fe-EXAMPLE",
                          "approvalRuleName": "2-approver-rule-for-main",
                          "creationDate": 1571356106.936,
                          "lastModifiedDate": 571356106.936,
                          "lastModifiedUser": "arn:aws:iam::123456789012:user/Mary_Major",
                          "originApprovalRuleTemplate": {
                              "approvalRuleTemplateId": "dd8b17fe-EXAMPLE",
                              "approvalRuleTemplateName": "2-approver-rule-for-main"
                          },
                          "ruleContentSha256": "4711b576EXAMPLE"
                      }
                  ],
                  "authorArn": "arn:aws:iam::123456789012:user/Li_Juan",
                  "clientRequestToken": "",
                  "creationDate": 1508530823.142,
                  "description": "Review the latest changes and updates to the global variables",
                  "lastActivityDate": 1508887223.155,
                  "pullRequestId": "47",
                  "pullRequestStatus": "CLOSED",
                  "pullRequestTargets": [
                      {
                          "destinationCommit": "9f31c968EXAMPLE",
                          "destinationReference": "refs/heads/main",
                          "mergeMetadata": {
                              "isMerged": true,
                              "mergedBy": "arn:aws:iam::123456789012:user/Mary_Major"
                          },
                          "repositoryName": "MyDemoRepo",
                          "sourceCommit": "99132ab0EXAMPLE",
                          "sourceReference": "refs/heads/variables-branch"
                      }
                  ],
                  "title": "Consolidation of global variables"
              }
          }

       For more information, see Merge a Pull Request in  the  AWS  CodeCommit
       User Guide.

OUTPUT
       pullRequest -> (structure)
          Returns information about a pull request.

          pullRequestId -> (string)
              The system-generated ID of the pull request.

          title -> (string)
              The  user-defined  title of the pull request. This title is dis-
              played in the list of pull requests to other repository users.

          description -> (string)
              The user-defined description of the pull request. This  descrip-
              tion  can  be  used to clarify what should be reviewed and other
              details of the request.

          lastActivityDate -> (timestamp)
              The day and time of the last user or system activity on the pull
              request, in timestamp format.

          creationDate -> (timestamp)
              The  date  and  time the pull request was originally created, in
              timestamp format.

          pullRequestStatus -> (string)
              The status of the pull request. Pull  request  status  can  only
              change from OPEN to CLOSED .

          authorArn -> (string)
              The  Amazon Resource Name (ARN) of the user who created the pull
              request.

          pullRequestTargets -> (list)
              The targets of the pull request, including the source branch and
              destination branch for the pull request.

              (structure)
                 Returns information about a pull request target.

                 repositoryName -> (string)
                     The name of the repository that contains the pull request
                     source and destination branches.

                 sourceReference -> (string)
                     The branch of the repository that  contains  the  changes
                     for the pull request. Also known as the source branch.

                 destinationReference -> (string)
                     The  branch  of  the  repository  where  the pull request
                     changes are merged. Also known as the destination branch.

                 destinationCommit -> (string)
                     The  full  commit  ID  that is the tip of the destination
                     branch. This is the commit where the pull request was  or
                     will be merged.

                 sourceCommit -> (string)
                     The  full  commit ID of the tip of the source branch used
                     to create the pull request. If the pull request branch is
                     updated  by  a  push  while the pull request is open, the
                     commit ID changes to reflect the new tip of the branch.

                 mergeBase -> (string)
                     The commit ID of the most recent commit that  the  source
                     branch and the destination branch have in common.

                 mergeMetadata -> (structure)
                     Returns  metadata about the state of the merge, including
                     whether the merge has been made.

                     isMerged -> (boolean)
                        A Boolean value indicating whether the merge has  been
                        made.

                     mergedBy -> (string)
                        The  Amazon Resource Name (ARN) of the user who merged
                        the branches.

                     mergeCommitId -> (string)
                        The commit ID for the merge commit, if any.

                     mergeOption -> (string)
                        The merge strategy used in the merge.

          clientRequestToken -> (string)
              A unique, client-generated idempotency token that, when provided
              in  a  request,  ensures  the  request cannot be repeated with a
              changed parameter. If a request is received with the same param-
              eters  and  a token is included, the request returns information
              about the initial request that used that token.

          revisionId -> (string)
              The system-generated revision ID for the pull request.

          approvalRules -> (list)
              The approval rules applied to the pull request.

              (structure)
                 Returns information about an approval rule.

                 approvalRuleId -> (string)
                     The system-generated ID of the approval rule.

                 approvalRuleName -> (string)
                     The name of the approval rule.

                 approvalRuleContent -> (string)
                     The content of the approval rule.

                 ruleContentSha256 -> (string)
                     The  SHA-256  hash  signature  for  the  content  of  the
                     approval rule.

                 lastModifiedDate -> (timestamp)
                     The  date the approval rule was most recently changed, in
                     timestamp format.

                 creationDate -> (timestamp)
                     The date the approval rule was created, in timestamp for-
                     mat.

                 lastModifiedUser -> (string)
                     The  Amazon  Resource Name (ARN) of the user who made the
                     most recent changes to the approval rule.

                 originApprovalRuleTemplate -> (structure)
                     The approval rule template used to create the rule.

                     approvalRuleTemplateId -> (string)
                        The ID of the template that created the approval rule.

                     approvalRuleTemplateName -> (string)
                        The  name  of  the  template that created the approval
                        rule.



                                                MERGE-PULL-REQUEST-BY-SQUASH()
