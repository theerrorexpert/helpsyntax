CREATE-UNREFERENCED-MERGE-COMMIT()          CREATE-UNREFERENCED-MERGE-COMMIT()



NAME
       create-unreferenced-merge-commit -

DESCRIPTION
       Creates  an  unreferenced  commit that represents the result of merging
       two branches using a specified merge strategy. This can help you deter-
       mine the outcome of a potential merge. This API cannot be used with the
       fast-forward merge strategy because that strategy  does  not  create  a
       merge commit.

       NOTE:
          This  unreferenced  merge commit can only be accessed using the Get-
          Commit API or through git commands such as git  fetch.  To  retrieve
          this  commit,  you must specify its commit ID or otherwise reference
          it.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-unreferenced-merge-commit
          --repository-name <value>
          --source-commit-specifier <value>
          --destination-commit-specifier <value>
          --merge-option <value>
          [--conflict-detail-level <value>]
          [--conflict-resolution-strategy <value>]
          [--author-name <value>]
          [--email <value>]
          [--commit-message <value>]
          [--keep-empty-folders | --no-keep-empty-folders]
          [--conflict-resolution <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --repository-name (string)
          The name of the repository where you want to create the unreferenced
          merge commit.

       --source-commit-specifier (string)
          The  branch,  tag,  HEAD, or other fully qualified reference used to
          identify a commit (for example, a branch name or a full commit  ID).

       --destination-commit-specifier (string)
          The  branch,  tag,  HEAD, or other fully qualified reference used to
          identify a commit (for example, a branch name or a full commit  ID).

       --merge-option (string)
          The merge option or strategy you want to use to merge the code.

          Possible values:

          o FAST_FORWARD_MERGE

          o SQUASH_MERGE

          o THREE_WAY_MERGE

       --conflict-detail-level (string)
          The  level  of  conflict  detail to use. If unspecified, the default
          FILE_LEVEL is used, which returns a not-mergeable result if the same
          file has differences in both branches. If LINE_LEVEL is specified, a
          conflict is considered not  mergeable  if  the  same  file  in  both
          branches has differences on the same line.

          Possible values:

          o FILE_LEVEL

          o LINE_LEVEL

       --conflict-resolution-strategy (string)
          Specifies  which  branch to use when resolving conflicts, or whether
          to attempt automatically merging two versions of a file. The default
          is NONE, which requires any conflicts to be resolved manually before
          the merge operation is successful.

          Possible values:

          o NONE

          o ACCEPT_SOURCE

          o ACCEPT_DESTINATION

          o AUTOMERGE

       --author-name (string)
          The name of the author who created  the  unreferenced  commit.  This
          information is used as both the author and committer for the commit.

       --email (string)
          The email address for the person who created the  unreferenced  com-
          mit.

       --commit-message (string)
          The commit message for the unreferenced commit.

       --keep-empty-folders | --no-keep-empty-folders (boolean)
          If the commit contains deletions, whether to keep a folder or folder
          structure if the changes leave the folders empty. If this is  speci-
          fied  as  true,  a  .gitkeep  file is created for empty folders. The
          default is false.

       --conflict-resolution (structure)
          If AUTOMERGE is the conflict resolution strategy, a list  of  inputs
          to use when resolving conflicts during a merge.

          replaceContents -> (list)
              Files  to  have  content  replaced as part of the merge conflict
              resolution.

              (structure)
                 Information about a replacement content entry in the conflict
                 of a merge or pull request operation.

                 filePath -> (string)
                     The path of the conflicting file.

                 replacementType -> (string)
                     The  replacement  type  to  use  when  determining how to
                     resolve the conflict.

                 content -> (blob)
                     The base-64 encoded content to use when  the  replacement
                     type is USE_NEW_CONTENT.

                 fileMode -> (string)
                     The file mode to apply during conflict resoltion.

          deleteFiles -> (list)
              Files to be deleted as part of the merge conflict resolution.

              (structure)
                 A file that is deleted as part of a commit.

                 filePath -> (string)
                     The  full  path  of the file to be deleted, including the
                     name of the file.

          setFileModes -> (list)
              File modes that are set as part of the  merge  conflict  resolu-
              tion.

              (structure)
                 Information about the file mode changes.

                 filePath -> (string)
                     The  full  path  to  the  file, including the name of the
                     file.

                 fileMode -> (string)
                     The file mode for the file.

       Shorthand Syntax:

          replaceContents=[{filePath=string,replacementType=string,content=blob,fileMode=string},{filePath=string,replacementType=string,content=blob,fileMode=string}],deleteFiles=[{filePath=string},{filePath=string}],setFileModes=[{filePath=string,fileMode=string},{filePath=string,fileMode=string}]

       JSON Syntax:

          {
            "replaceContents": [
              {
                "filePath": "string",
                "replacementType": "KEEP_BASE"|"KEEP_SOURCE"|"KEEP_DESTINATION"|"USE_NEW_CONTENT",
                "content": blob,
                "fileMode": "EXECUTABLE"|"NORMAL"|"SYMLINK"
              }
              ...
            ],
            "deleteFiles": [
              {
                "filePath": "string"
              }
              ...
            ],
            "setFileModes": [
              {
                "filePath": "string",
                "fileMode": "EXECUTABLE"|"NORMAL"|"SYMLINK"
              }
              ...
            ]
          }

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To create an unreferenced commit that represents the result of  merging
       two commit specifiers

       The following create-unreferenced-merge-commit example creates a commit
       that represents the results of a merge between a  source  branch  named
       bugfix-1234   with   a   destination   branch   named  main  using  the
       THREE_WAY_MERGE strategy in a repository named MyDemoRepo.

          aws codecommit create-unreferenced-merge-commit \
              --source-commit-specifier bugfix-1234 \
              --destination-commit-specifier main \
              --merge-option THREE_WAY_MERGE \
              --repository-name MyDemoRepo \
              --name "Maria Garcia" \
              --email "maria_garcia@example.com" \
              --commit-message "Testing the results of this merge."

       Output:

          {
              "commitId": "4f178133EXAMPLE",
              "treeId": "389765daEXAMPLE"
          }

       For more information, see Resolve Conflicts in a Pull  Request  in  the
       AWS CodeCommit User Guide.

OUTPUT
       commitId -> (string)
          The full commit ID of the commit that contains your merge results.

       treeId -> (string)
          The  full  SHA-1 pointer of the tree information for the commit that
          contains the merge results.



                                            CREATE-UNREFERENCED-MERGE-COMMIT()
