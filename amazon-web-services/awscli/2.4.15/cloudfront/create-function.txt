CREATE-FUNCTION()                                            CREATE-FUNCTION()



NAME
       create-function -

DESCRIPTION
       Creates a CloudFront function.

       To create a function, you provide the function code and some configura-
       tion information about the function. The response  contains  an  Amazon
       Resource Name (ARN) that uniquely identifies the function.

       When  you  create  a  function,  its  in the DEVELOPMENT stage. In this
       stage, you can test the function with TestFunction , and update it with
       UpdateFunction .

       When  youre  ready to use your function with a CloudFront distribution,
       use PublishFunction to copy the function from the DEVELOPMENT stage  to
       LIVE  .  When  its live, you can attach the function to a distributions
       cache behavior, using the functions ARN.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-function
          --name <value>
          --function-config <value>
          --function-code <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --name (string)
          A name to identify the function.

       --function-config (structure)
          Configuration information about the function, including an  optional
          comment and the functions runtime.

          Comment -> (string)
              A comment to describe the function.

          Runtime -> (string)
              The  functions  runtime  environment.  The  only  valid value is
              cloudfront-js-1.0 .

       Shorthand Syntax:

          Comment=string,Runtime=string

       JSON Syntax:

          {
            "Comment": "string",
            "Runtime": "cloudfront-js-1.0"
          }

       --function-code (blob)
          The function code. For more information about writing  a  CloudFront
          function,  see Writing function code for CloudFront Functions in the
          Amazon CloudFront Developer Guide .

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       FunctionSummary -> (structure)
          Contains configuration information and metadata about  a  CloudFront
          function.

          Name -> (string)
              The name of the CloudFront function.

          Status -> (string)
              The status of the CloudFront function.

          FunctionConfig -> (structure)
              Contains  configuration information about a CloudFront function.

              Comment -> (string)
                 A comment to describe the function.

              Runtime -> (string)
                 The functions runtime environment. The only  valid  value  is
                 cloudfront-js-1.0 .

          FunctionMetadata -> (structure)
              Contains metadata about a CloudFront function.

              FunctionARN -> (string)
                 The  Amazon  Resource  Name  (ARN)  of  the function. The ARN
                 uniquely identifies the function.

              Stage -> (string)
                 The stage that the function is in, either DEVELOPMENT or LIVE
                 .

                 When a function is in the DEVELOPMENT stage, you can test the
                 function with TestFunction , and update it  with  UpdateFunc-
                 tion .

                 When  a  function  is  in  the LIVE stage, you can attach the
                 function to a distributions cache behavior, using  the  func-
                 tions ARN.

              CreatedTime -> (timestamp)
                 The date and time when the function was created.

              LastModifiedTime -> (timestamp)
                 The  date  and  time  when  the  function  was  most recently
                 updated.

       Location -> (string)
          The URL of the CloudFront function. Use the URL to manage the  func-
          tion with the CloudFront API.

       ETag -> (string)
          The  version  identifier  for  the current version of the CloudFront
          function.



                                                             CREATE-FUNCTION()
