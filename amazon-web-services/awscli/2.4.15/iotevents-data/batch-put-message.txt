BATCH-PUT-MESSAGE()                                        BATCH-PUT-MESSAGE()



NAME
       batch-put-message -

DESCRIPTION
       Sends  a set of messages to the IoT Events system. Each message payload
       is transformed into the input you specify ("inputName" )  and  ingested
       into  any  detectors  that monitor that input. If multiple messages are
       sent, the order in which the messages are processed  isn't  guaranteed.
       To  guarantee  ordering,  you must send messages one at a time and wait
       for a successful response.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            batch-put-message
          --messages <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --messages (list)
          The list of messages to send. Each message has the following format:
          '{   "messageId":   "string",   "inputName":   "string",  "payload":
          "string"}'

          (structure)
              Information about a message.

              messageId -> (string)
                 The ID to assign to the message. Within each batch sent, each
                 "messageId" must be unique.

              inputName -> (string)
                 The  name  of  the  input  into  which the message payload is
                 transformed.

              payload -> (blob)
                 The payload of the message. This can be a JSON  string  or  a
                 Base-64-encoded  string  representing  binary  data (in which
                 case you must decode it).

              timestamp -> (structure)
                 The timestamp associated with the message.

                 timeInMillis -> (long)
                     The value of the timestamp, in the Unix epoch format.

       Shorthand Syntax:

          messageId=string,inputName=string,payload=blob,timestamp={timeInMillis=long} ...

       JSON Syntax:

          [
            {
              "messageId": "string",
              "inputName": "string",
              "payload": blob,
              "timestamp": {
                "timeInMillis": long
              }
            }
            ...
          ]

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To send messages (inputs) to AWS IoT Events

       The following batch-put-message example sends a set of messages to  the
       AWS  IoT  Events  system.  Each message payload is transformed into the
       input you specify ( inputName ) and ingested into  any  detectors  that
       monitor  that  input. If multiple messages are sent, the order in which
       the messages are processed isn't guaranteed. To guarantee ordering, you
       must send messages one at a time and wait for a successful response.

          aws iotevents-data batch-put-message \
              --cli-input-json file://highPressureMessage.json

       Contents of highPressureMessage.json:

          {
              "messages": [
                  {
                      "messageId": "00001",
                      "inputName": "PressureInput",
                      "payload": "{\"motorid\": \"Fulton-A32\", \"sensorData\": {\"pressure\": 80, \"temperature\": 39} }"
                  }
              ]
          }

       Output:

          {
              "BatchPutMessageErrorEntries": []
          }

       For  more information, see BatchPutMessage in the AWS IoT Events Devel-
       oper Guide*.

OUTPUT
       BatchPutMessageErrorEntries -> (list)
          A list of any errors encountered when sending the messages.

          (structure)
              Contains information about the errors encountered.

              messageId -> (string)
                 The ID of the message that caused the error. (See  the  value
                 corresponding   to  the  "messageId"  key  in  the  "message"
                 object.)

              errorCode -> (string)
                 The error code.

              errorMessage -> (string)
                 A message that describes the error.



                                                           BATCH-PUT-MESSAGE()
