DEPLOY()                                                              DEPLOY()



NAME
       deploy -

DESCRIPTION
       AWS  CodeDeploy  is  a  deployment  service  that automates application
       deployments to Amazon EC2 instances, on-premises instances  running  in
       your  own facility, serverless AWS Lambda functions, or applications in
       an Amazon ECS service.

       You can deploy a nearly unlimited variety of application content,  such
       as  an  updated  Lambda function, updated applications in an Amazon ECS
       service, code, web  and  configuration  files,  executables,  packages,
       scripts,  multimedia files, and so on. AWS CodeDeploy can deploy appli-
       cation content stored in Amazon S3  buckets,  GitHub  repositories,  or
       Bitbucket  repositories. You do not need to make changes to your exist-
       ing code before you can use AWS CodeDeploy.

       AWS CodeDeploy makes it easier for you to rapidly release new features,
       helps you avoid downtime during application deployment, and handles the
       complexity of updating your applications, without  many  of  the  risks
       associated with error-prone manual deployments.
          AWS CodeDeploy Components

       Use  the  information in this guide to help you work with the following
       AWS CodeDeploy components:

       o Application : A name that uniquely  identifies  the  application  you
         want  to  deploy. AWS CodeDeploy uses this name, which functions as a
         container, to ensure the correct combination of revision,  deployment
         configuration,  and  deployment group are referenced during a deploy-
         ment.

       o Deployment group : A set of individual instances,  CodeDeploy  Lambda
         deployment  configuration settings, or an Amazon ECS service and net-
         work details. A Lambda deployment group specifies how to route  traf-
         fic  to  a new version of a Lambda function. An Amazon ECS deployment
         group specifies the service created in Amazon ECS to deploy,  a  load
         balancer,  and a listener to reroute production traffic to an updated
         containerized application. An EC2/On-premises deployment  group  con-
         tains  individually  tagged instances, Amazon EC2 instances in Amazon
         EC2 Auto Scaling groups, or both. All deployment groups  can  specify
         optional trigger, alarm, and rollback settings.

       o Deployment  configuration  : A set of deployment rules and deployment
         success and failure  conditions  used  by  AWS  CodeDeploy  during  a
         deployment.

       o Deployment  :  The  process  and  the components used when updating a
         Lambda function, a containerized application in an  Amazon  ECS  ser-
         vice, or of installing content on one or more instances.

       o Application revisions : For an AWS Lambda deployment, this is an App-
         Spec file that specifies the Lambda function to be updated and one or
         more functions to validate deployment lifecycle events. For an Amazon
         ECS deployment, this is an AppSpec file that specifies the Amazon ECS
         task  definition,  container,  and  port  where production traffic is
         rerouted. For an EC2/On-premises deployment, this is an archive  file
         that  contains source contentsource code, webpages, executable files,
         and deployment scriptsalong  with  an  AppSpec  file.  Revisions  are
         stored  in Amazon S3 buckets or GitHub repositories. For Amazon S3, a
         revision is uniquely identified by its Amazon S3 object key  and  its
         ETag, version, or both. For GitHub, a revision is uniquely identified
         by its commit ID.

       This guide also contains information to help you get details about  the
       instances  in your deployments, to make on-premises instances available
       for AWS CodeDeploy deployments, to get details about a Lambda  function
       deployment, and to get details about Amazon ECS service deployments.
          AWS CodeDeploy Information Resources

       o AWS CodeDeploy User Guide

       o AWS CodeDeploy API Reference Guide

       o AWS CLI Reference for AWS CodeDeploy

       o AWS CodeDeploy Developer Forum

AVAILABLE COMMANDS
       o add-tags-to-on-premises-instances

       o batch-get-application-revisions

       o batch-get-applications

       o batch-get-deployment-groups

       o batch-get-deployment-targets

       o batch-get-deployments

       o batch-get-on-premises-instances

       o continue-deployment

       o create-application

       o create-deployment

       o create-deployment-config

       o create-deployment-group

       o delete-application

       o delete-deployment-config

       o delete-deployment-group

       o delete-git-hub-account-token

       o delete-resources-by-external-id

       o deregister

       o deregister-on-premises-instance

       o get-application

       o get-application-revision

       o get-deployment

       o get-deployment-config

       o get-deployment-group

       o get-deployment-target

       o get-on-premises-instance

       o help

       o install

       o list-application-revisions

       o list-applications

       o list-deployment-configs

       o list-deployment-groups

       o list-deployment-targets

       o list-deployments

       o list-git-hub-account-token-names

       o list-on-premises-instances

       o list-tags-for-resource

       o push

       o put-lifecycle-event-hook-execution-status

       o register

       o register-application-revision

       o register-on-premises-instance

       o remove-tags-from-on-premises-instances

       o stop-deployment

       o tag-resource

       o uninstall

       o untag-resource

       o update-application

       o update-deployment-group

       o wait



                                                                      DEPLOY()
