CREATE-ALARM-MODEL()                                      CREATE-ALARM-MODEL()



NAME
       create-alarm-model -

DESCRIPTION
       Creates  an  alarm  model to monitor an AWS IoT Events input attribute.
       You can use the alarm to get notified when the value is outside a spec-
       ified range. For more information, see Create an alarm model in the AWS
       IoT Events Developer Guide .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-alarm-model
          --alarm-model-name <value>
          [--alarm-model-description <value>]
          --role-arn <value>
          [--tags <value>]
          [--key <value>]
          [--severity <value>]
          --alarm-rule <value>
          [--alarm-notification <value>]
          [--alarm-event-actions <value>]
          [--alarm-capabilities <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --alarm-model-name (string)
          A unique name that helps you identify the  alarm  model.  You  can't
          change this name after you create the alarm model.

       --alarm-model-description (string)
          A description that tells you what the alarm model detects.

       --role-arn (string)
          The ARN of the IAM role that allows the alarm to perform actions and
          access AWS resources. For  more  information,  see  Amazon  Resource
          Names (ARNs) in the AWS General Reference .

       --tags (list)
          A list of key-value pairs that contain metadata for the alarm model.
          The tags help you manage the alarm model. For more information,  see
          Tagging  your  AWS IoT Events resources in the AWS IoT Events Devel-
          oper Guide .

          You can create up to 50 tags for one alarm model.

          (structure)
              Metadata that can be used to manage the resource.

              key -> (string)
                 The tag's key.

              value -> (string)
                 The tag's value.

       Shorthand Syntax:

          key=string,value=string ...

       JSON Syntax:

          [
            {
              "key": "string",
              "value": "string"
            }
            ...
          ]

       --key (string)
          An input attribute used as a key to create an alarm. AWS IoT  Events
          routes inputs associated with this key to the alarm.

       --severity (integer)
          A  non-negative  integer  that  reflects  the  severity level of the
          alarm.

       --alarm-rule (structure)
          Defines when your alarm is invoked.

          simpleRule -> (structure)
              A rule that compares an input  property  value  to  a  threshold
              value with a comparison operator.

              inputProperty -> (string)
                 The  value  on  the left side of the comparison operator. You
                 can specify an AWS IoT Events input  attribute  as  an  input
                 property.

              comparisonOperator -> (string)
                 The comparison operator.

              threshold -> (string)
                 The  value  on the right side of the comparison operator. You
                 can enter a  number  or  specify  an  AWS  IoT  Events  input
                 attribute.

       Shorthand Syntax:

          simpleRule={inputProperty=string,comparisonOperator=string,threshold=string}

       JSON Syntax:

          {
            "simpleRule": {
              "inputProperty": "string",
              "comparisonOperator": "GREATER"|"GREATER_OR_EQUAL"|"LESS"|"LESS_OR_EQUAL"|"EQUAL"|"NOT_EQUAL",
              "threshold": "string"
            }
          }

       --alarm-notification (structure)
          Contains information about one or more notification actions.

          notificationActions -> (list)
              Contains  the  notification settings of an alarm model. The set-
              tings apply to all alarms that were created based on this  alarm
              model.

              (structure)
                 Contains  the  notification  settings  of an alarm model. The
                 settings apply to all alarms that were created based on  this
                 alarm model.

                 action -> (structure)
                     Specifies  an AWS Lambda function to manage alarm notifi-
                     cations. You can create one or use the AWS  Lambda  func-
                     tion provided by AWS IoT Events .

                     lambdaAction -> (structure)
                        Calls  a Lambda function, passing in information about
                        the detector model instance and the event  that  trig-
                        gered the action.

                        functionArn -> (string)
                            The ARN of the Lambda function that is executed.

                        payload -> (structure)
                            You can configure the action payload when you send
                            a message to a Lambda function.

                            contentExpression -> (string)
                               The content of  the  payload.  You  can  use  a
                               string  expression that includes quoted strings
                               ('<string>'  ),   variables   ($variable.<vari-
                               able-name>        ),        input        values
                               ($input.<input-name>.<path-to-datum> ),  string
                               concatenations, and quoted strings that contain
                               ${} as the  content.  The  recommended  maximum
                               size of a content expression is 1 KB.

                            type -> (string)
                               The  value  of  the  payload type can be either
                               STRING or JSON .

                 smsConfigurations -> (list)
                     Contains the configuration information of  SMS  notifica-
                     tions.

                     (structure)
                        Contains  the configuration information of SMS notifi-
                        cations.

                        senderId -> (string)
                            The sender ID.

                        additionalMessage -> (string)
                            The message that you want to send. The message can
                            be up to 200 characters.

                        recipients -> (list)
                            Specifies  one  or more recipients who receive the
                            message.

                            WARNING:
                               You must add the users that  receive  SMS  mes-
                               sages to your AWS SSO store .

                            (structure)
                               The  information that identifies the recipient.

                               ssoIdentity -> (structure)
                                   The AWS Single Sign-On (AWS SSO)  authenti-
                                   cation information.

                                   identityStoreId -> (string)
                                      The ID of the AWS SSO identity store.

                                   userId -> (string)
                                      The user ID.

                 emailConfigurations -> (list)
                     Contains the configuration information of email notifica-
                     tions.

                     (structure)
                        Contains the configuration information of email  noti-
                        fications.

                        from -> (string)
                            The email address that sends emails.

                            WARNING:
                               If  you  use  the  AWS  IoT  Events managed AWS
                               Lambda function to manage your emails, you must
                               verify  the  email address that sends emails in
                               Amazon SES .

                        content -> (structure)
                            Contains the subject and message of an email.

                            subject -> (string)
                               The subject of the email.

                            additionalMessage -> (string)
                               The message that you want to send. The  message
                               can be up to 200 characters.

                        recipients -> (structure)
                            Contains the information of one or more recipients
                            who receive the emails.

                            WARNING:
                               You must add the users that receive  emails  to
                               your AWS SSO store .

                            to -> (list)
                               Specifies  one  or  more recipients who receive
                               the email.

                               (structure)
                                   The information that identifies the recipi-
                                   ent.

                                   ssoIdentity -> (structure)
                                      The AWS Single Sign-On (AWS SSO) authen-
                                      tication information.

                                      identityStoreId -> (string)
                                          The  ID  of  the  AWS  SSO  identity
                                          store.

                                      userId -> (string)
                                          The user ID.

       JSON Syntax:

          {
            "notificationActions": [
              {
                "action": {
                  "lambdaAction": {
                    "functionArn": "string",
                    "payload": {
                      "contentExpression": "string",
                      "type": "STRING"|"JSON"
                    }
                  }
                },
                "smsConfigurations": [
                  {
                    "senderId": "string",
                    "additionalMessage": "string",
                    "recipients": [
                      {
                        "ssoIdentity": {
                          "identityStoreId": "string",
                          "userId": "string"
                        }
                      }
                      ...
                    ]
                  }
                  ...
                ],
                "emailConfigurations": [
                  {
                    "from": "string",
                    "content": {
                      "subject": "string",
                      "additionalMessage": "string"
                    },
                    "recipients": {
                      "to": [
                        {
                          "ssoIdentity": {
                            "identityStoreId": "string",
                            "userId": "string"
                          }
                        }
                        ...
                      ]
                    }
                  }
                  ...
                ]
              }
              ...
            ]
          }

       --alarm-event-actions (structure)
          Contains information about one or more alarm actions.

          alarmActions -> (list)
              Specifies one or more supported actions to receive notifications
              when the alarm state changes.

              (structure)
                 Specifies one of the following actions to  receive  notifica-
                 tions when the alarm state changes.

                 sns -> (structure)
                     Information required to publish the Amazon SNS message.

                     targetArn -> (string)
                        The  ARN of the Amazon SNS target where the message is
                        sent.

                     payload -> (structure)
                        You can configure the action payload when you  send  a
                        message as an Amazon SNS push notification.

                        contentExpression -> (string)
                            The  content  of the payload. You can use a string
                            expression   that    includes    quoted    strings
                            ('<string>'    ),    variables   ($variable.<vari-
                            able-name>         ),         input         values
                            ($input.<input-name>.<path-to-datum>   ),   string
                            concatenations, and quoted  strings  that  contain
                            ${}  as  the content. The recommended maximum size
                            of a content expression is 1 KB.

                        type -> (string)
                            The value of the payload type can be either STRING
                            or JSON .

                 iotTopicPublish -> (structure)
                     Information  required to publish the MQTT message through
                     the AWS IoT message broker.

                     mqttTopic -> (string)
                        The MQTT topic of the message. You can  use  a  string
                        expression  that  includes variables ($variable.<vari-
                        able-name>       )       and       input        values
                        ($input.<input-name>.<path-to-datum>  )  as  the topic
                        string.

                     payload -> (structure)
                        You can configure the action payload when you  publish
                        a message to an AWS IoT Core topic.

                        contentExpression -> (string)
                            The  content  of the payload. You can use a string
                            expression   that    includes    quoted    strings
                            ('<string>'    ),    variables   ($variable.<vari-
                            able-name>         ),         input         values
                            ($input.<input-name>.<path-to-datum>   ),   string
                            concatenations, and quoted  strings  that  contain
                            ${}  as  the content. The recommended maximum size
                            of a content expression is 1 KB.

                        type -> (string)
                            The value of the payload type can be either STRING
                            or JSON .

                 lambda -> (structure)
                     Calls a Lambda function, passing in information about the
                     detector model instance and the event that triggered  the
                     action.

                     functionArn -> (string)
                        The ARN of the Lambda function that is executed.

                     payload -> (structure)
                        You  can  configure the action payload when you send a
                        message to a Lambda function.

                        contentExpression -> (string)
                            The content of the payload. You can use  a  string
                            expression    that    includes    quoted   strings
                            ('<string>'   ),    variables    ($variable.<vari-
                            able-name>         ),         input         values
                            ($input.<input-name>.<path-to-datum>   ),   string
                            concatenations,  and  quoted  strings that contain
                            ${} as the content. The recommended  maximum  size
                            of a content expression is 1 KB.

                        type -> (string)
                            The value of the payload type can be either STRING
                            or JSON .

                 iotEvents -> (structure)
                     Sends an AWS IoT Events  input,  passing  in  information
                     about  the  detector  model  instance  and the event that
                     triggered the action.

                     inputName -> (string)
                        The name of the AWS IoT Events input where the data is
                        sent.

                     payload -> (structure)
                        You  can  configure the action payload when you send a
                        message to an AWS IoT Events input.

                        contentExpression -> (string)
                            The content of the payload. You can use  a  string
                            expression    that    includes    quoted   strings
                            ('<string>'   ),    variables    ($variable.<vari-
                            able-name>         ),         input         values
                            ($input.<input-name>.<path-to-datum>   ),   string
                            concatenations,  and  quoted  strings that contain
                            ${} as the content. The recommended  maximum  size
                            of a content expression is 1 KB.

                        type -> (string)
                            The value of the payload type can be either STRING
                            or JSON .

                 sqs -> (structure)
                     Sends information about the detector model  instance  and
                     the  event  that  triggered  the  action to an Amazon SQS
                     queue.

                     queueUrl -> (string)
                        The URL of the SQS queue where the data is written.

                     useBase64 -> (boolean)
                        Set this to TRUE if you want the data  to  be  base-64
                        encoded  before it is written to the queue. Otherwise,
                        set this to FALSE.

                     payload -> (structure)
                        You can configure the action payload when you  send  a
                        message to an Amazon SQS queue.

                        contentExpression -> (string)
                            The  content  of the payload. You can use a string
                            expression   that    includes    quoted    strings
                            ('<string>'    ),    variables   ($variable.<vari-
                            able-name>         ),         input         values
                            ($input.<input-name>.<path-to-datum>   ),   string
                            concatenations, and quoted  strings  that  contain
                            ${}  as  the content. The recommended maximum size
                            of a content expression is 1 KB.

                        type -> (string)
                            The value of the payload type can be either STRING
                            or JSON .

                 firehose -> (structure)
                     Sends  information  about the detector model instance and
                     the event that triggered the action to an Amazon  Kinesis
                     Data Firehose delivery stream.

                     deliveryStreamName -> (string)
                        The  name of the Kinesis Data Firehose delivery stream
                        where the data is written.

                     separator -> (string)
                        A character separator that is used to separate records
                        written  to the Kinesis Data Firehose delivery stream.
                        Valid values are: 'n' (newline), 't' (tab), 'rn' (Win-
                        dows newline), ',' (comma).

                     payload -> (structure)
                        You  can  configure the action payload when you send a
                        message to an Amazon Kinesis  Data  Firehose  delivery
                        stream.

                        contentExpression -> (string)
                            The  content  of the payload. You can use a string
                            expression   that    includes    quoted    strings
                            ('<string>'    ),    variables   ($variable.<vari-
                            able-name>         ),         input         values
                            ($input.<input-name>.<path-to-datum>   ),   string
                            concatenations, and quoted  strings  that  contain
                            ${}  as  the content. The recommended maximum size
                            of a content expression is 1 KB.

                        type -> (string)
                            The value of the payload type can be either STRING
                            or JSON .

                 dynamoDB -> (structure)
                     Defines  an  action to write to the Amazon DynamoDB table
                     that you created. The standard  action  payload  contains
                     all the information about the detector model instance and
                     the event that triggered the action.  You  can  customize
                     the  payload  . One column of the DynamoDB table receives
                     all attribute-value pairs in the payload that  you  spec-
                     ify.

                     You  must  use expressions for all parameters in DynamoD-
                     BAction . The  expressions  accept  literals,  operators,
                     functions, references, and substitution templates.
                        Examples

                     o For literal values, the expressions must contain single
                       quotes. For example,  the  value  for  the  hashKeyType
                       parameter can be 'STRING' .

                     o For  references,  you  must specify either variables or
                       input values. For example, the value for  the  hashKey-
                       Field parameter can be $input.GreenhouseInput.name .

                     o For a substitution template, you must use ${} , and the
                       template must be in single quotes. A substitution  tem-
                       plate can also contain a combination of literals, oper-
                       ators, functions,  references,  and  substitution  tem-
                       plates.  In  the  following  example, the value for the
                       hashKeyValue parameter uses  a  substitution  template.
                       '${$input.GreenhouseInput.temperature  * 6 / 5 + 32} in
                       Fahrenheit'

                     o For a string concatenation, you must use + .  A  string
                       concatenation  can also contain a combination of liter-
                       als, operators, functions, references, and substitution
                       templates.  In the following example, the value for the
                       tableName  parameter  uses  a   string   concatenation.
                       'GreenhouseTemperatureTable  '  +  $input.GreenhouseIn-
                       put.date

                     For more information, see  Expressions  in  the  AWS  IoT
                     Events Developer Guide .

                     If  the  defined payload type is a string, DynamoDBAction
                     writes non-JSON data to  the  DynamoDB  table  as  binary
                     data.   The   DynamoDB   console  displays  the  data  as
                     Base64-encoded  text.  The  value  for  the  payloadField
                     parameter is <payload-field>_raw .

                     hashKeyType -> (string)
                        The data type for the hash key (also called the parti-
                        tion key). You can specify the following values:

                        o 'STRING' - The hash key is a string.

                        o 'NUMBER' - The hash key is a number.

                        If you don't specify hashKeyType , the  default  value
                        is 'STRING' .

                     hashKeyField -> (string)
                        The  name  of  the hash key (also called the partition
                        key). The hashKeyField value must match the  partition
                        key of the target DynamoDB table.

                     hashKeyValue -> (string)
                        The  value  of the hash key (also called the partition
                        key).

                     rangeKeyType -> (string)
                        The data type for the range key (also called the  sort
                        key), You can specify the following values:

                        o 'STRING' - The range key is a string.

                        o 'NUMBER' - The range key is number.

                        If you don't specify rangeKeyField , the default value
                        is 'STRING' .

                     rangeKeyField -> (string)
                        The name of the range key (also called the sort  key).
                        The rangeKeyField value must match the sort key of the
                        target DynamoDB table.

                     rangeKeyValue -> (string)
                        The value of the range key (also called the sort key).

                     operation -> (string)
                        The  type of operation to perform. You can specify the
                        following values:

                        o 'INSERT' - Insert  data  as  a  new  item  into  the
                          DynamoDB  table.  This  item uses the specified hash
                          key as a partition key. If  you  specified  a  range
                          key, the item uses the range key as a sort key.

                        o 'UPDATE'  -  Update an existing item of the DynamoDB
                          table with new data. This item's partition key  must
                          match  the  specified  hash  key. If you specified a
                          range key, the range key must match the item's  sort
                          key.

                        o 'DELETE'  -  Delete an existing item of the DynamoDB
                          table. This item's  partition  key  must  match  the
                          specified  hash  key.  If you specified a range key,
                          the range key must match the item's sort key.

                        If you don't specify this parameter,  AWS  IoT  Events
                        triggers the 'INSERT' operation.

                     payloadField -> (string)
                        The  name  of  the  DynamoDB  column that receives the
                        action payload.

                        If you don't specify this parameter, the name  of  the
                        DynamoDB column is payload .

                     tableName -> (string)
                        The  name  of  the DynamoDB table. The tableName value
                        must match the table name of the target  DynamoDB  ta-
                        ble.

                     payload -> (structure)
                        Information needed to configure the payload.

                        By  default,  AWS IoT Events generates a standard pay-
                        load in JSON for any action. This action payload  con-
                        tains all attribute-value pairs that have the informa-
                        tion about the detector model instance and  the  event
                        triggered the action. To configure the action payload,
                        you can use contentExpression .

                        contentExpression -> (string)
                            The content of the payload. You can use  a  string
                            expression    that    includes    quoted   strings
                            ('<string>'   ),    variables    ($variable.<vari-
                            able-name>         ),         input         values
                            ($input.<input-name>.<path-to-datum>   ),   string
                            concatenations,  and  quoted  strings that contain
                            ${} as the content. The recommended  maximum  size
                            of a content expression is 1 KB.

                        type -> (string)
                            The value of the payload type can be either STRING
                            or JSON .

                 dynamoDBv2 -> (structure)
                     Defines an action to write to the Amazon  DynamoDB  table
                     that you created. The default action payload contains all
                     the information about the detector model instance and the
                     event  that  triggered  the action. You can customize the
                     payload  .  A  separate  column  of  the  DynamoDB  table
                     receives one attribute-value pair in the payload that you
                     specify.

                     You  must  use  expressions   for   all   parameters   in
                     DynamoDBv2Action . The expressions accept literals, oper-
                     ators, functions, references, and substitution templates.
                        Examples

                     o For literal values, the expressions must contain single
                       quotes. For example, the value for the tableName param-
                       eter can be 'GreenhouseTemperatureTable' .

                     o For  references,  you  must specify either variables or
                       input values. For example, the value for the  tableName
                       parameter can be $variable.ddbtableName .

                     o For a substitution template, you must use ${} , and the
                       template must be in single quotes. A substitution  tem-
                       plate can also contain a combination of literals, oper-
                       ators, functions,  references,  and  substitution  tem-
                       plates.  In  the  following  example, the value for the
                       contentExpression parameter in Payload uses a substitu-
                       tion template.   '{\"sensorID\": \"${$input.Greenhouse-
                       Input.sensor_id}\", \"temperature\":  \"${$input.Green-
                       houseInput.temperature * 9 / 5 + 32}\"}'

                     o For  a  string concatenation, you must use + . A string
                       concatenation can also contain a combination of  liter-
                       als, operators, functions, references, and substitution
                       templates. In the following example, the value for  the
                       tableName   parameter   uses  a  string  concatenation.
                       'GreenhouseTemperatureTable  '  +  $input.GreenhouseIn-
                       put.date

                     For  more  information,  see  Expressions  in the AWS IoT
                     Events Developer Guide .

                     The value for the type parameter in Payload must be  JSON
                     .

                     tableName -> (string)
                        The name of the DynamoDB table.

                     payload -> (structure)
                        Information needed to configure the payload.

                        By  default,  AWS IoT Events generates a standard pay-
                        load in JSON for any action. This action payload  con-
                        tains all attribute-value pairs that have the informa-
                        tion about the detector model instance and  the  event
                        triggered the action. To configure the action payload,
                        you can use contentExpression .

                        contentExpression -> (string)
                            The content of the payload. You can use  a  string
                            expression    that    includes    quoted   strings
                            ('<string>'   ),    variables    ($variable.<vari-
                            able-name>         ),         input         values
                            ($input.<input-name>.<path-to-datum>   ),   string
                            concatenations,  and  quoted  strings that contain
                            ${} as the content. The recommended  maximum  size
                            of a content expression is 1 KB.

                        type -> (string)
                            The value of the payload type can be either STRING
                            or JSON .

                 iotSiteWise -> (structure)
                     Sends information about the detector model  instance  and
                     the  event that triggered the action to a specified asset
                     property in AWS IoT SiteWise.

                     You must use expressions for all parameters  in  IotSite-
                     WiseAction  . The expressions accept literals, operators,
                     functions, references, and substitutions templates.
                        Examples

                     o For literal values, the expressions must contain single
                       quotes.  For  example,  the value for the propertyAlias
                       parameter can be '/company/windfarm/3/turbine/7/temper-
                       ature' .

                     o For  references,  you  must specify either variables or
                       input values. For example, the value  for  the  assetId
                       parameter can be $input.TurbineInput.assetId1 .

                     o For a substitution template, you must use ${} , and the
                       template must be in single quotes. A substitution  tem-
                       plate can also contain a combination of literals, oper-
                       ators, functions,  references,  and  substitution  tem-
                       plates.  In  the  following  example, the value for the
                       propertyAlias parameter uses a  substitution  template.
                       'company/windfarm/${$input.TemperatureInput.sensor-
                       Data.windfarmID}/turbine/       ${$input.TemperatureIn-
                       put.sensorData.turbineID}/temperature'

                     You must specify either propertyAlias or both assetId and
                     propertyId to identify the target asset property  in  AWS
                     IoT SiteWise.

                     For  more  information,  see  Expressions  in the AWS IoT
                     Events Developer Guide .

                     entryId -> (string)
                        A unique identifier for this entry. You  can  use  the
                        entry  ID to track which data entry causes an error in
                        case of failure. The default is a new  unique  identi-
                        fier.

                     assetId -> (string)
                        The ID of the asset that has the specified property.

                     propertyId -> (string)
                        The ID of the asset property.

                     propertyAlias -> (string)
                        The alias of the asset property.

                     propertyValue -> (structure)
                        The  value  to  send to the asset property. This value
                        contains timestamp, quality, and value (TQV)  informa-
                        tion.

                        value -> (structure)
                            The value to send to an asset property.

                            stringValue -> (string)
                               The  asset property value is a string. You must
                               use an expression,  and  the  evaluated  result
                               should be a string.

                            integerValue -> (string)
                               The  asset  property  value  is an integer. You
                               must  use  an  expression,  and  the  evaluated
                               result should be an integer.

                            doubleValue -> (string)
                               The  asset property value is a double. You must
                               use an expression,  and  the  evaluated  result
                               should be a double.

                            booleanValue -> (string)
                               The  asset  property  value  is a Boolean value
                               that must be 'TRUE' or 'FALSE' . You  must  use
                               an  expression, and the evaluated result should
                               be a Boolean value.

                        timestamp -> (structure)
                            The timestamp associated with the  asset  property
                            value. The default is the current event time.

                            timeInSeconds -> (string)
                               The  timestamp,  in  seconds, in the Unix epoch
                               format.   The   valid    range    is    between
                               1-31556889864403199.

                            offsetInNanos -> (string)
                               The nanosecond offset converted from timeInSec-
                               onds . The valid range is between  0-999999999.

                        quality -> (string)
                            The quality of the asset property value. The value
                            must be 'GOOD' , 'BAD' , or 'UNCERTAIN' .

       JSON Syntax:

          {
            "alarmActions": [
              {
                "sns": {
                  "targetArn": "string",
                  "payload": {
                    "contentExpression": "string",
                    "type": "STRING"|"JSON"
                  }
                },
                "iotTopicPublish": {
                  "mqttTopic": "string",
                  "payload": {
                    "contentExpression": "string",
                    "type": "STRING"|"JSON"
                  }
                },
                "lambda": {
                  "functionArn": "string",
                  "payload": {
                    "contentExpression": "string",
                    "type": "STRING"|"JSON"
                  }
                },
                "iotEvents": {
                  "inputName": "string",
                  "payload": {
                    "contentExpression": "string",
                    "type": "STRING"|"JSON"
                  }
                },
                "sqs": {
                  "queueUrl": "string",
                  "useBase64": true|false,
                  "payload": {
                    "contentExpression": "string",
                    "type": "STRING"|"JSON"
                  }
                },
                "firehose": {
                  "deliveryStreamName": "string",
                  "separator": "string",
                  "payload": {
                    "contentExpression": "string",
                    "type": "STRING"|"JSON"
                  }
                },
                "dynamoDB": {
                  "hashKeyType": "string",
                  "hashKeyField": "string",
                  "hashKeyValue": "string",
                  "rangeKeyType": "string",
                  "rangeKeyField": "string",
                  "rangeKeyValue": "string",
                  "operation": "string",
                  "payloadField": "string",
                  "tableName": "string",
                  "payload": {
                    "contentExpression": "string",
                    "type": "STRING"|"JSON"
                  }
                },
                "dynamoDBv2": {
                  "tableName": "string",
                  "payload": {
                    "contentExpression": "string",
                    "type": "STRING"|"JSON"
                  }
                },
                "iotSiteWise": {
                  "entryId": "string",
                  "assetId": "string",
                  "propertyId": "string",
                  "propertyAlias": "string",
                  "propertyValue": {
                    "value": {
                      "stringValue": "string",
                      "integerValue": "string",
                      "doubleValue": "string",
                      "booleanValue": "string"
                    },
                    "timestamp": {
                      "timeInSeconds": "string",
                      "offsetInNanos": "string"
                    },
                    "quality": "string"
                  }
                }
              }
              ...
            ]
          }

       --alarm-capabilities (structure)
          Contains the configuration information of alarm state changes.

          initializationConfiguration -> (structure)
              Specifies the default alarm state. The configuration applies  to
              all alarms that were created based on this alarm model.

              disabledOnInitialization -> (boolean)
                 The  value  must  be  TRUE  or  FALSE  . If FALSE , all alarm
                 instances created based on the alarm model are activated. The
                 default value is TRUE .

          acknowledgeFlow -> (structure)
              Specifies whether to get notified for alarm state changes.

              enabled -> (boolean)
                 The  value  must  be  TRUE or FALSE . If TRUE , you receive a
                 notification when the alarm state changes. You must choose to
                 acknowledge  the  notification  before  the  alarm  state can
                 return to NORMAL . If FALSE ,  you  won't  receive  notifica-
                 tions.  The  alarm  automatically changes to the NORMAL state
                 when the input property value returns to the specified range.

       Shorthand Syntax:

          initializationConfiguration={disabledOnInitialization=boolean},acknowledgeFlow={enabled=boolean}

       JSON Syntax:

          {
            "initializationConfiguration": {
              "disabledOnInitialization": true|false
            },
            "acknowledgeFlow": {
              "enabled": true|false
            }
          }

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       creationTime -> (timestamp)
          The time the alarm model was created, in the Unix epoch format.

       alarmModelArn -> (string)
          The  ARN  of  the  alarm  model.  For  more  information, see Amazon
          Resource Names (ARNs) in the AWS General Reference .

       alarmModelVersion -> (string)
          The version of the alarm model.

       lastUpdateTime -> (timestamp)
          The time the alarm model was last updated, in the Unix epoch format.

       status -> (string)
          The  status of the alarm model. The status can be one of the follow-
          ing values:

          o ACTIVE - The alarm model is active  and  it's  ready  to  evaluate
            data.

          o ACTIVATING  - AWS IoT Events is activating your alarm model. Acti-
            vating an alarm model can take up to a few minutes.

          o INACTIVE - The alarm model is inactive, so it isn't ready to eval-
            uate data. Check your alarm model information and update the alarm
            model.

          o FAILED - You couldn't create or update the alarm model. Check your
            alarm model information and try again.



                                                          CREATE-ALARM-MODEL()
