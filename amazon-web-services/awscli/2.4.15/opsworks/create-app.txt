CREATE-APP()                                                      CREATE-APP()



NAME
       create-app -

DESCRIPTION
       Creates  an  app  for  a  specified  stack.  For  more information, see
       Creating Apps .
          Required Permissions : To use this action, an IAM user must  have  a
          Manage  permissions  level for the stack, or an attached policy that
          explicitly grants permissions. For more information on user  permis-
          sions, see Managing User Permissions .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-app
          --stack-id <value>
          [--shortname <value>]
          --name <value>
          [--description <value>]
          [--data-sources <value>]
          --type <value>
          [--app-source <value>]
          [--domains <value>]
          [--enable-ssl | --no-enable-ssl]
          [--ssl-configuration <value>]
          [--attributes <value>]
          [--environment <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --stack-id (string)
          The stack ID.

       --shortname (string)
          The app's short name.

       --name (string)
          The app name.

       --description (string)
          A description of the app.

       --data-sources (list)
          The app's data source.

          (structure)
              Describes an app's data source.

              Type -> (string)
                 The  data  source's  type,  AutoSelectOpsworksMysqlInstance ,
                 OpsworksMysqlInstance , RdsDbInstance , or None .

              Arn -> (string)
                 The data source's ARN.

              DatabaseName -> (string)
                 The database name.

       Shorthand Syntax:

          Type=string,Arn=string,DatabaseName=string ...

       JSON Syntax:

          [
            {
              "Type": "string",
              "Arn": "string",
              "DatabaseName": "string"
            }
            ...
          ]

       --type (string)
          The app type. Each supported type is associated  with  a  particular
          layer.  For  example,  PHP  applications  are  associated with a PHP
          layer. AWS OpsWorks Stacks deploys an application to those instances
          that  are  members of the corresponding layer. If your app isn't one
          of the standard types, or you prefer to implement  your  own  Deploy
          recipes, specify other .

          Possible values:

          o aws-flow-ruby

          o java

          o rails

          o php

          o nodejs

          o static

          o other

       --app-source (structure)
          A Source object that specifies the app repository.

          Type -> (string)
              The repository type.

          Url -> (string)
              The  source  URL.  The  following  is an example of an Amazon S3
              source                  URL:                  https://s3.amazon-
              aws.com/opsworks-demo-bucket/opsworks_cookbook_demo.tar.gz .

          Username -> (string)
              This parameter depends on the repository type.

              o For  Amazon  S3  bundles,  set Username to the appropriate IAM
                access key ID.

              o For HTTP bundles, Git repositories, and  Subversion  reposito-
                ries, set Username to the user name.

          Password -> (string)
              When included in a request, the parameter depends on the reposi-
              tory type.

              o For Amazon S3 bundles, set Password  to  the  appropriate  IAM
                secret access key.

              o For  HTTP bundles and Subversion repositories, set Password to
                the password.

              For more information on how to safely  handle  IAM  credentials,
              see
              https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html
              .

              In  responses,  AWS  OpsWorks  Stacks returns *****FILTERED*****
              instead of the actual value.

          SshKey -> (string)
              In requests, the repository's SSH key.

              In responses, AWS  OpsWorks  Stacks  returns  *****FILTERED*****
              instead of the actual value.

          Revision -> (string)
              The  application's  version.  AWS OpsWorks Stacks enables you to
              easily deploy new versions of an application. One  of  the  sim-
              plest approaches is to have branches or revisions in your repos-
              itory that represent different versions that can potentially  be
              deployed.

       Shorthand Syntax:

          Type=string,Url=string,Username=string,Password=string,SshKey=string,Revision=string

       JSON Syntax:

          {
            "Type": "git"|"svn"|"archive"|"s3",
            "Url": "string",
            "Username": "string",
            "Password": "string",
            "SshKey": "string",
            "Revision": "string"
          }

       --domains (list)
          The  app  virtual  host settings, with multiple domains separated by
          commas. For example: 'www.example.com, example.com'

          (string)

       Syntax:

          "string" "string" ...

       --enable-ssl | --no-enable-ssl (boolean)
          Whether to enable SSL for the app.

       --ssl-configuration (structure)
          An SslConfiguration object with the SSL configuration.

          Certificate -> (string)
              The contents of the certificate's domain.crt file.

          PrivateKey -> (string)
              The private key; the contents of  the  certificate's  domain.kex
              file.

          Chain -> (string)
              Optional.  Can  be  used  to specify an intermediate certificate
              authority key or client authentication.

       Shorthand Syntax:

          Certificate=string,PrivateKey=string,Chain=string

       JSON Syntax:

          {
            "Certificate": "string",
            "PrivateKey": "string",
            "Chain": "string"
          }

       --attributes (map)
          One or more user-defined key/value pairs to be added  to  the  stack
          attributes.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

            KeyName1=string,KeyName2=string

          Where valid key names are:
            DocumentRoot
            RailsEnv
            AutoBundleOnDeploy
            AwsFlowRubySettings

       JSON Syntax:

          {"DocumentRoot"|"RailsEnv"|"AutoBundleOnDeploy"|"AwsFlowRubySettings": "string"
            ...}

       --environment (list)
          An  array  of  EnvironmentVariable  objects that specify environment
          variables to be associated with the app. After you deploy  the  app,
          these  variables  are defined on the associated app server instance.
          For more information, see Environment Variables .

          There is no specific limit on the number of  environment  variables.
          However,  the size of the associated data structure - which includes
          the variables' names, values, and protected  flag  values  -  cannot
          exceed  20  KB.  This  limit  should accommodate most if not all use
          cases. Exceeding it will cause an exception with the message, "Envi-
          ronment: is too large (maximum is 20KB)."

          NOTE:
              If  you  have  specified  one or more environment variables, you
              cannot modify the stack's Chef version.

          (structure)
              Represents an app's environment variable.

              Key -> (string)
                 (Required) The environment variable's name, which can consist
                 of  up  to  64 characters and must be specified. The name can
                 contain upper- and lowercase  letters,  numbers,  and  under-
                 scores (_), but it must start with a letter or underscore.

              Value -> (string)
                 (Optional)  The  environment  variable's  value, which can be
                 left empty. If you specify a value, it can contain up to  256
                 characters, which must all be printable.

              Secure -> (boolean)
                 (Optional)  Whether  the variable's value will be returned by
                 the  DescribeApps action. To  conceal  an  environment  vari-
                 able's  value, set Secure to true . DescribeApps then returns
                 *****FILTERED***** instead of the actual value.  The  default
                 value for Secure is false .

       Shorthand Syntax:

          Key=string,Value=string,Secure=boolean ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string",
              "Secure": true|false
            }
            ...
          ]

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To create an app

       The  following  example  creates a PHP app named SimplePHPApp from code
       stored in a GitHub repository.  The command uses the shorthand form  of
       the application source definition.

          aws opsworks --region us-east-1 create-app --stack-id f6673d70-32e6-4425-8999-265dd002fec7 --name SimplePHPApp --type php --app-source Type=git,Url=git://github.com/amazonwebservices/opsworks-demo-php-simple-app.git,Revision=version1

       Output:

          {
            "AppId": "6cf5163c-a951-444f-a8f7-3716be75f2a2"
          }

       To create an app with an attached database

       The  following  example  creates a JSP app from code stored in .zip ar-
       chive in a public S3 bucket.  It attaches an RDS DB instance  to  serve
       as  the  app's  data  store.  The  application and database sources are
       defined in separate JSON files that are in the directory from which you
       run the command.

          aws opsworks --region us-east-1 create-app --stack-id 8c428b08-a1a1-46ce-a5f8-feddc43771b8 --name SimpleJSP --type java --app-source file://appsource.json --data-sources file://datasource.json

       The  application  source  information is in appsource.json and contains
       the following.

          {
            "Type": "archive",
            "Url": "https://s3.amazonaws.com/jsp_example/simplejsp.zip"
          }

       The database source information is in datasource.json and contains  the
       following.

          [
            {
              "Type": "RdsDbInstance",
              "Arn": "arn:aws:rds:us-west-2:123456789012:db:clitestdb",
              "DatabaseName": "mydb"
            }
          ]

       Note:   For   an   RDS   DB   instance,   you  must  first  use  regis-
       ter-rds-db-instance to register the instance with the stack.  For MySQL
       App   Server   instances,  set  Type  to  OpsworksMysqlInstance.  These
       instances are created by AWS OpsWorks, so they do not have to be regis-
       tered.

       Output:

          {
            "AppId": "26a61ead-d201-47e3-b55c-2a7c666942f8"
          }

       For more information, see Adding Apps in the AWS OpsWorks User Guide.

OUTPUT
       AppId -> (string)
          The app ID.



                                                                  CREATE-APP()
