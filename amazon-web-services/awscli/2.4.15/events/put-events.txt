PUT-EVENTS()                                                      PUT-EVENTS()



NAME
       put-events -

DESCRIPTION
       Sends  custom  events to Amazon EventBridge so that they can be matched
       to rules.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            put-events
          --entries <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --entries (list)
          The entry that defines an event in your system. You can specify sev-
          eral  parameters  for  the  entry such as the source and type of the
          event, resources associated with the event, and so on.

          (structure)
              Represents an event to be submitted.

              Time -> (timestamp)
                 The time stamp of the event, per RFC3339 . If no  time  stamp
                 is provided, the time stamp of the PutEvents call is used.

              Source -> (string)
                 The source of the event.

              Resources -> (list)
                 Amazon  Web Services resources, identified by Amazon Resource
                 Name (ARN), which the event primarily concerns.  Any  number,
                 including zero, may be present.

                 (string)

              DetailType -> (string)
                 Free-form  string used to decide what fields to expect in the
                 event detail.

              Detail -> (string)
                 A valid JSON string. There is no other  schema  imposed.  The
                 JSON string may contain fields and nested subobjects.

              EventBusName -> (string)
                 The  name  or ARN of the event bus to receive the event. Only
                 the rules that are associated with this event bus are used to
                 match  the  event. If you omit this, the default event bus is
                 used.

              TraceHeader -> (string)
                 An  X-Ray   trade   header,   which   is   an   http   header
                 (X-Amzn-Trace-Id)  that contains the trace-id associated with
                 the event.

                 To learn more about X-Ray trace headers, see  Tracing  header
                 in the X-Ray Developer Guide.

       Shorthand Syntax:

          Time=timestamp,Source=string,Resources=string,string,DetailType=string,Detail=string,EventBusName=string,TraceHeader=string ...

       JSON Syntax:

          [
            {
              "Time": timestamp,
              "Source": "string",
              "Resources": ["string", ...],
              "DetailType": "string",
              "Detail": "string",
              "EventBusName": "string",
              "TraceHeader": "string"
            }
            ...
          ]

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To send a custom event to CloudWatch Events

       This  example  sends  a custom event to CloudWatch Events. The event is
       contained within the putevents.json file:

          aws events put-events --entries file://putevents.json

       Here are the contents of the putevents.json file:

          [
            {
              "Source": "com.mycompany.myapp",
              "Detail": "{ \"key1\": \"value1\", \"key2\": \"value2\" }",
              "Resources": [
                "resource1",
                "resource2"
              ],
              "DetailType": "myDetailType"
            },
            {
              "Source": "com.mycompany.myapp",
              "Detail": "{ \"key1\": \"value3\", \"key2\": \"value4\" }",
              "Resources": [
                "resource1",
                "resource2"
              ],
              "DetailType": "myDetailType"
             }
          ]

OUTPUT
       FailedEntryCount -> (integer)
          The number of failed entries.

       Entries -> (list)
          The successfully and unsuccessfully ingested events results. If  the
          ingestion  was  successful, the entry has the event ID in it. Other-
          wise, you can use the error code and error message to  identify  the
          problem with the entry.

          (structure)
              Represents an event that failed to be submitted.

              EventId -> (string)
                 The ID of the event.

              ErrorCode -> (string)
                 The  error  code  that  indicates  why  the  event submission
                 failed.

              ErrorMessage -> (string)
                 The error message that  explains  why  the  event  submission
                 failed.



                                                                  PUT-EVENTS()
