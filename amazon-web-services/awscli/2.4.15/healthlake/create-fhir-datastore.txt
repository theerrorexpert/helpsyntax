CREATE-FHIR-DATASTORE()                                CREATE-FHIR-DATASTORE()



NAME
       create-fhir-datastore -

DESCRIPTION
       Creates a Data Store that can ingest and export FHIR formatted data.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-fhir-datastore
          [--datastore-name <value>]
          --datastore-type-version <value>
          [--sse-configuration <value>]
          [--preload-data-config <value>]
          [--client-token <value>]
          [--tags <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --datastore-name (string)
          The user generated name for the Data Store.

       --datastore-type-version (string)
          The  FHIR  version  of the Data Store. The only supported version is
          R4.

          Possible values:

          o R4

       --sse-configuration (structure)
          The server-side encryption key configuration for a customer provided
          encryption key specified for creating a Data Store.

          KmsEncryptionConfig -> (structure)
              The  KMS  encryption  configuration  used to provide details for
              data encryption.

              CmkType -> (string)
                 The type of customer-managed-key(CMK)  used  for  encyrption.
                 The  two  types of supported CMKs are customer owned CMKs and
                 AWS owned CMKs.

              KmsKeyId -> (string)
                 The KMS encryption key id/alias  used  to  encrypt  the  Data
                 Store contents at rest.

       Shorthand Syntax:

          KmsEncryptionConfig={CmkType=string,KmsKeyId=string}

       JSON Syntax:

          {
            "KmsEncryptionConfig": {
              "CmkType": "CUSTOMER_MANAGED_KMS_KEY"|"AWS_OWNED_KMS_KEY",
              "KmsKeyId": "string"
            }
          }

       --preload-data-config (structure)
          Optional  parameter to preload data upon creation of the Data Store.
          Currently, the only supported preloaded data is synthetic data  gen-
          erated from Synthea.

          PreloadDataType -> (string)
              The  type of preloaded data. Only Synthea preloaded data is sup-
              ported.

       Shorthand Syntax:

          PreloadDataType=string

       JSON Syntax:

          {
            "PreloadDataType": "SYNTHEA"
          }

       --client-token (string)
          Optional user provided token used for ensuring idempotency.

       --tags (list)
          Resource tags that are applied to a Data Store when it is created.

          (structure)
              A tag is a label consisting of a user-defined key and value. The
              form for tags is {"Key", "Value"}

              Key -> (string)
                 The key portion of a tag. Tag keys are case sensitive.

              Value -> (string)
                 The value portion of tag. Tag values are case sensitive.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To create a FHIR Data Store.

       The  following create-fhir-datastore example demonstrates how to create
       a new Data Store in Amazon HealthLake.

          aws healthlake create-fhir-datastore \
              --region us-east-1 \
              --datastore-type-version R4 \
              --datastore-type-version R4 \
              --datastore-name "FhirTestDatastore"

       Output:

          {
              "DatastoreEndpoint": "https://healthlake.us-east-1.amazonaws.com/datastore/(Datastore ID)/r4/",
              "DatastoreArn": "arn:aws:healthlake:us-east-1:(AWS Account ID):datastore/(Datastore ID)",
              "DatastoreStatus": "CREATING",
              "DatastoreId": "(Datastore ID)"
          }

       For more information, see Creating and monitoring a FHIR Data Store  in
       the Amazon HealthLake Developer Guide.

OUTPUT
       DatastoreId -> (string)
          The  AWS-generated  Data Store id. This id is in the output from the
          initial Data Store creation call.

       DatastoreArn -> (string)
          The datastore ARN is generated during the creation of the Data Store
          and  can be found in the output from the initial Data Store creation
          call.

       DatastoreStatus -> (string)
          The status of the FHIR Data Store. Possible statuses  are  CREATING,
          ACTIVE, DELETING, DELETED.

       DatastoreEndpoint -> (string)
          The  AWS  endpoint  for  the  created  Data Store. For preview, only
          US-east-1 endpoints are supported.



                                                       CREATE-FHIR-DATASTORE()
