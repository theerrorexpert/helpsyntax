SEND-PROJECT-SESSION-ACTION()                    SEND-PROJECT-SESSION-ACTION()



NAME
       send-project-session-action -

DESCRIPTION
       Performs  a  recipe  step within an interactive DataBrew session that's
       currently open.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            send-project-session-action
          [--preview | --no-preview]
          --name <value>
          [--recipe-step <value>]
          [--step-index <value>]
          [--client-session-id <value>]
          [--view-frame <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --preview | --no-preview (boolean)
          If true, the result of the recipe step will  be  returned,  but  not
          applied.

       --name (string)
          The name of the project to apply the action to.

       --recipe-step (structure)
          Represents a single step from a DataBrew recipe to be performed.

          Action -> (structure)
              The particular action to be performed in the recipe step.

              Operation -> (string)
                 The  name  of a valid DataBrew transformation to be performed
                 on the data.

              Parameters -> (map)
                 Contextual parameters for the transformation.

                 key -> (string)

                 value -> (string)

          ConditionExpressions -> (list)
              One or more conditions that must be met for the recipe  step  to
              succeed.

              NOTE:
                 All  of  the  conditions  in  the array must be met. In other
                 words, all of the conditions must be combined using a logical
                 AND operation.

              (structure)
                 Represents  an individual condition that evaluates to true or
                 false.

                 Conditions are used with recipe actions. The action  is  only
                 performed  for column values where the condition evaluates to
                 true.

                 If a recipe requires more than one condition, then the recipe
                 must specify multiple ConditionExpression elements. Each con-
                 dition is applied to the rows in a dataset first, before  the
                 recipe action is performed.

                 Condition -> (string)
                     A  specific  condition  to  apply to a recipe action. For
                     more  information,  see  Recipe  structure  in  the  Glue
                     DataBrew Developer Guide .

                 Value -> (string)
                     A  value that the condition must evaluate to for the con-
                     dition to succeed.

                 TargetColumn -> (string)
                     A column to apply this condition to.

       Shorthand Syntax:

          Action={Operation=string,Parameters={KeyName1=string,KeyName2=string}},ConditionExpressions=[{Condition=string,Value=string,TargetColumn=string},{Condition=string,Value=string,TargetColumn=string}]

       JSON Syntax:

          {
            "Action": {
              "Operation": "string",
              "Parameters": {"string": "string"
                ...}
            },
            "ConditionExpressions": [
              {
                "Condition": "string",
                "Value": "string",
                "TargetColumn": "string"
              }
              ...
            ]
          }

       --step-index (integer)
          The index from which to preview a step. This index is used  to  pre-
          view the result of steps that have already been applied, so that the
          resulting view frame is from earlier in the view frame stack.

       --client-session-id (string)
          A unique identifier for an interactive session that's currently open
          and ready for work. The action will be performed on this session.

       --view-frame (structure)
          Represents the data being transformed during an action.

          StartColumnIndex -> (integer)
              The  starting  index  for  the range of columns to return in the
              view frame.

          ColumnRange -> (integer)
              The number of columns to include in the  view  frame,  beginning
              with  the StartColumnIndex value and ignoring any columns in the
              HiddenColumns list.

          HiddenColumns -> (list)
              A list of columns to hide in the view frame.

              (string)

          StartRowIndex -> (integer)
              The starting index for the range of rows to return in  the  view
              frame.

          RowRange -> (integer)
              The  number of rows to include in the view frame, beginning with
              the StartRowIndex value.

          Analytics -> (string)
              Controls  if  analytics  computation  is  enabled  or  disabled.
              Enabled by default.

       Shorthand Syntax:

          StartColumnIndex=integer,ColumnRange=integer,HiddenColumns=string,string,StartRowIndex=integer,RowRange=integer,Analytics=string

       JSON Syntax:

          {
            "StartColumnIndex": integer,
            "ColumnRange": integer,
            "HiddenColumns": ["string", ...],
            "StartRowIndex": integer,
            "RowRange": integer,
            "Analytics": "ENABLE"|"DISABLE"
          }

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       Result -> (string)
          A message indicating the result of performing the action.

       Name -> (string)
          The name of the project that was affected by the action.

       ActionId -> (integer)
          A unique identifier for the action that was performed.



                                                 SEND-PROJECT-SESSION-ACTION()
