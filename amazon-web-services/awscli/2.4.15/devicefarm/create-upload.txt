CREATE-UPLOAD()                                                CREATE-UPLOAD()



NAME
       create-upload -

DESCRIPTION
       Uploads an app or test scripts.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-upload
          --project-arn <value>
          --name <value>
          --type <value>
          [--content-type <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --project-arn (string)
          The ARN of the project for the upload.

       --name (string)
          The  upload's  file  name.  The  name should not contain any forward
          slashes (/ ). If you are uploading an iOS app, the  file  name  must
          end  with  the  .ipa extension. If you are uploading an Android app,
          the file name must end with the .apk extension. For all others,  the
          file name must end with the .zip file extension.

       --type (string)
          The upload's upload type.

          Must be one of the following values:

          o ANDROID_APP

          o IOS_APP

          o WEB_APP

          o EXTERNAL_DATA

          o APPIUM_JAVA_JUNIT_TEST_PACKAGE

          o APPIUM_JAVA_TESTNG_TEST_PACKAGE

          o APPIUM_PYTHON_TEST_PACKAGE

          o APPIUM_NODE_TEST_PACKAGE

          o APPIUM_RUBY_TEST_PACKAGE

          o APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE

          o APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE

          o APPIUM_WEB_PYTHON_TEST_PACKAGE

          o APPIUM_WEB_NODE_TEST_PACKAGE

          o APPIUM_WEB_RUBY_TEST_PACKAGE

          o CALABASH_TEST_PACKAGE

          o INSTRUMENTATION_TEST_PACKAGE

          o UIAUTOMATION_TEST_PACKAGE

          o UIAUTOMATOR_TEST_PACKAGE

          o XCTEST_TEST_PACKAGE

          o XCTEST_UI_TEST_PACKAGE

          o APPIUM_JAVA_JUNIT_TEST_SPEC

          o APPIUM_JAVA_TESTNG_TEST_SPEC

          o APPIUM_PYTHON_TEST_SPEC

          o APPIUM_NODE_TEST_SPEC

          o APPIUM_RUBY_TEST_SPEC

          o APPIUM_WEB_JAVA_JUNIT_TEST_SPEC

          o APPIUM_WEB_JAVA_TESTNG_TEST_SPEC

          o APPIUM_WEB_PYTHON_TEST_SPEC

          o APPIUM_WEB_NODE_TEST_SPEC

          o APPIUM_WEB_RUBY_TEST_SPEC

          o INSTRUMENTATION_TEST_SPEC

          o XCTEST_UI_TEST_SPEC

          If  you  call  CreateUpload  with WEB_APP specified, AWS Device Farm
          throws an ArgumentException error.

          Possible values:

          o ANDROID_APP

          o IOS_APP

          o WEB_APP

          o EXTERNAL_DATA

          o APPIUM_JAVA_JUNIT_TEST_PACKAGE

          o APPIUM_JAVA_TESTNG_TEST_PACKAGE

          o APPIUM_PYTHON_TEST_PACKAGE

          o APPIUM_NODE_TEST_PACKAGE

          o APPIUM_RUBY_TEST_PACKAGE

          o APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE

          o APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE

          o APPIUM_WEB_PYTHON_TEST_PACKAGE

          o APPIUM_WEB_NODE_TEST_PACKAGE

          o APPIUM_WEB_RUBY_TEST_PACKAGE

          o CALABASH_TEST_PACKAGE

          o INSTRUMENTATION_TEST_PACKAGE

          o UIAUTOMATION_TEST_PACKAGE

          o UIAUTOMATOR_TEST_PACKAGE

          o XCTEST_TEST_PACKAGE

          o XCTEST_UI_TEST_PACKAGE

          o APPIUM_JAVA_JUNIT_TEST_SPEC

          o APPIUM_JAVA_TESTNG_TEST_SPEC

          o APPIUM_PYTHON_TEST_SPEC

          o APPIUM_NODE_TEST_SPEC

          o APPIUM_RUBY_TEST_SPEC

          o APPIUM_WEB_JAVA_JUNIT_TEST_SPEC

          o APPIUM_WEB_JAVA_TESTNG_TEST_SPEC

          o APPIUM_WEB_PYTHON_TEST_SPEC

          o APPIUM_WEB_NODE_TEST_SPEC

          o APPIUM_WEB_RUBY_TEST_SPEC

          o INSTRUMENTATION_TEST_SPEC

          o XCTEST_UI_TEST_SPEC

       --content-type (string)
          The upload's content type (for example, application/octet-stream  ).

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To create an upload

       The following command creates an upload for an Android app:

          aws devicefarm create-upload --project-arn "arn:aws:devicefarm:us-west-2:123456789012:project:070fc3ca-7ec1-4741-9c1f-d3e044efc506" --name app.apk --type ANDROID_APP

       You  can  get  the  project  ARN  from  the output of create-project or
       list-projects.

       Output:

          {
              "upload": {
                  "status": "INITIALIZED",
                  "name": "app.apk",
                  "created": 1503614408.769,
                  "url": "https://prod-us-west-2-uploads.s3-us-west-2.amazonaws.com/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A123456789012%3Aproject%3A070fc3ca-c7e1-4471-91cf-d3e4efc50604/uploads/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A123456789012%3Aupload%3A070fc3ca-7ec1-4741-9c1f-d3e044efc506/dd72723a-ae9e-4087-09e6-f4cea3599514/app.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20170824T224008Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=AKIAEXAMPLEPBUMBC3GA%2F20170824%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=05050370c38894ef5bd09f5d009f36fc8f96fa4bb04e1bba9aca71b8dbe49a0f",
                  "type": "ANDROID_APP",
                  "arn": "arn:aws:devicefarm:us-west-2:123456789012:upload:070fc3ca-7ec1-4741-9c1f-d3e044efc506/dd72723a-ae9e-4087-09e6-f4cea3599514"
              }
          }

       Use the signed URL in the output to upload a file to Device Farm:

          curl -T app.apk "https://prod-us-west-2-uploads.s3-us-west-2.amazonaws.com/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A123456789012%3Aproject%3A070fc3ca-c7e1-4471-91cf-d3e4efc50604/uploads/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A123456789012%3Aupload%3A070fc3ca-7ec1-4741-9c1f-d3e044efc506/dd72723a-ae9e-4087-09e6-f4cea3599514/app.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20170824T224008Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=AKIAEXAMPLEPBUMBC3GA%2F20170824%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=05050370c38894ef5bd09f5d009f36fc8f96fa4bb04e1bba9aca71b8dbe49a0f"

OUTPUT
       upload -> (structure)
          The newly created upload.

          arn -> (string)
              The upload's ARN.

          name -> (string)
              The upload's file name.

          created -> (timestamp)
              When the upload was created.

          type -> (string)
              The upload's type.

              Must be one of the following values:

              o ANDROID_APP

              o IOS_APP

              o WEB_APP

              o EXTERNAL_DATA

              o APPIUM_JAVA_JUNIT_TEST_PACKAGE

              o APPIUM_JAVA_TESTNG_TEST_PACKAGE

              o APPIUM_PYTHON_TEST_PACKAGE

              o APPIUM_NODE_TEST_PACKAGE

              o APPIUM_RUBY_TEST_PACKAGE

              o APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE

              o APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE

              o APPIUM_WEB_PYTHON_TEST_PACKAGE

              o APPIUM_WEB_NODE_TEST_PACKAGE

              o APPIUM_WEB_RUBY_TEST_PACKAGE

              o CALABASH_TEST_PACKAGE

              o INSTRUMENTATION_TEST_PACKAGE

              o UIAUTOMATION_TEST_PACKAGE

              o UIAUTOMATOR_TEST_PACKAGE

              o XCTEST_TEST_PACKAGE

              o XCTEST_UI_TEST_PACKAGE

              o APPIUM_JAVA_JUNIT_TEST_SPEC

              o APPIUM_JAVA_TESTNG_TEST_SPEC

              o APPIUM_PYTHON_TEST_SPEC

              o APPIUM_NODE_TEST_SPEC

              o APPIUM_RUBY_TEST_SPEC

              o APPIUM_WEB_JAVA_JUNIT_TEST_SPEC

              o APPIUM_WEB_JAVA_TESTNG_TEST_SPEC

              o APPIUM_WEB_PYTHON_TEST_SPEC

              o APPIUM_WEB_NODE_TEST_SPEC

              o APPIUM_WEB_RUBY_TEST_SPEC

              o INSTRUMENTATION_TEST_SPEC

              o XCTEST_UI_TEST_SPEC

          status -> (string)
              The upload's status.

              Must be one of the following values:

              o FAILED

              o INITIALIZED

              o PROCESSING

              o SUCCEEDED

          url -> (string)
              The presigned Amazon S3 URL that was used to store a file  using
              a PUT request.

          metadata -> (string)
              The  upload's  metadata. For example, for Android, this contains
              information that is parsed from the manifest and is displayed in
              the  AWS  Device  Farm  console  after  the  associated  app  is
              uploaded.

          contentType -> (string)
              The upload's content type (for example, application/octet-stream
              ).

          message -> (string)
              A message about the upload's result.

          category -> (string)
              The upload's category. Allowed values include:

              o CURATED: An upload managed by AWS Device Farm.

              o PRIVATE: An upload managed by the AWS Device Farm customer.



                                                               CREATE-UPLOAD()
