EXECUTE-STATEMENT()                                        EXECUTE-STATEMENT()



NAME
       execute-statement -

DESCRIPTION
       Runs a SQL statement against a database.

       WARNING:
          If a call isn't part of a transaction because it doesn't include the
          transactionID parameter, changes that result from the call are  com-
          mitted automatically.

       The  response size limit is 1 MB. If the call returns more than 1 MB of
       response data, the call is terminated.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            execute-statement
          [--continue-after-timeout | --no-continue-after-timeout]
          [--database <value>]
          [--include-result-metadata | --no-include-result-metadata]
          [--parameters <value>]
          --resource-arn <value>
          [--result-set-options <value>]
          [--schema <value>]
          --secret-arn <value>
          --sql <value>
          [--transaction-id <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --continue-after-timeout | --no-continue-after-timeout (boolean)
          A value that indicates whether to  continue  running  the  statement
          after  the  call  times out. By default, the statement stops running
          when the call times out.

          WARNING:
              For DDL statements, we recommend continuing to run the statement
              after the call times out. When a DDL statement terminates before
              it is finished running, it can result  in  errors  and  possibly
              corrupted data structures.

       --database (string)
          The name of the database.

       --include-result-metadata | --no-include-result-metadata (boolean)
          A value that indicates whether to include metadata in the results.

       --parameters (list)
          The parameters for the SQL statement.

          NOTE:
              Array parameters are not supported.

          (structure)
              A parameter used in a SQL statement.

              name -> (string)
                 The name of the parameter.

              typeHint -> (string)
                 A  hint  that specifies the correct object type for data type
                 mapping. Possible values are as follows:

                 o DATE - The corresponding String parameter value is sent  as
                   an object of DATE type to the database. The accepted format
                   is YYYY-MM-DD .

                 o DECIMAL - The corresponding String parameter value is  sent
                   as an object of DECIMAL type to the database.

                 o JSON  - The corresponding String parameter value is sent as
                   an object of JSON type to the database.

                 o TIME - The corresponding String parameter value is sent  as
                   an object of TIME type to the database. The accepted format
                   is HH:MM:SS[.FFF] .

                 o TIMESTAMP - The corresponding  String  parameter  value  is
                   sent  as  an  object of TIMESTAMP type to the database. The
                   accepted format is YYYY-MM-DD HH:MM:SS[.FFF] .

                 o UUID - The corresponding String parameter value is sent  as
                   an object of UUID type to the database.

              value -> (structure)
                 The value of the parameter.

                 arrayValue -> (structure)
                     An array of values.

                     arrayValues -> (list)
                        An array of arrays.

                        (structure)
                            Contains an array.

                            arrayValues -> (list)
                               An array of arrays.

                               ( ... recursive ... )

                            booleanValues -> (list)
                               An array of Boolean values.

                               (boolean)

                            doubleValues -> (list)
                               An array of integers.

                               (double)

                            longValues -> (list)
                               An array of floating point numbers.

                               (long)

                            stringValues -> (list)
                               An array of strings.

                               (string)

                     booleanValues -> (list)
                        An array of Boolean values.

                        (boolean)

                     doubleValues -> (list)
                        An array of integers.

                        (double)

                     longValues -> (list)
                        An array of floating point numbers.

                        (long)

                     stringValues -> (list)
                        An array of strings.

                        (string)

                 blobValue -> (blob)
                     A value of BLOB data type.

                 booleanValue -> (boolean)
                     A value of Boolean data type.

                 doubleValue -> (double)
                     A value of double data type.

                 isNull -> (boolean)
                     A NULL value.

                 longValue -> (long)
                     A value of long data type.

                 stringValue -> (string)
                     A value of string data type.

       JSON Syntax:

          [
            {
              "name": "string",
              "typeHint": "JSON"|"UUID"|"TIMESTAMP"|"DATE"|"TIME"|"DECIMAL",
              "value": {
                "arrayValue": {
                  "arrayValues": [
                    {
                      "arrayValues": [
                        { ... recursive ... }
                        ...
                      ],
                      "booleanValues": [true|false, ...],
                      "doubleValues": [double, ...],
                      "longValues": [long, ...],
                      "stringValues": ["string", ...]
                    }
                    ...
                  ],
                  "booleanValues": [true|false, ...],
                  "doubleValues": [double, ...],
                  "longValues": [long, ...],
                  "stringValues": ["string", ...]
                },
                "blobValue": blob,
                "booleanValue": true|false,
                "doubleValue": double,
                "isNull": true|false,
                "longValue": long,
                "stringValue": "string"
              }
            }
            ...
          ]

       --resource-arn (string)
          The  Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.

       --result-set-options (structure)
          Options that control how the result set is returned.

          decimalReturnType -> (string)
              A value that indicates how a field of  DECIMAL  type  is  repre-
              sented in the response. The value of STRING , the default, spec-
              ifies that it is converted to a String value. The value of  DOU-
              BLE_OR_LONG  specifies  that  it is converted to a Long value if
              its scale is 0, or to a Double value otherwise.

              WARNING:
                 Conversion to Double or Long can result  in  roundoff  errors
                 due  to  precision  loss.  We recommend converting to String,
                 especially when working with currency values.

       Shorthand Syntax:

          decimalReturnType=string

       JSON Syntax:

          {
            "decimalReturnType": "STRING"|"DOUBLE_OR_LONG"
          }

       --schema (string)
          The name of the database schema.

          NOTE:
              Currently, the schema parameter isn't supported.

       --secret-arn (string)
          The name or ARN of the secret that enables access to the DB cluster.

       --sql (string)
          The SQL statement to run.

       --transaction-id (string)
          The identifier of a transaction that was started by using the Begin-
          Transaction operation. Specify the transaction ID of the transaction
          that you want to include the SQL statement in.

          If  the  SQL  statement is not part of a transaction, don't set this
          parameter.

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To execute a SQL statement that is part of a transaction

       The following execute-statement example runs a SQL  statement  that  is
       part of a transaction.

          aws rds-data execute-statement \
              --resource-arn "arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster" \
              --database "mydb" \
              --secret-arn "arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret" \
              --sql "update mytable set quantity=5 where id=201" \
              --transaction-id "ABC1234567890xyz"

       Output:

          {
              "numberOfRecordsUpdated": 1
          }

       Example 2: To execute a SQL statement with parameters

       The  following  execute-statement  example  runs  a  SQL statement with
       parameters.

          aws rds-data execute-statement \
              --resource-arn "arn:aws:rds:us-east-1:123456789012:cluster:mydbcluster" \
              --database "mydb" \
              --secret-arn "arn:aws:secretsmanager:us-east-1:123456789012:secret:mysecret" \
              --sql "insert into mytable values (:id, :val)" \
              --parameters "[{\"name\": \"id\", \"value\": {\"longValue\": 1}},{\"name\": \"val\", \"value\": {\"stringValue\": \"value1\"}}]"

       Output:

          {
              "numberOfRecordsUpdated": 1
          }

       For more information, see Using the Data API for Aurora  Serverless  in
       the Amazon RDS User Guide.

OUTPUT
       columnMetadata -> (list)
          Metadata for the columns included in the results.

          (structure)
              Contains the metadata for a column.

              arrayBaseColumnType -> (integer)
                 The type of the column.

              isAutoIncrement -> (boolean)
                 A value that indicates whether the column increments automat-
                 ically.

              isCaseSensitive -> (boolean)
                 A value that indicates whether the column is  case-sensitive.

              isCurrency -> (boolean)
                 A  value  that indicates whether the column contains currency
                 values.

              isSigned -> (boolean)
                 A value that indicates whether an integer column is signed.

              label -> (string)
                 The label for the column.

              name -> (string)
                 The name of the column.

              nullable -> (integer)
                 A value that indicates whether the column is nullable.

              precision -> (integer)
                 The precision value of a decimal number column.

              scale -> (integer)
                 The scale value of a decimal number column.

              schemaName -> (string)
                 The name of the schema that owns the table that includes  the
                 column.

              tableName -> (string)
                 The name of the table that includes the column.

              type -> (integer)
                 The type of the column.

              typeName -> (string)
                 The database-specific data type of the column.

       generatedFields -> (list)
          Values for fields generated during the request.
              <note>  <p>The <code>generatedFields</code> data isn't supported
              by Aurora PostgreSQL. To get the values of generated fields, use
              the  <code>RETURNING</code> clause. For more information, see <a
              href="https://www.postgresql.org/docs/10/dml-return-
              ing.html">Returning  Data  From  Modified  Rows</a> in the Post-
              greSQL documentation.</p> </note>

          (structure)
              Contains a value.

              arrayValue -> (structure)
                 An array of values.

                 arrayValues -> (list)
                     An array of arrays.

                     (structure)
                        Contains an array.

                        arrayValues -> (list)
                            An array of arrays.

                            ( ... recursive ... )

                        booleanValues -> (list)
                            An array of Boolean values.

                            (boolean)

                        doubleValues -> (list)
                            An array of integers.

                            (double)

                        longValues -> (list)
                            An array of floating point numbers.

                            (long)

                        stringValues -> (list)
                            An array of strings.

                            (string)

                 booleanValues -> (list)
                     An array of Boolean values.

                     (boolean)

                 doubleValues -> (list)
                     An array of integers.

                     (double)

                 longValues -> (list)
                     An array of floating point numbers.

                     (long)

                 stringValues -> (list)
                     An array of strings.

                     (string)

              blobValue -> (blob)
                 A value of BLOB data type.

              booleanValue -> (boolean)
                 A value of Boolean data type.

              doubleValue -> (double)
                 A value of double data type.

              isNull -> (boolean)
                 A NULL value.

              longValue -> (long)
                 A value of long data type.

              stringValue -> (string)
                 A value of string data type.

       numberOfRecordsUpdated -> (long)
          The number of records updated by the request.

       records -> (list)
          The records returned by the SQL statement.

          (list)
              (structure)
                 Contains a value.

                 arrayValue -> (structure)
                     An array of values.

                     arrayValues -> (list)
                        An array of arrays.

                        (structure)
                            Contains an array.

                            arrayValues -> (list)
                               An array of arrays.

                               ( ... recursive ... )

                            booleanValues -> (list)
                               An array of Boolean values.

                               (boolean)

                            doubleValues -> (list)
                               An array of integers.

                               (double)

                            longValues -> (list)
                               An array of floating point numbers.

                               (long)

                            stringValues -> (list)
                               An array of strings.

                               (string)

                     booleanValues -> (list)
                        An array of Boolean values.

                        (boolean)

                     doubleValues -> (list)
                        An array of integers.

                        (double)

                     longValues -> (list)
                        An array of floating point numbers.

                        (long)

                     stringValues -> (list)
                        An array of strings.

                        (string)

                 blobValue -> (blob)
                     A value of BLOB data type.

                 booleanValue -> (boolean)
                     A value of Boolean data type.

                 doubleValue -> (double)
                     A value of double data type.

                 isNull -> (boolean)
                     A NULL value.

                 longValue -> (long)
                     A value of long data type.

                 stringValue -> (string)
                     A value of string data type.



                                                           EXECUTE-STATEMENT()
