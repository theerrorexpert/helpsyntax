CREATE-TRIAL-COMPONENT()                              CREATE-TRIAL-COMPONENT()



NAME
       create-trial-component -

DESCRIPTION
       Creates  a  trial  component  ,  which is a stage of a machine learning
       trial . A trial is composed of one or more trial  components.  A  trial
       component can be used in multiple trials.

       Trial  components include pre-processing jobs, training jobs, and batch
       transform jobs.

       When you use SageMaker Studio or the SageMaker Python SDK, all  experi-
       ments,  trials, and trial components are automatically tracked, logged,
       and indexed. When you use  the  Amazon  Web  Services  SDK  for  Python
       (Boto), you must use the logging APIs provided by the SDK.

       You  can  add tags to a trial component and then use the  Search API to
       search for the tags.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-trial-component
          --trial-component-name <value>
          [--display-name <value>]
          [--status <value>]
          [--start-time <value>]
          [--end-time <value>]
          [--parameters <value>]
          [--input-artifacts <value>]
          [--output-artifacts <value>]
          [--metadata-properties <value>]
          [--tags <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --trial-component-name (string)
          The name of the component. The name must be unique  in  your  Amazon
          Web Services account and is not case-sensitive.

       --display-name (string)
          The  name of the component as displayed. The name doesn't need to be
          unique. If DisplayName isn't specified, TrialComponentName  is  dis-
          played.

       --status (structure)
          The status of the component. States include:

          o InProgress

          o Completed

          o Failed

          PrimaryStatus -> (string)
              The status of the trial component.

          Message -> (string)
              If the component failed, a message describing why.

       Shorthand Syntax:

          PrimaryStatus=string,Message=string

       JSON Syntax:

          {
            "PrimaryStatus": "InProgress"|"Completed"|"Failed"|"Stopping"|"Stopped",
            "Message": "string"
          }

       --start-time (timestamp)
          When the component started.

       --end-time (timestamp)
          When the component ended.

       --parameters (map)
          The hyperparameters for the component.

          key -> (string)

          value -> (structure)
              The  value  of  a  hyperparameter.  Only  one  of NumberValue or
              StringValue can be specified.

              This object is specified in the  CreateTrialComponent request.

              StringValue -> (string)
                 The string value of  a  categorical  hyperparameter.  If  you
                 specify  a  value  for  this parameter, you can't specify the
                 NumberValue parameter.

              NumberValue -> (double)
                 The numeric value of a numeric hyperparameter. If you specify
                 a value for this parameter, you can't specify the StringValue
                 parameter.

       Shorthand Syntax:

          KeyName1=StringValue=string,NumberValue=double,KeyName2=StringValue=string,NumberValue=double

       JSON Syntax:

          {"string": {
                "StringValue": "string",
                "NumberValue": double
              }
            ...}

       --input-artifacts (map)
          The input artifacts for the component. Examples of  input  artifacts
          are datasets, algorithms, hyperparameters, source code, and instance
          types.

          key -> (string)

          value -> (structure)
              Represents an input or output artifact of a trial component. You
              specify TrialComponentArtifact as part of the InputArtifacts and
              OutputArtifacts parameters in the  CreateTrialComponent request.

              Examples  of  input artifacts are datasets, algorithms, hyperpa-
              rameters, source code, and instance types.  Examples  of  output
              artifacts are metrics, snapshots, logs, and images.

              MediaType -> (string)
                 The  media  type of the artifact, which indicates the type of
                 data in the artifact file. The media type consists of a  type
                 and  a  subtype  concatenated with a slash (/) character, for
                 example, text/csv, image/jpeg, and s3/uri. The type specifies
                 the  category of the media. The subtype specifies the kind of
                 data.

              Value -> (string)
                 The location of the artifact.

       Shorthand Syntax:

          KeyName1=MediaType=string,Value=string,KeyName2=MediaType=string,Value=string

       JSON Syntax:

          {"string": {
                "MediaType": "string",
                "Value": "string"
              }
            ...}

       --output-artifacts (map)
          The output artifacts for the component. Examples of output artifacts
          are metrics, snapshots, logs, and images.

          key -> (string)

          value -> (structure)
              Represents an input or output artifact of a trial component. You
              specify TrialComponentArtifact as part of the InputArtifacts and
              OutputArtifacts parameters in the  CreateTrialComponent request.

              Examples of input artifacts are datasets,  algorithms,  hyperpa-
              rameters,  source  code,  and instance types. Examples of output
              artifacts are metrics, snapshots, logs, and images.

              MediaType -> (string)
                 The media type of the artifact, which indicates the  type  of
                 data  in the artifact file. The media type consists of a type
                 and a subtype concatenated with a slash  (/)  character,  for
                 example, text/csv, image/jpeg, and s3/uri. The type specifies
                 the category of the media. The subtype specifies the kind  of
                 data.

              Value -> (string)
                 The location of the artifact.

       Shorthand Syntax:

          KeyName1=MediaType=string,Value=string,KeyName2=MediaType=string,Value=string

       JSON Syntax:

          {"string": {
                "MediaType": "string",
                "Value": "string"
              }
            ...}

       --metadata-properties (structure)
          Metadata  properties  of the tracking entity, trial, or trial compo-
          nent.

          CommitId -> (string)
              The commit ID.

          Repository -> (string)
              The repository.

          GeneratedBy -> (string)
              The entity this entity was generated by.

          ProjectId -> (string)
              The project ID.

       Shorthand Syntax:

          CommitId=string,Repository=string,GeneratedBy=string,ProjectId=string

       JSON Syntax:

          {
            "CommitId": "string",
            "Repository": "string",
            "GeneratedBy": "string",
            "ProjectId": "string"
          }

       --tags (list)
          A list of tags to associate with the component. You can use   Search
          API to search on the tags.

          (structure)
              A  tag object that consists of a key and an optional value, used
              to manage metadata for SageMaker Amazon Web Services  resources.

              You  can add tags to notebook instances, training jobs, hyperpa-
              rameter tuning jobs,  batch  transform  jobs,  models,  labeling
              jobs,  work  teams,  endpoint configurations, and endpoints. For
              more information on adding  tags  to  SageMaker  resources,  see
              AddTags .

              For  more information on adding metadata to your Amazon Web Ser-
              vices resources with tagging, see Tagging  Amazon  Web  Services
              resources . For advice on best practices for managing Amazon Web
              Services resources with tagging,  see  Tagging  Best  Practices:
              Implement  an  Effective  Amazon  Web  Services Resource Tagging
              Strategy .

              Key -> (string)
                 The tag key. Tag keys must be unique per resource.

              Value -> (string)
                 The tag value.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       TrialComponentArn -> (string)
          The Amazon Resource Name (ARN) of the trial component.



                                                      CREATE-TRIAL-COMPONENT()
