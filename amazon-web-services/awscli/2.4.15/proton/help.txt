PROTON()                                                              PROTON()



NAME
       proton -

DESCRIPTION
       This  is  the  Proton  Service API Reference. It provides descriptions,
       syntax and usage examples for each of the actions and  data  types  for
       the Proton service.

       The  documentation  for each action shows the Query API request parame-
       ters and the XML response.

       Alternatively, you can use the Amazon Web Services  CLI  to  access  an
       API.  For  more  information,  see the Amazon Web Services Command Line
       Interface User Guide .

       The Proton service is a two-pronged automation  framework.  Administra-
       tors  create  service  templates to provide standardized infrastructure
       and deployment tooling for serverless and container based applications.
       Developers,  in  turn,  select  from the available service templates to
       automate their application or service deployments.

       Because administrators define the infrastructure and tooling that  Pro-
       ton deploys and manages, they need permissions to use all of the listed
       API operations.

       When developers select a specific infrastructure and tooling set,  Pro-
       ton  deploys their applications. To monitor their applications that are
       running on Proton, developers need permissions to the service create  ,
       list  ,  update and delete API operations and the service instance list
       and update API operations.

       To learn more about Proton administration, see the Proton Administrator
       Guide .

       To learn more about deploying serverless and containerized applications
       on Proton, see the Proton User Guide .
          Ensuring Idempotency

       When you make a mutating API request, the request typically  returns  a
       result before the asynchronous workflows of the operation are complete.
       Operations might also time out or encounter other server issues  before
       they're  complete,  even if the request already returned a result. This
       might make it difficult to determine  whether  the  request  succeeded.
       Moreover,  you might need to retry the request multiple times to ensure
       that the operation completes successfully.  However,  if  the  original
       request and the subsequent retries are successful, the operation occurs
       multiple times. This means that you might create  more  resources  than
       you intended.
          Idempotency  ensures  that  an  API request action completes no more
          than one time. With an idempotent request, if the  original  request
          action  completes successfully, any subsequent retries complete suc-
          cessfully without  performing  any  further  actions.  However,  the
          result  might  contain updated information, such as the current cre-
          ation status.

       The following lists of APIs  are  grouped  according  to  methods  that
       ensure idempotency.
          Idempotent create APIs with a client token

       The  API  actions  in  this  list support idempotency with the use of a
       client token . The corresponding Amazon Web Services CLI commands  also
       support  idempotency  using a client token. A client token is a unique,
       case-sensitive string of up to 64 ASCII characters. To make an  idempo-
       tent  API request using one of these actions, specify a client token in
       the request. We recommend that you don't reuse the  same  client  token
       for  other  API  requests. If you dont provide a client token for these
       APIs, a default client token is automatically provided by SDKs.

       Given a request action that has succeeded:

       If you retry the request using the  same  client  token  and  the  same
       parameters,  the  retry succeeds without performing any further actions
       other than returning the original resource detail data in the response.

       If  you  retry the request using the same client token, but one or more
       of the parameters are different, the retry throws a ValidationException
       with an IdempotentParameterMismatch error.

       Client  tokens expire eight hours after a request is made. If you retry
       the request with the expired token, a new resource is created.

       If the original resource is deleted and you retry the  request,  a  new
       resource is created.

       Idempotent create APIs with a client token:

       o CreateEnvironmentTemplateVersion

       o CreateServiceTemplateVersion

       o CreateEnvironmentAccountConnection
          Idempotent create APIs

       Given a request action that has succeeded:

       If  you retry the request with an API from this group, and the original
       resource hasn't been modified, the retry  succeeds  without  performing
       any  further  actions other than returning the original resource detail
       data in the response.

       If the original resource has been modified, the  retry  throws  a  Con-
       flictException .

       If  you retry with different input parameters, the retry throws a Vali-
       dationException with an IdempotentParameterMismatch error.

       Idempotent create APIs:

       o CreateEnvironmentTemplate

       o CreateServiceTemplate

       o CreateEnvironment

       o CreateService
          Idempotent delete APIs

       Given a request action that has succeeded:

       When you retry the request with an API from this group and the resource
       was deleted, its metadata is returned in the response.

       If you retry and the resource doesn't exist, the response is empty.

       In both cases, the retry succeeds.

       Idempotent delete APIs:

       o DeleteEnvironmentTemplate

       o DeleteEnvironmentTemplateVersion

       o DeleteServiceTemplate

       o DeleteServiceTemplateVersion

       o DeleteEnvironmentAccountConnection
          Asynchronous idempotent delete APIs

       Given a request action that has succeeded:

       If  you  retry the request with an API from this group, if the original
       request delete operation  status  is  DELETE_IN_PROGRESS  ,  the  retry
       returns the resource detail data in the response without performing any
       further actions.

       If the original request delete operation is complete, a  retry  returns
       an empty response.

       Asynchronous idempotent delete APIs:

       o DeleteEnvironment

       o DeleteService

AVAILABLE COMMANDS
       o accept-environment-account-connection

       o cancel-environment-deployment

       o cancel-service-instance-deployment

       o cancel-service-pipeline-deployment

       o create-environment

       o create-environment-account-connection

       o create-environment-template

       o create-environment-template-version

       o create-repository

       o create-service

       o create-service-template

       o create-service-template-version

       o create-template-sync-config

       o delete-environment

       o delete-environment-account-connection

       o delete-environment-template

       o delete-environment-template-version

       o delete-repository

       o delete-service

       o delete-service-template

       o delete-service-template-version

       o delete-template-sync-config

       o get-account-settings

       o get-environment

       o get-environment-account-connection

       o get-environment-template

       o get-environment-template-version

       o get-repository

       o get-repository-sync-status

       o get-service

       o get-service-instance

       o get-service-template

       o get-service-template-version

       o get-template-sync-config

       o get-template-sync-status

       o help

       o list-environment-account-connections

       o list-environment-outputs

       o list-environment-provisioned-resources

       o list-environment-template-versions

       o list-environment-templates

       o list-environments

       o list-repositories

       o list-repository-sync-definitions

       o list-service-instance-outputs

       o list-service-instance-provisioned-resources

       o list-service-instances

       o list-service-pipeline-outputs

       o list-service-pipeline-provisioned-resources

       o list-service-template-versions

       o list-service-templates

       o list-services

       o list-tags-for-resource

       o notify-resource-deployment-status-change

       o reject-environment-account-connection

       o tag-resource

       o untag-resource

       o update-account-settings

       o update-environment

       o update-environment-account-connection

       o update-environment-template

       o update-environment-template-version

       o update-service

       o update-service-instance

       o update-service-pipeline

       o update-service-template

       o update-service-template-version

       o update-template-sync-config

       o wait



                                                                      PROTON()
