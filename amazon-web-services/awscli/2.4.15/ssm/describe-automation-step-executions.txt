DESCRIBE-AUTOMATION-STEP-EXECUTIONS()    DESCRIBE-AUTOMATION-STEP-EXECUTIONS()



NAME
       describe-automation-step-executions -

DESCRIPTION
       Information about all active and terminated step executions in an Auto-
       mation workflow.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

       describe-automation-step-executions is a paginated operation.  Multiple
       API  calls  may  be  issued in order to retrieve the entire data set of
       results. You can disable  pagination  by  providing  the  --no-paginate
       argument.  When using --output text and the --query argument on a pagi-
       nated response, the --query argument must extract data from the results
       of the following query expressions: StepExecutions

SYNOPSIS
            describe-automation-step-executions
          --automation-execution-id <value>
          [--filters <value>]
          [--reverse-order | --no-reverse-order]
          [--cli-input-json | --cli-input-yaml]
          [--starting-token <value>]
          [--page-size <value>]
          [--max-items <value>]
          [--generate-cli-skeleton <value>]

OPTIONS
       --automation-execution-id (string)
          The  Automation  execution  ID  for  which  you  want step execution
          descriptions.

       --filters (list)
          One or more filters to limit the number of step executions  returned
          by the request.

          (structure)
              A  filter  to  limit  the  amount  of step execution information
              returned by the call.

              Key -> (string)
                 One or more keys to limit  the  results.  Valid  filter  keys
                 include  the  following:  StepName,  Action, StepExecutionId,
                 StepExecutionStatus, StartTimeBefore, StartTimeAfter.

              Values -> (list)
                 The values of the filter key.

                 (string)

       Shorthand Syntax:

          Key=string,Values=string,string ...

       JSON Syntax:

          [
            {
              "Key": "StartTimeBefore"|"StartTimeAfter"|"StepExecutionStatus"|"StepExecutionId"|"StepName"|"Action",
              "Values": ["string", ...]
            }
            ...
          ]

       --reverse-order | --no-reverse-order (boolean)
          Indicates whether to list step executions in reverse order by  start
          time. The default value is 'false'.

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --starting-token (string)
          A  token to specify where to start paginating. This is the NextToken
          from a previously truncated response.

          For usage examples, see Pagination in the AWS Command Line Interface
          User Guide .

       --page-size (integer)
          The  size of each page to get in the AWS service call. This does not
          affect the number of items returned in the command's output. Setting
          a  smaller  page  size  results  in  more  calls to the AWS service,
          retrieving fewer items in each call. This can help prevent  the  AWS
          service calls from timing out.

          For usage examples, see Pagination in the AWS Command Line Interface
          User Guide .

       --max-items (integer)
          The total number of items to return in the command's output. If  the
          total  number of items available is more than the value specified, a
          NextToken is provided in the command's output. To resume pagination,
          provide the NextToken value in the starting-token argument of a sub-
          sequent command. Do not use the NextToken response element  directly
          outside of the AWS CLI.

          For usage examples, see Pagination in the AWS Command Line Interface
          User Guide .

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To describe all steps for an automation execution

       The  following  describe-automation-step-executions  example   displays
       details about the steps of an Automation execution.

          aws ssm describe-automation-step-executions \
              --automation-execution-id 73c8eef8-f4ee-4a05-820c-e354fEXAMPLE

       Output:

          {
              "StepExecutions": [
                  {
                      "StepName": "startInstances",
                      "Action": "aws:changeInstanceState",
                      "ExecutionStartTime": 1583737234.134,
                      "ExecutionEndTime": 1583737234.672,
                      "StepStatus": "Success",
                      "Inputs": {
                          "DesiredState": "\"running\"",
                          "InstanceIds": "[\"i-0cb99161f6EXAMPLE\"]"
                      },
                      "Outputs": {
                          "InstanceStates": [
                              "running"
                          ]
                      },
                      "StepExecutionId": "95e70479-cf20-4d80-8018-7e4e2EXAMPLE",
                      "OverriddenParameters": {}
                  }
              ]
          }

       Example 2: To describe a specific step for an automation execution

       The   following  describe-automation-step-executions  example  displays
       details about a specific step of an Automation execution.

          aws ssm describe-automation-step-executions \
              --automation-execution-id 73c8eef8-f4ee-4a05-820c-e354fEXAMPLE \
              --filters Key=StepExecutionId,Values=95e70479-cf20-4d80-8018-7e4e2EXAMPLE

       For more information, see Running an Automation Workflow Step  by  Step
       (Command Line) in the AWS Systems Manager User Guide.

OUTPUT
       StepExecutions -> (list)
          A  list of details about the current state of all steps that make up
          an execution.

          (structure)
              Detailed information about an the execution state of an  Automa-
              tion step.

              StepName -> (string)
                 The name of this execution step.

              Action -> (string)
                 The  action  this  step  performs.  The action determines the
                 behavior of the step.

              TimeoutSeconds -> (long)
                 The timeout seconds of the step.

              OnFailure -> (string)
                 The action to take if the step fails. The  default  value  is
                 Abort .

              MaxAttempts -> (integer)
                 The  maximum  number  of tries to run the action of the step.
                 The default value is 1 .

              ExecutionStartTime -> (timestamp)
                 If a step has begun execution, this  contains  the  time  the
                 step  started.  If  the step is in Pending status, this field
                 isn't populated.

              ExecutionEndTime -> (timestamp)
                 If a step has finished execution, this contains the time  the
                 execution ended. If the step hasn't yet concluded, this field
                 isn't populated.

              StepStatus -> (string)
                 The execution status for this step.

              ResponseCode -> (string)
                 The response code returned by the execution of the step.

              Inputs -> (map)
                 Fully-resolved values passed into the step before  execution.

                 key -> (string)

                 value -> (string)

              Outputs -> (map)
                 Returned values from the execution of the step.

                 key -> (string)

                 value -> (list)
                     (string)

              Response -> (string)
                 A message associated with the response code for an execution.

              FailureMessage -> (string)
                 If a step failed, this message  explains  why  the  execution
                 failed.

              FailureDetails -> (structure)
                 Information about the Automation failure.

                 FailureStage -> (string)
                     The  stage  of  the Automation execution when the failure
                     occurred. The stages include the following:  InputValida-
                     tion, PreVerification, Invocation, PostVerification.

                 FailureType -> (string)
                     The type of Automation failure. Failure types include the
                     following: Action, Permission, Throttling,  Verification,
                     Internal.

                 Details -> (map)
                     Detailed information about the Automation step failure.

                     key -> (string)

                     value -> (list)
                        (string)

              StepExecutionId -> (string)
                 The unique ID of a step execution.

              OverriddenParameters -> (map)
                 A  user-specified list of parameters to override when running
                 a step.

                 key -> (string)

                 value -> (list)
                     (string)

              IsEnd -> (boolean)
                 The flag which can  be  used  to  end  automation  no  matter
                 whether the step succeeds or fails.

              NextStep -> (string)
                 The next step after the step succeeds.

              IsCritical -> (boolean)
                 The flag which can be used to help decide whether the failure
                 of current step leads to the Automation failure.

              ValidNextSteps -> (list)
                 Strategies used when step  fails,  we  support  Continue  and
                 Abort.  Abort  will  fail the automation when the step fails.
                 Continue will ignore the failure of current  step  and  allow
                 automation  to run the next step. With conditional branching,
                 we add step:stepName to  support  the  automation  to  go  to
                 another specific step.

                 (string)

              Targets -> (list)
                 The targets for the step execution.

                 (structure)
                     An  array  of  search criteria that targets managed nodes
                     using a key-value pair that you specify.

                     NOTE:
                        One or more targets must be specified for  maintenance
                        window  Run Command-type tasks. Depending on the task,
                        targets are optional for other maintenance window task
                        types  (Automation,  Lambda,  and Step Functions). For
                        more information about running tasks that don't  spec-
                        ify  targets, see Registering maintenance window tasks
                        without targets in the  Amazon  Web  Services  Systems
                        Manager User Guide .

                     Supported formats include the following.

                     o Key=InstanceIds,Val-
                       ues=<instance-id-1>,<instance-id-2>,<instance-id-3>

                     o Key=tag:<my-tag-key>,Val-
                       ues=<my-tag-value-1>,<my-tag-value-2>

                     o Key=tag-key,Values=<my-tag-key-1>,<my-tag-key-2>

                     o Run  Command  and  Maintenance  window  targets  only :
                       Key=resource-groups:Name,Values=<resource-group-name>

                     o Maintenance      window      targets       only       :
                       Key=resource-groups:ResourceTypeFilters,Val-
                       ues=<resource-type-1>,<resource-type-2>

                     o Automation  targets   only   :   Key=ResourceGroup;Val-
                       ues=<resource-group-name>

                     For example:

                     o Key=InstanceIds,Values=i-02573cafcfEXAM-
                       PLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE

                     o Key=tag:CostCenter,Values=CostCenter1,CostCenter2,Cost-
                       Center3

                     o Key=tag-key,Values=Name,Instance-Type,CostCenter

                     o Run  Command  and  Maintenance  window  targets  only :
                       Key=resource-groups:Name,Values=ProductionResourceGroup
                       This  example  demonstrates how to target all resources
                       in the resource group ProductionResourceGroup  in  your
                       maintenance window.

                     o Maintenance       window       targets      only      :
                       Key=resource-groups:ResourceTypeFilters,Val-
                       ues=AWS::EC2::INSTANCE,AWS::EC2::VPC     This   example
                       demonstrates how to target only Amazon Elastic  Compute
                       Cloud  (Amazon  EC2) instances and VPCs in your mainte-
                       nance window.

                     o Automation  targets   only   :   Key=ResourceGroup,Val-
                       ues=MyResourceGroup

                     o State  Manager  association  targets only : Key=Instan-
                       ceIds,Values=*   This example demonstrates how to  tar-
                       get  all  managed  instances in the Amazon Web Services
                       Region where the association was created.

                     For more information about how to send commands that tar-
                     get   managed   nodes  using  Key,Value  parameters,  see
                     Targeting multiple instances in the Amazon  Web  Services
                     Systems Manager User Guide .

                     Key -> (string)
                        User-defined criteria for sending commands that target
                        managed nodes that meet the criteria.

                     Values -> (list)
                        User-defined criteria that maps to Key . For  example,
                        if  you  specified  tag:ServerRole , you could specify
                        value:WebServer to run a  command  on  instances  that
                        include EC2 tags of ServerRole,WebServer .

                        Depending on the type of target, the maximum number of
                        values for a key might be lower than the global  maxi-
                        mum of 50.

                        (string)

              TargetLocation -> (structure)
                 The combination of Amazon Web Services Regions and Amazon Web
                 Services accounts targeted by the current  Automation  execu-
                 tion.

                 Accounts -> (list)
                     The  Amazon Web Services accounts targeted by the current
                     Automation execution.

                     (string)

                 Regions -> (list)
                     The Amazon Web Services Regions targeted by  the  current
                     Automation execution.

                     (string)

                 TargetLocationMaxConcurrency -> (string)
                     The  maximum  number  of  Amazon Web Services Regions and
                     Amazon Web Services accounts allowed to run  the  Automa-
                     tion concurrently.

                 TargetLocationMaxErrors -> (string)
                     The  maximum  number  of errors allowed before the system
                     stops queueing additional Automation executions  for  the
                     currently running Automation.

                 ExecutionRoleName -> (string)
                     The  Automation execution role used by the currently run-
                     ning Automation. If not specified, the default  value  is
                     AWS-SystemsManager-AutomationExecutionRole .

       NextToken -> (string)
          The token to use when requesting the next set of items. If there are
          no additional items to return, the string is empty.



                                         DESCRIBE-AUTOMATION-STEP-EXECUTIONS()
