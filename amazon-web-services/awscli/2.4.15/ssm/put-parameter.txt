PUT-PARAMETER()                                                PUT-PARAMETER()



NAME
       put-parameter -

DESCRIPTION
       Add a parameter to the system.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            put-parameter
          --name <value>
          [--description <value>]
          --value <value>
          [--type <value>]
          [--key-id <value>]
          [--overwrite | --no-overwrite]
          [--allowed-pattern <value>]
          [--tags <value>]
          [--tier <value>]
          [--policies <value>]
          [--data-type <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --name (string)
          The  fully  qualified  name of the parameter that you want to add to
          the system. The fully qualified name includes the complete hierarchy
          of  the  parameter path and name. For parameters in a hierarchy, you
          must include a leading forward slash character (/) when  you  create
          or       reference       a       parameter.       For       example:
          /Dev/DBServer/MySQL/db-string13

          Naming Constraints:

          o Parameter names are case sensitive.

          o A parameter name must be unique  within  an  Amazon  Web  Services
            Region

          o A  parameter  name  can't  be  prefixed  with  "aws  "  or  "ssm "
            (case-insensitive).

          o Parameter names can include only the following  symbols  and  let-
            ters:  a-zA-Z0-9_.-    In  addition,  the slash character ( / ) is
            used to delineate hierarchies in  parameter  names.  For  example:
            /Dev/Production/East/Project-ABC/MyParameter

          o A parameter name can't include spaces.

          o Parameter  hierarchies  are  limited to a maximum depth of fifteen
            levels.

          For additional information about valid values for  parameter  names,
          see  Creating  Systems Manager parameters in the Amazon Web Services
          Systems Manager User Guide .

          NOTE:
              The maximum length constraint listed below includes capacity for
              additional  system  attributes that aren't part of the name. The
              maximum length for a parameter name, including the  full  length
              of  the  parameter  ARN,  is  1011  characters. For example, the
              length of the following parameter name is 65 characters, not  20
              characters:
                 arn:aws:ssm:us-east-2:111122223333:parameter/ExampleParame-
                 terName

       --description (string)
          Information about the parameter that you want to add to the  system.
          Optional but recommended.

          WARNING:
              Don't enter personally identifiable information in this field.

       --value (string)
          The  parameter  value  that  you want to add to the system. Standard
          parameters have a value limit of 4 KB. Advanced  parameters  have  a
          value limit of 8 KB.

          NOTE:
              Parameters  can't be referenced or nested in the values of other
              parameters. You can't include {{}} or {{ssm:*parameter-name*  }}
              in a parameter value.

       --type (string)
          The type of parameter that you want to add to the system.

          NOTE:
              SecureString  isn't  currently supported for CloudFormation tem-
              plates.

          Items in a StringList must be separated by a comma  (,).  You  can't
          use  other  punctuation  or special character to escape items in the
          list. If you have a parameter value that requires a comma, then  use
          the String data type.

          WARNING:
              Specifying  a  parameter  type  isn't  required  when updating a
              parameter. You must specify a parameter  type  when  creating  a
              parameter.

          Possible values:

          o String

          o StringList

          o SecureString

       --key-id (string)
          The  Key Management Service (KMS) ID that you want to use to encrypt
          a parameter. Either the default KMS key  automatically  assigned  to
          your  Amazon  Web  Services  account  or  a custom key. Required for
          parameters that use the SecureString data type.

          If you don't specify a key ID, the system uses the default key asso-
          ciated with your Amazon Web Services account.

          o To  use  your  default KMS key, choose the SecureString data type,
            and do not specify the Key ID when you create the  parameter.  The
            system automatically populates Key ID with your default KMS key.

          o To  use  a  custom KMS key, choose the SecureString data type with
            the Key ID parameter.

       --overwrite | --no-overwrite (boolean)
          Overwrite an existing parameter. The default value is false .

       --allowed-pattern (string)
          A regular expression used to validate the parameter value. For exam-
          ple,  for  String  types  with values restricted to numbers, you can
          specify the following: AllowedPattern=^d+$

       --tags (list)
          Optional metadata that you assign to a resource. Tags enable you  to
          categorize  a resource in different ways, such as by purpose, owner,
          or environment. For example, you might want to tag a Systems Manager
          parameter  to identify the type of resource to which it applies, the
          environment, or the type of configuration  data  referenced  by  the
          parameter.  In  this case, you could specify the following key-value
          pairs:

          o Key=Resource,Value=S3bucket

          o Key=OS,Value=Windows

          o Key=ParameterType,Value=LicenseKey

          NOTE:
              To add tags to an existing Systems Manager  parameter,  use  the
              AddTagsToResource operation.

          (structure)
              Metadata  that you assign to your Amazon Web Services resources.
              Tags enable you to categorize your resources in different  ways,
              for  example,  by  purpose, owner, or environment. In Amazon Web
              Services Systems Manager, you can apply tags to Systems  Manager
              documents  (SSM  documents), managed nodes, maintenance windows,
              parameters, patch baselines, OpsItems, and OpsMetadata.

              Key -> (string)
                 The name of the tag.

              Value -> (string)
                 The value of the tag.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --tier (string)
          The parameter tier to assign to a parameter.

          Parameter Store offers a standard tier  and  an  advanced  tier  for
          parameters.  Standard  parameters  have a content size limit of 4 KB
          and can't be configured to use parameter policies. You can create  a
          maximum  of  10,000 standard parameters for each Region in an Amazon
          Web Services account. Standard parameters are offered  at  no  addi-
          tional cost.

          Advanced  parameters  have  a  content size limit of 8 KB and can be
          configured to use parameter policies. You can create  a  maximum  of
          100,000  advanced  parameters  for each Region in an Amazon Web Ser-
          vices account. Advanced parameters incur a charge. For more informa-
          tion,  see  Standard  and advanced parameter tiers in the Amazon Web
          Services Systems Manager User Guide .

          You can change a standard parameter to  an  advanced  parameter  any
          time.  But  you  can't  revert  an  advanced parameter to a standard
          parameter. Reverting an advanced parameter to a  standard  parameter
          would result in data loss because the system would truncate the size
          of the parameter from 8 KB to 4 KB. Reverting would also remove  any
          policies  attached to the parameter. Lastly, advanced parameters use
          a different form of encryption than standard parameters.

          If you no longer need an advanced parameter, or  if  you  no  longer
          want  to incur charges for an advanced parameter, you must delete it
          and recreate it as a new standard parameter.
              Using the Default Tier Configuration

          In PutParameter requests, you can specify the  tier  to  create  the
          parameter  in. Whenever you specify a tier in the request, Parameter
          Store creates or updates the parameter according  to  that  request.
          However,  if  you don't specify a tier in a request, Parameter Store
          assigns the tier based on the current Parameter Store  default  tier
          configuration.

          The  default  tier when you begin using Parameter Store is the stan-
          dard-parameter tier. If you use the advanced-parameter tier, you can
          specify one of the following as the default:

          o Advanced  :  With  this  option,  Parameter  Store  evaluates  all
            requests as advanced parameters.

          o Intelligent-Tiering : With this option, Parameter Store  evaluates
            each  request  to  determine  if  the  parameter  is  standard  or
            advanced.  If the request doesn't include any options that require
            an  advanced  parameter,  the  parameter  is  created in the stan-
            dard-parameter tier. If one or more options requiring an  advanced
            parameter  are  included  in the request, Parameter Store create a
            parameter in the advanced-parameter tier. This approach helps con-
            trol  your  parameter-related  costs  by  always creating standard
            parameters unless an advanced parameter is necessary.

          Options that require an advanced parameter include the following:

          o The content size of the parameter is more than 4 KB.

          o The parameter uses a parameter policy.

          o More than 10,000 parameters already exist in your Amazon Web  Ser-
            vices account in the current Amazon Web Services Region.

          For  more information about configuring the default tier option, see
          Specifying a default parameter tier in the Amazon Web Services  Sys-
          tems Manager User Guide .

          Possible values:

          o Standard

          o Advanced

          o Intelligent-Tiering

       --policies (string)
          One or more policies to apply to a parameter. This operation takes a
          JSON array. Parameter Store, a capability  of  Amazon  Web  Services
          Systems Manager supports the following policy types:

          Expiration: This policy deletes the parameter after it expires. When
          you create the policy, you specify  the  expiration  date.  You  can
          update the expiration date and time by updating the policy. Updating
          the parameter doesn't affect the expiration date and time. When  the
          expiration time is reached, Parameter Store deletes the parameter.

          ExpirationNotification:  This  policy  initiates  an event in Amazon
          CloudWatch Events that notifies you about the expiration.  By  using
          this  policy, you can receive notification before or after the expi-
          ration time is reached, in units of days or hours.

          NoChangeNotification: This  policy  initiates  a  CloudWatch  Events
          event  if a parameter hasn't been modified for a specified period of
          time. This policy type is useful when, for example, a  secret  needs
          to be changed within a period of time, but it hasn't been changed.

          All  existing  policies are preserved until you send new policies or
          an empty policy. For more information about parameter policies,  see
          Assigning parameter policies .

       --data-type (string)
          The  data  type for a String parameter. Supported data types include
          plain text and Amazon Machine Image (AMI) IDs.
              The following data type values are supported.

          o text

          o aws:ec2:image

          When you create a String parameter and specify aws:ec2:image ,  Ama-
          zon Web Services Systems Manager validates the parameter value is in
          the required format, such as ami-12345abcdeEXAMPLE ,  and  that  the
          specified  AMI is available in your Amazon Web Services account. For
          more information, see Native parameter support  for  Amazon  Machine
          Image  (AMI)  IDs  in  the  Amazon Web Services Systems Manager User
          Guide .

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To change a parameter value

       The following put-parameter example changes the value of the  specified
       parameter.

          aws ssm put-parameter \
              --name "MyStringParameter" \
              --type "String" \
              --value "Vici" \
              --overwrite

       Output:

          {
              "Version": 2,
              "Tier": "Standard"
          }

       For more information, see Create a Systems Manager parameter (AWS CLI),
       'Managing               parameter               tiers                <-
       https://docs.aws.amazon.com/systems-manager/latest/userguide/parame-
       ter-store-advanced-parameters.html>`__,  and  Working  with   parameter
       policies in the AWS Systems Manager User Guide.

       Example 2: To create an advanced parameter

       The following put-parameter example creates an advanced parameter.

          aws ssm put-parameter \
              --name "MyAdvancedParameter" \
              --description "This is an advanced parameter" \
              --value "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat [truncated]" \
              --type "String" \
              --tier Advanced

       Output:

          {
              "Version": 1,
              "Tier": "Advanced"
          }

       For more information, see Create a Systems Manager parameter (AWS CLI),
       'Managing               parameter               tiers                <-
       https://docs.aws.amazon.com/systems-manager/latest/userguide/parame-
       ter-store-advanced-parameters.html>`__,  and  Working  with   parameter
       policies in the AWS Systems Manager User Guide.

       Example 3: To convert a standard parameter to an advanced parameter

       The following put-parameter example converts a existing standard param-
       eter into an advanced parameter.

          aws ssm put-parameter \
              --name "MyConvertedParameter" \
              --value "abc123" \
              --type "String" \
              --tier Advanced \
              --overwrite

       Output:

          {
              "Version": 2,
              "Tier": "Advanced"
          }

       For more information, see Create a Systems Manager parameter (AWS CLI),
       'Managing                parameter               tiers               <-
       https://docs.aws.amazon.com/systems-manager/latest/userguide/parame-
       ter-store-advanced-parameters.html>`__,   and  Working  with  parameter
       policies in the AWS Systems Manager User Guide.

       Example 4: To create a parameter with a policy attached

       The following put-parameter example creates an advanced parameter  with
       a parameter policy attached.

          aws ssm put-parameter \
              --name "/Finance/Payroll/q2accesskey" \
              --value "P@sSwW)rd" \
              --type "SecureString" \
              --tier Advanced \
              --policies "[{\"Type\":\"Expiration\",\"Version\":\"1.0\",\"Attributes\":{\"Timestamp\":\"2020-06-30T00:00:00.000Z\"}},{\"Type\":\"ExpirationNotification\",\"Version\":\"1.0\",\"Attributes\":{\"Before\":\"5\",\"Unit\":\"Days\"}},{\"Type\":\"NoChangeNotification\",\"Version\":\"1.0\",\"Attributes\":{\"After\":\"60\",\"Unit\":\"Days\"}}]"

       Output:

          {
              "Version": 1,
              "Tier": "Advanced"
          }

       For more information, see Create a Systems Manager parameter (AWS CLI),
       'Managing               parameter               tiers                <-
       https://docs.aws.amazon.com/systems-manager/latest/userguide/parame-
       ter-store-advanced-parameters.html>`__,  and  Working  with   parameter
       policies in the AWS Systems Manager User Guide.

       Example 5: To add a policy to an existing parameter

       The  following  put-parameter  example attaches a policy to an existing
       advanced parameter.

          aws ssm put-parameter \
              --name "/Finance/Payroll/q2accesskey" \
              --value "N3wP@sSwW)rd" \
              --type "SecureString" \
              --tier Advanced \
              --policies "[{\"Type\":\"Expiration\",\"Version\":\"1.0\",\"Attributes\":{\"Timestamp\":\"2020-06-30T00:00:00.000Z\"}},{\"Type\":\"ExpirationNotification\",\"Version\":\"1.0\",\"Attributes\":{\"Before\":\"5\",\"Unit\":\"Days\"}},{\"Type\":\"NoChangeNotification\",\"Version\":\"1.0\",\"Attributes\":{\"After\":\"60\",\"Unit\":\"Days\"}}]"
              --overwrite

       Output:

          {
              "Version": 2,
              "Tier": "Advanced"
          }

       For more information, see Create a Systems Manager parameter (AWS CLI),
       'Managing                parameter               tiers               <-
       https://docs.aws.amazon.com/systems-manager/latest/userguide/parame-
       ter-store-advanced-parameters.html>`__,   and  Working  with  parameter
       policies in the AWS Systems Manager User Guide.

OUTPUT
       Version -> (long)
          The new version number of a  parameter.  If  you  edit  a  parameter
          value,  Parameter  Store  automatically  creates  a  new version and
          assigns this new version a unique ID. You can reference a  parameter
          version  ID  in  API operations or in Systems Manager documents (SSM
          documents). By default, if you don't specify a specific version, the
          system  returns  the  latest  parameter  value  when  a parameter is
          called.

       Tier -> (string)
          The tier assigned to the parameter.



                                                               PUT-PARAMETER()
