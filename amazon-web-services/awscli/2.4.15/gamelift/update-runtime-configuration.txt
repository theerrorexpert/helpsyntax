UPDATE-RUNTIME-CONFIGURATION()                  UPDATE-RUNTIME-CONFIGURATION()



NAME
       update-runtime-configuration -

DESCRIPTION
       Updates  the  current  runtime  configuration  for the specified fleet,
       which tells GameLift how to launch server processes on all instances in
       the  fleet.  You can update a fleet's runtime configuration at any time
       after the fleet is created; it does not need to be in ACTIVE status.

       To update runtime configuration, specify the fleet  ID  and  provide  a
       RuntimeConfiguration  with  an updated set of server process configura-
       tions.

       If successful, the fleet's runtime configuration settings are  updated.
       Each  instance  in the fleet regularly checks for and retrieves updated
       runtime configurations. Instances immediately begin complying with  the
       new  configuration  by  launching new server processes or not replacing
       existing processes when they shut down. Updating a fleet's runtime con-
       figuration never affects existing server processes.
          Learn more

          Setting up GameLift fleets

          Related actions
              CreateFleetLocations  |  UpdateFleetAttributes |  UpdateFleetCa-
              pacity |  UpdateFleetPortSettings |   UpdateRuntimeConfiguration
              |   StopFleetActions  |  StartFleetActions |  PutScalingPolicy |
              DeleteFleet |  DeleteFleetLocations |  DeleteScalingPolicy | All
              APIs by task

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            update-runtime-configuration
          --fleet-id <value>
          --runtime-configuration <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --fleet-id (string)
          A  unique  identifier  for the fleet to update runtime configuration
          for. You can use either the fleet ID or ARN value.

       --runtime-configuration (structure)
          Instructions for launching server processes on each instance in  the
          fleet. Server processes run either a custom game build executable or
          a Realtime Servers script. The runtime configuration lists the types
          of  server  processes to run on an instance, how to launch them, and
          the number of processes to run concurrently.

          ServerProcesses -> (list)
              A collection of server process configurations that identify what
              server processes to run on each instance in a fleet.

              (structure)
                 A  set of instructions for launching server processes on each
                 instance in a fleet. Server  processes  run  either  an  exe-
                 cutable  in a custom game build or a Realtime Servers script.
                 Server process configurations are part of a fleet's  Runtime-
                 Configuration .

                 LaunchPath -> (string)
                     The  location  of a game build executable or the Realtime
                     script file  that  contains  the  Init()  function.  Game
                     builds and Realtime scripts are installed on instances at
                     the root:

                     o Windows (custom game builds only): C:\game  .  Example:
                       "C:\game\MyGame\server.exe "

                     o Linux:          /local/game         .         Examples:
                       "/local/game/MyGame/server.exe " or  "/local/game/MyRe-
                       altimeScript.js "

                 Parameters -> (string)
                     An optional list of parameters to pass to the server exe-
                     cutable or Realtime script on launch.

                 ConcurrentExecutions -> (integer)
                     The number of server processes using  this  configuration
                     that run concurrently on each instance.

          MaxConcurrentGameSessionActivations -> (integer)
              The  number of game sessions in status ACTIVATING to allow on an
              instance. This setting limits the instance resources that can be
              used for new game activations at any one time.

          GameSessionActivationTimeoutSeconds -> (integer)
              The  maximum amount of time (in seconds) allowed to launch a new
              game session and have it report ready to  host  players.  During
              this  time,  the  game  session is in status ACTIVATING . If the
              game session does not become active before the  timeout,  it  is
              ended and the game session status is changed to TERMINATED .

       Shorthand Syntax:

          ServerProcesses=[{LaunchPath=string,Parameters=string,ConcurrentExecutions=integer},{LaunchPath=string,Parameters=string,ConcurrentExecutions=integer}],MaxConcurrentGameSessionActivations=integer,GameSessionActivationTimeoutSeconds=integer

       JSON Syntax:

          {
            "ServerProcesses": [
              {
                "LaunchPath": "string",
                "Parameters": "string",
                "ConcurrentExecutions": integer
              }
              ...
            ],
            "MaxConcurrentGameSessionActivations": integer,
            "GameSessionActivationTimeoutSeconds": integer
          }

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       RuntimeConfiguration -> (structure)
          The  runtime  configuration currently in use by all instances in the
          fleet. If the update was successful, all property changes are shown.

          ServerProcesses -> (list)
              A collection of server process configurations that identify what
              server processes to run on each instance in a fleet.

              (structure)
                 A set of instructions for launching server processes on  each
                 instance  in  a  fleet.  Server  processes run either an exe-
                 cutable in a custom game build or a Realtime Servers  script.
                 Server process configurations are part of a fleet's  Runtime-
                 Configuration .

                 LaunchPath -> (string)
                     The location of a game build executable or  the  Realtime
                     script  file  that  contains  the  Init()  function. Game
                     builds and Realtime scripts are installed on instances at
                     the root:

                     o Windows  (custom  game builds only): C:\game . Example:
                       "C:\game\MyGame\server.exe "

                     o Linux:         /local/game         .          Examples:
                       "/local/game/MyGame/server.exe  " or "/local/game/MyRe-
                       altimeScript.js "

                 Parameters -> (string)
                     An optional list of parameters to pass to the server exe-
                     cutable or Realtime script on launch.

                 ConcurrentExecutions -> (integer)
                     The  number  of server processes using this configuration
                     that run concurrently on each instance.

          MaxConcurrentGameSessionActivations -> (integer)
              The number of game sessions in status ACTIVATING to allow on  an
              instance. This setting limits the instance resources that can be
              used for new game activations at any one time.

          GameSessionActivationTimeoutSeconds -> (integer)
              The maximum amount of time (in seconds) allowed to launch a  new
              game  session  and  have it report ready to host players. During
              this time, the game session is in status  ACTIVATING  .  If  the
              game  session  does  not become active before the timeout, it is
              ended and the game session status is changed to TERMINATED .



                                                UPDATE-RUNTIME-CONFIGURATION()
