CREATE-FLEET()                                                  CREATE-FLEET()



NAME
       create-fleet -

DESCRIPTION
       Creates  a fleet of Amazon Elastic Compute Cloud (Amazon EC2) instances
       to host your custom game server or Realtime Servers. Use this operation
       to  configure  the  computing  resources  for  your  fleet  and provide
       instructions for running game servers on each instance.

       Most GameLift  fleets  can  deploy  instances  to  multiple  locations,
       including  the home Region (where the fleet is created) and an optional
       set of remote locations. Fleets that are created in the  following  AWS
       Regions  support multiple locations: us-east-1 (N. Virginia), us-west-2
       (Oregon), eu-central-1 (Frankfurt), eu-west-1 (Ireland), ap-southeast-2
       (Sydney),  ap-northeast-1  (Tokyo),  and ap-northeast-2 (Seoul). Fleets
       that are created in other GameLift Regions can deploy instances in  the
       fleet's  home  Region only. All fleet instances use the same configura-
       tion regardless of location; however, you can adjust capacity  settings
       and turn auto-scaling on/off for each location.

       To  create  a  fleet, choose the hardware for your instances, specify a
       game server build or Realtime script to deploy, and provide  a  runtime
       configuration  to  direct GameLift how to start and run game servers on
       each instance in the fleet. Set permissions for inbound traffic to your
       game  servers,  and enable optional features as needed. When creating a
       multi-location fleet, provide a list of additional remote locations.

       If successful, this operation creates a new Fleet resource  and  places
       it in NEW status, which prompts GameLift to initiate the fleet creation
       workflow . You can track fleet creation by checking fleet status  using
       DescribeFleetAttributes  and   DescribeFleetLocationAttributes /, or by
       monitoring fleet creation events using  DescribeFleetEvents .  As  soon
       as  the fleet status changes to ACTIVE , you can enable automatic scal-
       ing for the fleet with  PutScalingPolicy and set capacity for the  home
       Region with  UpdateFleetCapacity . When the status of each remote loca-
       tion reaches ACTIVE , you can set capacity by location  using   Update-
       FleetCapacity .
          Learn more

          Setting up fleets

          Debug fleet creation issues

          Multi-location fleets

          Related actions
              CreateFleet   |    UpdateFleetCapacity   |   PutScalingPolicy  |
              DescribeEC2InstanceLimits    |     DescribeFleetAttributes     |
              DescribeFleetLocationAttributes   |    UpdateFleetAttributes   |
              StopFleetActions |  DeleteFleet | All APIs by task

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-fleet
          --name <value>
          [--description <value>]
          [--build-id <value>]
          [--script-id <value>]
          [--server-launch-path <value>]
          [--server-launch-parameters <value>]
          [--log-paths <value>]
          --ec2-instance-type <value>
          [--ec2-inbound-permissions <value>]
          [--new-game-session-protection-policy <value>]
          [--runtime-configuration <value>]
          [--resource-creation-limit-policy <value>]
          [--metric-groups <value>]
          [--peer-vpc-aws-account-id <value>]
          [--peer-vpc-id <value>]
          [--fleet-type <value>]
          [--instance-role-arn <value>]
          [--certificate-configuration <value>]
          [--locations <value>]
          [--tags <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --name (string)
          A descriptive label that is associated with a fleet. Fleet names  do
          not need to be unique.

       --description (string)
          A human-readable description of the fleet.

       --build-id (string)
          The  unique identifier for a custom game server build to be deployed
          on fleet instances. You can use either the  build  ID  or  ARN.  The
          build  must  be uploaded to GameLift and in READY status. This fleet
          property cannot be changed later.

       --script-id (string)
          The unique identifier for a  Realtime  configuration  script  to  be
          deployed  on  fleet  instances.  You can use either the script ID or
          ARN. Scripts must be uploaded to  GameLift  prior  to  creating  the
          fleet. This fleet property cannot be changed later.

       --server-launch-path (string)
          This parameter is no longer used. Specify a server launch path using
          the RuntimeConfiguration parameter. Requests that use this parameter
          instead continue to be valid.

       --server-launch-parameters (string)
          This  parameter  is no longer used. Specify server launch parameters
          using the RuntimeConfiguration parameter.  Requests  that  use  this
          parameter instead continue to be valid.

       --log-paths (list)
              This  parameter  is  no  longer  used. To specify where GameLift
              should store log files once a server process shuts down, use the
              GameLift  server  API  ProcessReady()  and  specify  one or more
              directory paths in logParameters . See more information  in  the
              Server API Reference .

          (string)

       Syntax:

          "string" "string" ...

       --ec2-instance-type (string)
          The  GameLift-supported  EC2  instance  type  to  use  for all fleet
          instances. Instance type determines  the  computing  resources  that
          will be used to host your game servers, including CPU, memory, stor-
          age, and networking capacity. See  Amazon  EC2  Instance  Types  for
          detailed descriptions of EC2 instance types.

          Possible values:

          o t2.micro

          o t2.small

          o t2.medium

          o t2.large

          o c3.large

          o c3.xlarge

          o c3.2xlarge

          o c3.4xlarge

          o c3.8xlarge

          o c4.large

          o c4.xlarge

          o c4.2xlarge

          o c4.4xlarge

          o c4.8xlarge

          o c5.large

          o c5.xlarge

          o c5.2xlarge

          o c5.4xlarge

          o c5.9xlarge

          o c5.12xlarge

          o c5.18xlarge

          o c5.24xlarge

          o c5a.large

          o c5a.xlarge

          o c5a.2xlarge

          o c5a.4xlarge

          o c5a.8xlarge

          o c5a.12xlarge

          o c5a.16xlarge

          o c5a.24xlarge

          o r3.large

          o r3.xlarge

          o r3.2xlarge

          o r3.4xlarge

          o r3.8xlarge

          o r4.large

          o r4.xlarge

          o r4.2xlarge

          o r4.4xlarge

          o r4.8xlarge

          o r4.16xlarge

          o r5.large

          o r5.xlarge

          o r5.2xlarge

          o r5.4xlarge

          o r5.8xlarge

          o r5.12xlarge

          o r5.16xlarge

          o r5.24xlarge

          o r5a.large

          o r5a.xlarge

          o r5a.2xlarge

          o r5a.4xlarge

          o r5a.8xlarge

          o r5a.12xlarge

          o r5a.16xlarge

          o r5a.24xlarge

          o m3.medium

          o m3.large

          o m3.xlarge

          o m3.2xlarge

          o m4.large

          o m4.xlarge

          o m4.2xlarge

          o m4.4xlarge

          o m4.10xlarge

          o m5.large

          o m5.xlarge

          o m5.2xlarge

          o m5.4xlarge

          o m5.8xlarge

          o m5.12xlarge

          o m5.16xlarge

          o m5.24xlarge

          o m5a.large

          o m5a.xlarge

          o m5a.2xlarge

          o m5a.4xlarge

          o m5a.8xlarge

          o m5a.12xlarge

          o m5a.16xlarge

          o m5a.24xlarge

       --ec2-inbound-permissions (list)
          The  allowed  IP address ranges and port settings that allow inbound
          traffic to access game sessions on this fleet. If the fleet is host-
          ing  a  custom  game build, this property must be set before players
          can connect to game sessions. For Realtime Servers fleets,  GameLift
          automatically sets TCP and UDP ranges.

          (structure)
              A  range  of  IP  addresses and port settings that allow inbound
              traffic to connect to server  processes  on  an  instance  in  a
              fleet.  New game sessions are assigned an IP address/port number
              combination, which must fall into the  fleet's  allowed  ranges.
              Fleets  with custom game builds must have permissions explicitly
              set. For Realtime Servers fleets, GameLift  automatically  opens
              two port ranges, one for TCP messaging and one for UDP.
                 Related actions
                     DescribeFleetPortSettings

              FromPort -> (integer)
                 A starting value for a range of allowed port numbers.

              ToPort -> (integer)
                 An  ending  value  for  a range of allowed port numbers. Port
                 numbers are end-inclusive. This value  must  be  higher  than
                 FromPort .

              IpRange -> (string)
                 A range of allowed IP addresses. This value must be expressed
                 in CIDR notation. Example: "000.000.000.000/[subnet  mask]  "
                 or optionally the shortened version "0.0.0.0/[subnet mask] ".

              Protocol -> (string)
                 The network communication protocol used by the fleet.

       Shorthand Syntax:

          FromPort=integer,ToPort=integer,IpRange=string,Protocol=string ...

       JSON Syntax:

          [
            {
              "FromPort": integer,
              "ToPort": integer,
              "IpRange": "string",
              "Protocol": "TCP"|"UDP"
            }
            ...
          ]

       --new-game-session-protection-policy (string)
          The status of termination protection for active game sessions on the
          fleet.  By  default,  this property is set to NoProtection . You can
          also set game session protection for an individual game  session  by
          calling  UpdateGameSession .

          o NoProtection - Game sessions can be terminated during active game-
            play as a result of a scale-down event.

          o FullProtection - Game sessions in ACTIVE status cannot  be  termi-
            nated during a scale-down event.

          Possible values:

          o NoProtection

          o FullProtection

       --runtime-configuration (structure)
          Instructions  for  how  to  launch  and maintain server processes on
          instances in the fleet. The runtime  configuration  defines  one  or
          more  server  process  configurations, each identifying a build exe-
          cutable or Realtime script file and the number of processes of  that
          type to run concurrently.

          NOTE:
              The  RuntimeConfiguration parameter is required unless the fleet
              is being configured using the older parameters  ServerLaunchPath
              and ServerLaunchParameters , which are still supported for back-
              ward compatibility.

          ServerProcesses -> (list)
              A collection of server process configurations that identify what
              server processes to run on each instance in a fleet.

              (structure)
                 A  set of instructions for launching server processes on each
                 instance in a fleet. Server  processes  run  either  an  exe-
                 cutable  in a custom game build or a Realtime Servers script.
                 Server process configurations are part of a fleet's  Runtime-
                 Configuration .

                 LaunchPath -> (string)
                     The  location  of a game build executable or the Realtime
                     script file  that  contains  the  Init()  function.  Game
                     builds and Realtime scripts are installed on instances at
                     the root:

                     o Windows (custom game builds only): C:\game  .  Example:
                       "C:\game\MyGame\server.exe "

                     o Linux:          /local/game         .         Examples:
                       "/local/game/MyGame/server.exe " or  "/local/game/MyRe-
                       altimeScript.js "

                 Parameters -> (string)
                     An optional list of parameters to pass to the server exe-
                     cutable or Realtime script on launch.

                 ConcurrentExecutions -> (integer)
                     The number of server processes using  this  configuration
                     that run concurrently on each instance.

          MaxConcurrentGameSessionActivations -> (integer)
              The  number of game sessions in status ACTIVATING to allow on an
              instance. This setting limits the instance resources that can be
              used for new game activations at any one time.

          GameSessionActivationTimeoutSeconds -> (integer)
              The  maximum amount of time (in seconds) allowed to launch a new
              game session and have it report ready to  host  players.  During
              this  time,  the  game  session is in status ACTIVATING . If the
              game session does not become active before the  timeout,  it  is
              ended and the game session status is changed to TERMINATED .

       Shorthand Syntax:

          ServerProcesses=[{LaunchPath=string,Parameters=string,ConcurrentExecutions=integer},{LaunchPath=string,Parameters=string,ConcurrentExecutions=integer}],MaxConcurrentGameSessionActivations=integer,GameSessionActivationTimeoutSeconds=integer

       JSON Syntax:

          {
            "ServerProcesses": [
              {
                "LaunchPath": "string",
                "Parameters": "string",
                "ConcurrentExecutions": integer
              }
              ...
            ],
            "MaxConcurrentGameSessionActivations": integer,
            "GameSessionActivationTimeoutSeconds": integer
          }

       --resource-creation-limit-policy (structure)
          A  policy that limits the number of game sessions that an individual
          player can create on instances in this fleet within a specified span
          of time.

          NewGameSessionsPerCreator -> (integer)
              The  maximum number of game sessions that an individual can cre-
              ate during the policy period.

          PolicyPeriodInMinutes -> (integer)
              The time span used in evaluating  the  resource  creation  limit
              policy.

       Shorthand Syntax:

          NewGameSessionsPerCreator=integer,PolicyPeriodInMinutes=integer

       JSON Syntax:

          {
            "NewGameSessionsPerCreator": integer,
            "PolicyPeriodInMinutes": integer
          }

       --metric-groups (list)
          The  name  of an AWS CloudWatch metric group to add this fleet to. A
          metric group is used to aggregate the metrics for  multiple  fleets.
          You  can  specify an existing metric group name or set a new name to
          create a new metric group. A fleet can be included in only one  met-
          ric group at a time.

          (string)

       Syntax:

          "string" "string" ...

       --peer-vpc-aws-account-id (string)
          Used when peering your GameLift fleet with a VPC, the unique identi-
          fier for the AWS account that  owns  the  VPC.  You  can  find  your
          account ID in the AWS Management Console under account settings.

       --peer-vpc-id (string)
          A  unique identifier for a VPC with resources to be accessed by your
          GameLift fleet. The VPC must be in the same Region as your fleet. To
          look  up  a VPC ID, use the VPC Dashboard in the AWS Management Con-
          sole. Learn more about VPC peering  in  VPC  Peering  with  GameLift
          Fleets .

       --fleet-type (string)
          Indicates whether to use On-Demand or Spot instances for this fleet.
          By default, this property is set to ON_DEMAND  .  Learn  more  about
          when  to  use On-Demand versus Spot Instances . This property cannot
          be changed after the fleet is created.

          Possible values:

          o ON_DEMAND

          o SPOT

       --instance-role-arn (string)
          A unique identifier for an AWS IAM role that manages access to  your
          AWS  services.  With  an instance role ARN set, any application that
          runs on an instance in this fleet can  assume  the  role,  including
          install  scripts,  server  processes,  and  daemons (background pro-
          cesses). Create a role or look up a role's  ARN  by  using  the  IAM
          dashboard  in  the  AWS  Management  Console. Learn more about using
          on-box  credentials  for  your  game  servers  at  Access   external
          resources from a game server . This property cannot be changed after
          the fleet is created.

       --certificate-configuration (structure)
          Prompts GameLift to generate a TLS/SSL certificate  for  the  fleet.
          TLS  certificates  are  used  for  encrypting  traffic  between game
          clients and the game  servers  that  are  running  on  GameLift.  By
          default,  the  CertificateConfiguration  is  set to DISABLED . Learn
          more at Securing Client/Server Communication . This property  cannot
          be changed after the fleet is created.

          Note:  This  feature requires the AWS Certificate Manager (ACM) ser-
          vice, which is not available in all AWS regions. When working  in  a
          region  that does not support this feature, a fleet creation request
          with certificate generation fails with a 4xx error.

          CertificateType -> (string)
              Indicates whether a  TLS/SSL  certificate  is  generated  for  a
              fleet.

              Valid values include:

              o GENERATED - Generate a TLS/SSL certificate for this fleet.

              o DISABLED - (default) Do not generate a TLS/SSL certificate for
                this fleet.

       Shorthand Syntax:

          CertificateType=string

       JSON Syntax:

          {
            "CertificateType": "DISABLED"|"GENERATED"
          }

       --locations (list)
          A set of remote locations to deploy additional instances to and man-
          age  as part of the fleet. This parameter can only be used when cre-
          ating fleets in AWS Regions that support multiple locations. You can
          add  any  GameLift-supported AWS Region as a remote location, in the
          form of an AWS Region code such as us-west-2 .  To  create  a  fleet
          with instances in the home Region only, omit this parameter.

          (structure)
              A  remote  location  where a multi-location fleet can deploy EC2
              instances for game hosting.
                 Related actions
                     CreateFleet

              Location -> (string)
                 An AWS Region code, such as us-west-2 .

       Shorthand Syntax:

          Location=string ...

       JSON Syntax:

          [
            {
              "Location": "string"
            }
            ...
          ]

       --tags (list)
          A list of labels to assign to  the  new  fleet  resource.  Tags  are
          developer-defined  key-value pairs. Tagging AWS resources are useful
          for resource management, access management and cost allocation.  For
          more  information, see Tagging AWS Resources in the AWS General Ref-
          erence . Once the fleet is  created,  you  can  use   TagResource  ,
          UntagResource  ,  and   ListTagsForResource to add, remove, and view
          tags. The maximum tag limit may be lower than stated.  See  the  AWS
          General Reference for actual tagging limits.

          (structure)
              A label that can be assigned to a GameLift resource.
                 Learn more

                 Tagging AWS Resources in the AWS General Reference

                 AWS Tagging Strategies

                 Related actions
                     TagResource |  UntagResource |  ListTagsForResource | All
                     APIs by task

              Key -> (string)
                 The key for a developer-defined key:value pair for tagging an
                 AWS resource.

              Value -> (string)
                 The  value for a developer-defined key:value pair for tagging
                 an AWS resource.

       Shorthand Syntax:

          Key=string,Value=string ...

       JSON Syntax:

          [
            {
              "Key": "string",
              "Value": "string"
            }
            ...
          ]

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       Example 1: To create a basic Linux fleet

       The following create-fleet example creates a minimally configured fleet
       of  on-demand  Linux  instances  to host a custom server build. You can
       complete the configuration by using update-fleet.

          aws gamelift create-fleet \
              --name MegaFrogRaceServer.NA.v2 \
              --description 'Hosts for v2 North America' \
              --build-id build-1111aaaa-22bb-33cc-44dd-5555eeee66ff \
              --certificate-configuration 'CertificateType=GENERATED' \
              --ec2-instance-type c4.large \
              --fleet-type ON_DEMAND \
              --runtime-configuration 'ServerProcesses=[{LaunchPath=/local/game/release-na/MegaFrogRace_Server.exe,ConcurrentExecutions=1}]'

       Output:

          {
              "FleetAttributes": {
                  "BuildId": "build-1111aaaa-22bb-33cc-44dd-5555eeee66ff",
                  "CertificateConfiguration": {
                      "CertificateType": "GENERATED"
                  },
                  "CreationTime": 1496365885.44,
                  "Description": "Hosts for v2 North America",
                  "FleetArn": "arn:aws:gamelift:us-west-2:444455556666:fleet/fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetId": "fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetType": "ON_DEMAND",
                  "InstanceType": "c4.large",
                  "MetricGroups": ["default"],
                  "Name": "MegaFrogRace.NA.v2",
                  "NewGameSessionProtectionPolicy": "NoProtection",
                  "OperatingSystem": "AMAZON_LINUX",
                  "ServerLaunchPath": "/local/game/release-na/MegaFrogRace_Server.exe",
                  "Status": "NEW"
              }
          }

       Example 2: To create a basic Windows fleet

       The following create-fleet example creates a minimally configured fleet
       of  spot  Windows instances to host a custom server build. You can com-
       plete the configuration by using update-fleet.

          aws gamelift create-fleet \
              --name MegaFrogRace.NA.v2 \
              --description 'Hosts for v2 North America' \
              --build-id build-2222aaaa-33bb-44cc-55dd-6666eeee77ff  \
              --certificate-configuration 'CertificateType=GENERATED' \
              --ec2-instance-type c4.large \
              --fleet-type SPOT \
              --runtime-configuration 'ServerProcesses=[{LaunchPath=C:\game\Bin64.Release.Dedicated\MegaFrogRace_Server.exe,ConcurrentExecutions=1}]'

       Output:

          {
              "FleetAttributes": {
                  "BuildId": "build-2222aaaa-33bb-44cc-55dd-6666eeee77ff",
                  "CertificateConfiguration": {
                      "CertificateType": "GENERATED"
                  },
                  "CreationTime": 1496365885.44,
                  "Description": "Hosts for v2 North America",
                  "FleetArn": "arn:aws:gamelift:us-west-2:444455556666:fleet/fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetId": "fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetType": "SPOT",
                  "InstanceType": "c4.large",
                  "MetricGroups": ["default"],
                  "Name": "MegaFrogRace.NA.v2",
                  "NewGameSessionProtectionPolicy": "NoProtection",
                  "OperatingSystem": "WINDOWS_2012",
                  "ServerLaunchPath": "C:\game\Bin64.Release.Dedicated\MegaFrogRace_Server.exe",
                  "Status": "NEW"
              }
          }

       Example 3: To create a fully configured fleet

       The following create-fleet example creates  a  fleet  of  Spot  Windows
       instances for a custom server build, with most commonly used configura-
       tion settings provided.

          aws gamelift create-fleet \
              --name MegaFrogRace.NA.v2 \
              --description 'Hosts for v2 North America' \
              --build-id build-2222aaaa-33bb-44cc-55dd-6666eeee77ff \
              --certificate-configuration 'CertificateType=GENERATED' \
              --ec2-instance-type c4.large \
              --ec2-inbound-permissions 'FromPort=33435,ToPort=33435,IpRange=10.24.34.0/23,Protocol=UDP' \
              --fleet-type SPOT \
              --new-game-session-protection-policy FullProtection \
              --runtime-configuration file://runtime-config.json \
              --metric-groups default \
              --instance-role-arn 'arn:aws:iam::444455556666:role/GameLiftS3Access'

       Contents of runtime-config.json:

          GameSessionActivationTimeoutSeconds=300,
           MaxConcurrentGameSessionActivations=2,
           ServerProcesses=[
             {LaunchPath=C:\game\Bin64.Release.Dedicated\MegaFrogRace_Server.exe,Parameters=-debug,ConcurrentExecutions=1},
             {LaunchPath=C:\game\Bin64.Release.Dedicated\MegaFrogRace_Server.exe,ConcurrentExecutions=1}]

       Output:

          {
              "FleetAttributes": {
                  "InstanceRoleArn": "arn:aws:iam::444455556666:role/GameLiftS3Access",
                  "Status": "NEW",
                  "InstanceType": "c4.large",
                  "FleetArn": "arn:aws:gamelift:us-west-2:444455556666:fleet/fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetId": "fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "Description": "Hosts for v2 North America",
                  "FleetType": "SPOT",
                  "OperatingSystem": "WINDOWS_2012",
                  "Name": "MegaFrogRace.NA.v2",
                  "CreationTime": 1569309011.11,
                  "MetricGroups": [
                      "default"
                  ],
                  "BuildId": "build-2222aaaa-33bb-44cc-55dd-6666eeee77ff",
                  "ServerLaunchParameters": "abc",
                  "ServerLaunchPath": "C:\\game\\Bin64.Release.Dedicated\\MegaFrogRace_Server.exe",
                  "NewGameSessionProtectionPolicy": "FullProtection",
                  "CertificateConfiguration": {
                      "CertificateType": "GENERATED"
                  }
              }
          }

       Example 4: To create a Realtime Servers fleet

       The following create-fleet example creates a fleet  of  Spot  instances
       with  a  Realtime configuration script that has been uploaded to Amazon
       GameLift. All Realtime servers are deployed onto  Linux  machines.  For
       the  purposes of this example, assume that the uploaded Realtime script
       includes multiple script files, with the Init() function located in the
       script  file called MainScript.js. As shown, this file is identified as
       the launch script in the runtime configuration.

          aws gamelift create-fleet \
              --name MegaFrogRace.NA.realtime \
              --description 'Mega Frog Race Realtime fleet' \
              --script-id script-1111aaaa-22bb-33cc-44dd-5555eeee66ff \
              --ec2-instance-type c4.large \
              --fleet-type SPOT \
              --certificate-configuration 'CertificateType=GENERATED' --runtime-configuration 'ServerProcesses=[{LaunchPath=/local/game/MainScript.js,Parameters=+map Winter444,ConcurrentExecutions=5}]'

       Output:

          {
              "FleetAttributes": {
                  "FleetId": "fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "Status": "NEW",
                  "CreationTime": 1569310745.212,
                  "InstanceType": "c4.large",
                  "NewGameSessionProtectionPolicy": "NoProtection",
                  "CertificateConfiguration": {
                      "CertificateType": "GENERATED"
                  },
                  "Name": "MegaFrogRace.NA.realtime",
                  "ScriptId": "script-1111aaaa-22bb-33cc-44dd-5555eeee66ff",
                  "FleetArn": "arn:aws:gamelift:us-west-2:444455556666:fleet/fleet-2222bbbb-33cc-44dd-55ee-6666ffff77aa",
                  "FleetType": "SPOT",
                  "MetricGroups": [
                      "default"
                  ],
                  "Description": "Mega Frog Race Realtime fleet",
                  "OperatingSystem": "AMAZON_LINUX"
              }
          }

OUTPUT
       FleetAttributes -> (structure)
          The properties for the new fleet, including the current status.  All
          fleets are placed in NEW status on creation.

          FleetId -> (string)
              A unique identifier for the fleet.

          FleetArn -> (string)
              The  Amazon  Resource Name (ARN ) that is assigned to a GameLift
              fleet resource and  uniquely  identifies  it.  ARNs  are  unique
              across          all          Regions.          Format         is
              arn:aws:gamelift:<region>::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
              .  In  a GameLift fleet ARN, the resource ID matches the FleetId
              value.

          FleetType -> (string)
              The kind of instances, On-Demand or Spot, that this fleet  uses.

          InstanceType -> (string)
              The EC2 instance type that determines the computing resources of
              each instance in the fleet. Instance type defines the CPU,  mem-
              ory,  storage,  and networking capacity. See Amazon EC2 Instance
              Types for detailed descriptions.

          Description -> (string)
              A human-readable description of the fleet.

          Name -> (string)
              A descriptive label that is associated with a fleet. Fleet names
              do not need to be unique.

          CreationTime -> (timestamp)
              A  time stamp indicating when this data object was created. For-
              mat is a number expressed in  Unix  time  as  milliseconds  (for
              example "1469498468.057" ).

          TerminationTime -> (timestamp)
              A  time  stamp  indicating when this data object was terminated.
              Format is a number expressed in Unix time as  milliseconds  (for
              example "1469498468.057" ).

          Status -> (string)
              Current status of the fleet. Possible fleet statuses include the
              following:

              o NEW -- A new fleet has been defined and desired  instances  is
                set to 1.

              o DOWNLOADING/VALIDATING/BUILDING/ACTIVATING -- GameLift is set-
                ting up the new fleet, creating new instances  with  the  game
                build or Realtime script and starting server processes.

              o ACTIVE -- Hosts can now accept game sessions.

              o ERROR  --  An  error  occurred  when  downloading, validating,
                building, or activating the fleet.

              o DELETING -- Hosts are responding to a delete fleet request.

              o TERMINATED -- The fleet no longer exists.

          BuildId -> (string)
              A unique identifier for the build resource that is  deployed  on
              instances in this fleet.

          BuildArn -> (string)
              The  Amazon  Resource  Name  (ARN ) associated with the GameLift
              build resource that is deployed on instances in this fleet. In a
              GameLift build ARN, the resource ID matches the BuildId value.

          ScriptId -> (string)
              A  unique  identifier  for  the Realtime script resource that is
              deployed on instances in this fleet.

          ScriptArn -> (string)
              The Amazon Resource Name (ARN )  associated  with  the  GameLift
              script  resource that is deployed on instances in this fleet. In
              a GameLift script ARN, the  resource  ID  matches  the  ScriptId
              value.

          ServerLaunchPath -> (string)
              This  parameter  is  no longer used. Server launch paths are now
              defined  using  the  fleet's   RuntimeConfiguration   parameter.
              Requests that use this parameter instead continue to be valid.

          ServerLaunchParameters -> (string)
              This  parameter  is no longer used. Server launch parameters are
              now defined using the fleet's   RuntimeConfiguration  parameter.
              Requests that use this parameter instead continue to be valid.

          LogPaths -> (list)
                 This  parameter is no longer used. Game session log paths are
                 now defined using  the  GameLift  server  API  ProcessReady()
                 logParameters . See more information in the Server API Refer-
                 ence .

              (string)

          NewGameSessionProtectionPolicy -> (string)
              The type of game session protection to set on all new  instances
              that are started in the fleet.

              o NoProtection  --  The  game session can be terminated during a
                scale-down event.

              o FullProtection -- If the game session is in an ACTIVE  status,
                it cannot be terminated during a scale-down event.

          OperatingSystem -> (string)
              The  operating  system  of  the  fleet's  computing resources. A
              fleet's operating system is determined by the OS of the build or
              script that is deployed on this fleet.

          ResourceCreationLimitPolicy -> (structure)
              The  fleet  policy  that  limits  the number of game sessions an
              individual player can create over a span of time.

              NewGameSessionsPerCreator -> (integer)
                 The maximum number of game sessions that  an  individual  can
                 create during the policy period.

              PolicyPeriodInMinutes -> (integer)
                 The  time span used in evaluating the resource creation limit
                 policy.

          MetricGroups -> (list)
              Name of a metric group that metrics for this fleet are added to.
              In Amazon CloudWatch, you can view aggregated metrics for fleets
              that are in a metric group. A fleet can be included in only  one
              metric group at a time.

              (string)

          StoppedActions -> (list)
              A   list  of  fleet  activity  that  has  been  suspended  using
              StopFleetActions . This includes fleet auto-scaling.

              (string)

          InstanceRoleArn -> (string)
              A unique identifier for an AWS IAM role that manages  access  to
              your  AWS  services. With an instance role ARN set, any applica-
              tion that runs on an instance in this fleet can assume the role,
              including  install scripts, server processes, and daemons (back-
              ground processes). Create a role or look  up  a  role's  ARN  by
              using  the  IAM  dashboard  in the AWS Management Console. Learn
              more about using on-box credentials for  your  game  servers  at
              Access external resources from a game server .

          CertificateConfiguration -> (structure)
              Indicates  whether  a  TLS/SSL certificate was generated for the
              fleet.

              CertificateType -> (string)
                 Indicates whether a TLS/SSL certificate is  generated  for  a
                 fleet.

                 Valid values include:

                 o GENERATED  - Generate a TLS/SSL certificate for this fleet.

                 o DISABLED - (default) Do not generate a TLS/SSL  certificate
                   for this fleet.

       LocationStates -> (list)
          The  fleet's  locations  and life-cycle status of each location. For
          new fleets, the status of all locations is set to NEW . During fleet
          creation,  GameLift  updates  each  location status as instances are
          deployed there and prepared for game hosting. This list includes  an
          entry  for  the fleet's home Region. For fleets with no remote loca-
          tions, only one entry, representing the home Region, is returned.

          (structure)
              A fleet location and its  life-cycle  state.  A  location  state
              object  might  be  used to describe a fleet's remote location or
              home Region. Life-cycle state tracks the progress  of  launching
              the  first  instance in a new location and preparing it for game
              hosting, and then removing all instances and deleting the  loca-
              tion from the fleet.
                 Related actions
                     CreateFleet  |   CreateFleetLocations |  DeleteFleetLoca-
                     tions

              Location -> (string)
                 The fleet location, expressed as an AWS Region code  such  as
                 us-west-2 .

              Status -> (string)
                 The life-cycle status of a fleet location.



                                                                CREATE-FLEET()
