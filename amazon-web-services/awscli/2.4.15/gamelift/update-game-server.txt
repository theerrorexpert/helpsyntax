UPDATE-GAME-SERVER()                                      UPDATE-GAME-SERVER()



NAME
       update-game-server -

DESCRIPTION
          This  operation  is used with the GameLift FleetIQ solution and game
          server groups.

       Updates information about a registered game  server  to  help  GameLift
       FleetIQ  to track game server availability. This operation is called by
       a game server process that is running on an instance in a  game  server
       group.

       Use  this operation to update the following types of game server infor-
       mation. You can make all three types of updates in the same request:

       o To update the game server's utilization  status,  identify  the  game
         server and game server group and specify the current utilization sta-
         tus. Use this status to identify  when  game  servers  are  currently
         hosting games and when they are available to be claimed.

       o To  report  health  status,  identify the game server and game server
         group and set health check to HEALTHY . If a  game  server  does  not
         report health status for a certain length of time, the game server is
         no longer considered healthy. As a  result,  it  will  be  eventually
         deregistered  from  the game server group to avoid affecting utiliza-
         tion metrics. The best practice is to report health every 60 seconds.

       o To change game server metadata, provide updated game server data.

       Once  a  game server is successfully updated, the relevant statuses and
       timestamps are updated.
          Learn more

          GameLift FleetIQ Guide

          Related actions
              RegisterGameServer  |   ListGameServers  |   ClaimGameServer   |
              DescribeGameServer |  UpdateGameServer |  DeregisterGameServer |
              All APIs by task

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            update-game-server
          --game-server-group-name <value>
          --game-server-id <value>
          [--game-server-data <value>]
          [--utilization-status <value>]
          [--health-check <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --game-server-group-name (string)
          A unique identifier for the game server group where the game  server
          is running. Use either the  GameServerGroup name or ARN value.

       --game-server-id (string)
          A  custom string that uniquely identifies the game server to update.

       --game-server-data (string)
          A set of custom game server properties, formatted as a single string
          value.  This  data  is  passed  to  a game client or service when it
          requests information  on  game  servers  using   ListGameServers  or
          ClaimGameServer .

       --utilization-status (string)
          Indicates whether the game server is available or is currently host-
          ing gameplay.

          Possible values:

          o AVAILABLE

          o UTILIZED

       --health-check (string)
          Indicates health status of the game server. A request that  includes
          this  parameter  updates the game server's LastHealthCheckTime time-
          stamp.

          Possible values:

          o HEALTHY

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       GameServer -> (structure)
          Object that describes the newly updated game server.

          GameServerGroupName -> (string)
              A unique identifier for the game server  group  where  the  game
              server  is  running. Use either the  GameServerGroup name or ARN
              value.

          GameServerGroupArn -> (string)
              The ARN identifier for the game  server  group  where  the  game
              server is located.

          GameServerId -> (string)
              A  custom  string that uniquely identifies the game server. Game
              server IDs are developer-defined and are unique across all  game
              server groups in an AWS account.

          InstanceId -> (string)
              The  unique identifier for the instance where the game server is
              running. This ID is available  in  the  instance  metadata.  EC2
              instance   IDs   use   a   17-character   format,  for  example:
              i-1234567890abcdef0 .

          ConnectionInfo -> (string)
              The port and IP address that must be used to establish a  client
              connection to the game server.

          GameServerData -> (string)
              A  set  of  custom game server properties, formatted as a single
              string value. This data is passed to a game  client  or  service
              when  it  requests  information on game servers using  ListGame-
              Servers or  ClaimGameServer .

          ClaimStatus -> (string)
              Indicates when an available game server has  been  reserved  for
              gameplay  but  has  not  yet  started hosting a game. Once it is
              claimed, the game server remains in CLAIMED status for a maximum
              of  one  minute.  During  this time, game clients connect to the
              game server to start the game and trigger  the  game  server  to
              update its utilization status. After one minute, the game server
              claim status reverts to null.

          UtilizationStatus -> (string)
              Indicates whether the game server is currently available for new
              games or is busy. Possible statuses include:

              o AVAILABLE - The game server is available to be claimed. A game
                server that has been claimed remains in this status  until  it
                reports game hosting activity.

              o UTILIZED - The game server is currently hosting a game session
                with players.

          RegistrationTime -> (timestamp)
              Timestamp that indicates when the game server was created with a
              RegisterGameServer  request. The format is a number expressed in
              Unix time as milliseconds (for example "1469498468.057" ).

          LastClaimTime -> (timestamp)
              Timestamp that indicates the  last  time  the  game  server  was
              claimed  with a  ClaimGameServer request. The format is a number
              expressed  in   Unix   time   as   milliseconds   (for   example
              "1469498468.057"  ).  This  value  is  used  to calculate when a
              claimed game server's status should revert to null.

          LastHealthCheckTime -> (timestamp)
              Timestamp that indicates the  last  time  the  game  server  was
              updated  with  health status using an  UpdateGameServer request.
              The format is a number expressed in Unix  time  as  milliseconds
              (for example "1469498468.057" ). After game server registration,
              this property is only changed when a game server  update  speci-
              fies a health check value.



                                                          UPDATE-GAME-SERVER()
