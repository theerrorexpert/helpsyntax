DESCRIBE-MATCHMAKING()                                  DESCRIBE-MATCHMAKING()



NAME
       describe-matchmaking -

DESCRIPTION
       Retrieves  one  or  more  matchmaking  tickets.  Use  this operation to
       retrieve ticket information, including--after  a  successful  match  is
       made--connection information for the resulting new game session.

       To  request matchmaking tickets, provide a list of up to 10 ticket IDs.
       If the request is successful, a ticket  object  is  returned  for  each
       requested ID that currently exists.

       This operation is not designed to be continually called to track match-
       making ticket status. This practice can cause you to  exceed  your  API
       limit,  which results in errors. Instead, as a best practice, set up an
       Amazon Simple Notification Service (SNS) to receive notifications,  and
       provide  the  topic  ARN in the matchmaking configuration. Continuously
       poling ticket status with  DescribeMatchmaking should only be used  for
       games in development with low matchmaking usage.
          Learn more

          Add FlexMatch to a game client

          Set Up FlexMatch event notification

          Related actions
              StartMatchmaking  |   DescribeMatchmaking  |   StopMatchmaking |
              AcceptMatch |  StartMatchBackfill | All APIs by task

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            describe-matchmaking
          --ticket-ids <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --ticket-ids (list)
          A unique identifier for a matchmaking ticket. You can include up  to
          10 ID values.

          (string)

       Syntax:

          "string" "string" ...

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       TicketList -> (list)
          A  collection  of  existing  matchmaking ticket objects matching the
          request.

          (structure)
              Ticket generated to track the progress of a matchmaking request.
              Each  ticket  is uniquely identified by a ticket ID, supplied by
              the requester, when creating a matchmaking request with   Start-
              Matchmaking  .  Tickets  can  be retrieved by calling  Describe-
              Matchmaking with the ticket ID.

              TicketId -> (string)
                 A unique identifier for a matchmaking ticket.

              ConfigurationName -> (string)
                 Name of the  MatchmakingConfiguration that is used with  this
                 ticket.  Matchmaking configurations determine how players are
                 grouped into a match and how a new game  session  is  created
                 for the match.

              ConfigurationArn -> (string)
                 The  Amazon Resource Name (ARN ) associated with the GameLift
                 matchmaking configuration resource that  is  used  with  this
                 ticket.

              Status -> (string)
                 Current status of the matchmaking request.

                 o QUEUED  -- The matchmaking request has been received and is
                   currently waiting to be processed.

                 o SEARCHING -- The matchmaking  request  is  currently  being
                   processed.

                 o REQUIRES_ACCEPTANCE  --  A  match has been proposed and the
                   players must accept the match  (see   AcceptMatch  ).  This
                   status  is  used  only with requests that use a matchmaking
                   configuration with a player acceptance requirement.

                 o PLACING -- The FlexMatch engine has matched players and  is
                   in the process of placing a new game session for the match.

                 o COMPLETED -- Players have been matched and a  game  session
                   is  ready  to host the players. A ticket in this state con-
                   tains the necessary connection information for players.

                 o FAILED -- The matchmaking request was not completed.

                 o CANCELLED -- The matchmaking request was canceled. This may
                   be  the  result of a call to  StopMatchmaking or a proposed
                   match that one or more players failed to accept.

                 o TIMED_OUT -- The matchmaking  request  was  not  successful
                   within the duration specified in the matchmaking configura-
                   tion.

                 NOTE:
                     Matchmaking requests that fail to  successfully  complete
                     (statuses  FAILED, CANCELLED, TIMED_OUT) can be resubmit-
                     ted as new requests with new ticket IDs.

              StatusReason -> (string)
                 Code to explain the current status.  For  example,  a  status
                 reason  may  indicate when a ticket has returned to SEARCHING
                 status after a proposed match fails to receive player  accep-
                 tances.

              StatusMessage -> (string)
                 Additional information about the current status.

              StartTime -> (timestamp)
                 Time  stamp  indicating  when  this  matchmaking  request was
                 received. Format is a number expressed in Unix time  as  mil-
                 liseconds (for example "1469498468.057" ).

              EndTime -> (timestamp)
                 Time  stamp  indicating when this matchmaking request stopped
                 being processed due to  success,  failure,  or  cancellation.
                 Format  is  a  number  expressed in Unix time as milliseconds
                 (for example "1469498468.057" ).

              Players -> (list)
                 A set of Player objects, each representing a player  to  find
                 matches for. Players are identified by a unique player ID and
                 may include latency data for use during matchmaking.  If  the
                 ticket  is  in  status COMPLETED , the Player objects include
                 the team the players were assigned to in the resulting match.

                 (structure)
                     Represents  a  player  in  matchmaking.  When  starting a
                     matchmaking  request,  a  player   has   a   player   ID,
                     attributes,  and  may have latency data. Team information
                     is added after a match has been successfully completed.

                     PlayerId -> (string)
                        A unique identifier for a player

                     PlayerAttributes -> (map)
                        A collection  of  key:value  pairs  containing  player
                        information  for  use in matchmaking. Player attribute
                        keys must match the playerAttributes used in a  match-
                        making    rule   set.   Example:   "PlayerAttributes":
                        {"skill":  {"N":  "23"},  "gameMode":  {"S":   "death-
                        match"}} .

                        key -> (string)

                        value -> (structure)
                            Values  for  use  in   Player  attribute key-value
                            pairs. This object lets you specify  an  attribute
                            value  using  any of the valid data types: string,
                            number, string array, or data map. Each Attribute-
                            Value  object  can  use  only one of the available
                            properties.

                            S -> (string)
                               For single string values. Maximum string length
                               is 100 characters.

                            N -> (double)
                               For number values, expressed as double.

                            SL -> (list)
                               For  a list of up to 10 strings. Maximum length
                               for each string is  100  characters.  Duplicate
                               values  are  not recognized; all occurrences of
                               the  repeated  value  after  the  first  of   a
                               repeated value are ignored.

                               (string)

                            SDM -> (map)
                               For  a  map  of up to 10 data type:value pairs.
                               Maximum length for each  string  value  is  100
                               characters.

                               key -> (string)

                               value -> (double)

                     Team -> (string)
                        Name  of  the team that the player is assigned to in a
                        match. Team names are defined in  a  matchmaking  rule
                        set.

                     LatencyInMs -> (map)
                        A set of values, expressed in milliseconds, that indi-
                        cates the amount of latency that a player  experiences
                        when  connected  to  AWS  Regions. If this property is
                        present, FlexMatch considers placing the match only in
                        Regions for which latency is reported.

                        If  a  matchmaker  has  a  rule  that evaluates player
                        latency, players must report latency in  order  to  be
                        matched.  If  no latency is reported in this scenario,
                        FlexMatch assumes that no Regions are available to the
                        player and the ticket is not matchable.

                        key -> (string)

                        value -> (integer)

              GameSessionConnectionInfo -> (structure)
                 Identifier  and  connection  information  of the game session
                 created for the match.  This  information  is  added  to  the
                 ticket  only  after the matchmaking request has been success-
                 fully completed. This parameter is not set when FlexMatch  is
                 being used without GameLift hosting.

                 GameSessionArn -> (string)
                     A  unique  identifier  for the game session. Use the game
                     session ID.

                 IpAddress -> (string)
                     The IP address of the  game  session.  To  connect  to  a
                     GameLift  game  server,  an app needs both the IP address
                     and port number.

                 DnsName -> (string)
                     The DNS identifier assigned to the instance that is  run-
                     ning the game session. Values have the following format:

                     o TLS-enabled fleets: <unique identifier>.<region identi-
                       fier>.amazongamelift.com .

                     o Non-TLS-enabled  fleets:  ec2-<unique  identifier>.com-
                       pute.amazonaws.com   .  (See  Amazon  EC2  Instance  IP
                       Addressing .)

                     When connecting to a game session that is  running  on  a
                     TLS-enabled  fleet, you must use the DNS name, not the IP
                     address.

                 Port -> (integer)
                     The port number for the game session.  To  connect  to  a
                     GameLift  game  server,  an app needs both the IP address
                     and port number.

                 MatchedPlayerSessions -> (list)
                     A collection of player session IDs, one for  each  player
                     ID that was included in the original matchmaking request.

                     (structure)
                        Represents a new player session that is created  as  a
                        result  of  a successful FlexMatch match. A successful
                        match automatically creates new  player  sessions  for
                        every player ID in the original matchmaking request.

                        When players connect to the match's game session, they
                        must include both player ID and player session  ID  in
                        order to claim their assigned player slot.

                        PlayerId -> (string)
                            A unique identifier for a player

                        PlayerSessionId -> (string)
                            A unique identifier for a player session

              EstimatedWaitTime -> (integer)
                 Average  amount  of  time  (in seconds) that players are cur-
                 rently waiting for a match. If there  is  not  enough  recent
                 data, this property may be empty.



                                                        DESCRIBE-MATCHMAKING()
