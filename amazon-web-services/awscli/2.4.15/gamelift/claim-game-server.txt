CLAIM-GAME-SERVER()                                        CLAIM-GAME-SERVER()



NAME
       claim-game-server -

DESCRIPTION
          This  operation  is used with the GameLift FleetIQ solution and game
          server groups.

       Locates an available game server and temporarily reserves  it  to  host
       gameplay  and  players.  This operation is called from a game client or
       client service (such as a matchmaker) to request hosting resources  for
       a  new game session. In response, GameLift FleetIQ locates an available
       game server, places it in CLAIMED status for 60  seconds,  and  returns
       connection  information  that  players  can  use to connect to the game
       server.

       To claim a game server, identify a game  server  group.  You  can  also
       specify  a  game  server  ID,  although this approach bypasses GameLift
       FleetIQ placement optimization. Optionally, include game data  to  pass
       to  the  game server at the start of a game session, such as a game map
       or player information.

       When a game server is successfully claimed, connection  information  is
       returned.  A claimed game server's utilization status remains AVAILABLE
       while the claim status is set to CLAIMED for up  to  60  seconds.  This
       time period gives the game server time to update its status to UTILIZED
       (using  UpdateGameServer ) once players join. If the game server's sta-
       tus  is  not  updated  within  60  seconds,  the game server reverts to
       unclaimed status and is available to be claimed by another request. The
       claim time period is a fixed value and is not configurable.

       If  you  try to claim a specific game server, this request will fail in
       the following cases:

       o If the game server utilization status is UTILIZED .

       o If the game server claim status is CLAIMED .

       NOTE:
              When claiming a specific game server, this request will  succeed
              even  if  the  game server is running on an instance in DRAINING
              status. To avoid this, first check the instance status by  call-
              ing  DescribeGameServerInstances .

          Learn more

          GameLift FleetIQ Guide

          Related actions
              RegisterGameServer   |   ListGameServers  |   ClaimGameServer  |
              DescribeGameServer |  UpdateGameServer |  DeregisterGameServer |
              All APIs by task

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            claim-game-server
          --game-server-group-name <value>
          [--game-server-id <value>]
          [--game-server-data <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --game-server-group-name (string)
          A  unique identifier for the game server group where the game server
          is running. Use either the  GameServerGroup name or  ARN  value.  If
          you are not specifying a game server to claim, this value identifies
          where you want GameLift FleetIQ to look for an available game server
          to claim.

       --game-server-id (string)
          A  custom  string that uniquely identifies the game server to claim.
          If this parameter is left empty, GameLift FleetIQ  searches  for  an
          available game server in the specified game server group.

       --game-server-data (string)
          A set of custom game server properties, formatted as a single string
          value. This data is passed to a  game  client  or  service  when  it
          requests  information  on  game  servers  using   ListGameServers or
          ClaimGameServer .

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       GameServer -> (structure)
          Object that describes the newly claimed game server.

          GameServerGroupName -> (string)
              A unique identifier for the game server  group  where  the  game
              server  is  running. Use either the  GameServerGroup name or ARN
              value.

          GameServerGroupArn -> (string)
              The ARN identifier for the game  server  group  where  the  game
              server is located.

          GameServerId -> (string)
              A  custom  string that uniquely identifies the game server. Game
              server IDs are developer-defined and are unique across all  game
              server groups in an AWS account.

          InstanceId -> (string)
              The  unique identifier for the instance where the game server is
              running. This ID is available  in  the  instance  metadata.  EC2
              instance   IDs   use   a   17-character   format,  for  example:
              i-1234567890abcdef0 .

          ConnectionInfo -> (string)
              The port and IP address that must be used to establish a  client
              connection to the game server.

          GameServerData -> (string)
              A  set  of  custom game server properties, formatted as a single
              string value. This data is passed to a game  client  or  service
              when  it  requests  information on game servers using  ListGame-
              Servers or  ClaimGameServer .

          ClaimStatus -> (string)
              Indicates when an available game server has  been  reserved  for
              gameplay  but  has  not  yet  started hosting a game. Once it is
              claimed, the game server remains in CLAIMED status for a maximum
              of  one  minute.  During  this time, game clients connect to the
              game server to start the game and trigger  the  game  server  to
              update its utilization status. After one minute, the game server
              claim status reverts to null.

          UtilizationStatus -> (string)
              Indicates whether the game server is currently available for new
              games or is busy. Possible statuses include:

              o AVAILABLE - The game server is available to be claimed. A game
                server that has been claimed remains in this status  until  it
                reports game hosting activity.

              o UTILIZED - The game server is currently hosting a game session
                with players.

          RegistrationTime -> (timestamp)
              Timestamp that indicates when the game server was created with a
              RegisterGameServer  request. The format is a number expressed in
              Unix time as milliseconds (for example "1469498468.057" ).

          LastClaimTime -> (timestamp)
              Timestamp that indicates the  last  time  the  game  server  was
              claimed  with a  ClaimGameServer request. The format is a number
              expressed  in   Unix   time   as   milliseconds   (for   example
              "1469498468.057"  ).  This  value  is  used  to calculate when a
              claimed game server's status should revert to null.

          LastHealthCheckTime -> (timestamp)
              Timestamp that indicates the  last  time  the  game  server  was
              updated  with  health status using an  UpdateGameServer request.
              The format is a number expressed in Unix  time  as  milliseconds
              (for example "1469498468.057" ). After game server registration,
              this property is only changed when a game server  update  speci-
              fies a health check value.



                                                           CLAIM-GAME-SERVER()
