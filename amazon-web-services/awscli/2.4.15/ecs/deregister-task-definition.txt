DEREGISTER-TASK-DEFINITION()                      DEREGISTER-TASK-DEFINITION()



NAME
       deregister-task-definition -

DESCRIPTION
       Deregisters  the specified task definition by family and revision. Upon
       deregistration, the task definition is marked as  INACTIVE  .  Existing
       tasks  and services that reference an INACTIVE task definition continue
       to run without disruption. Existing services that reference an INACTIVE
       task  definition  can still scale up or down by modifying the service's
       desired count.

       You can't use an INACTIVE task definition to run new  tasks  or  create
       new  services, and you can't update an existing service to reference an
       INACTIVE task definition. However, there may be up to a 10-minute  win-
       dow  following  deregistration  where  these  restrictions have not yet
       taken effect.

       NOTE:
          At this time, INACTIVE task definitions remain discoverable in  your
          account indefinitely. However, this behavior is subject to change in
          the future. We don't recommend that you rely on INACTIVE task  defi-
          nitions  persisting beyond the lifecycle of any associated tasks and
          services.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            deregister-task-definition
          --task-definition <value>
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --task-definition (string)
          The family and revision (family:revision ) or full  Amazon  Resource
          Name  (ARN) of the task definition to deregister. You must specify a
          revision .

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To deregister a task definition

       The following deregister-task-definition example deregisters the  first
       revision of the curler task definition in your default region.

          aws ecs deregister-task-definition --task-definition curler:1

       Note  that  in  the  resulting output, the task definition status shows
       INACTIVE:

          {
              "taskDefinition": {
                  "status": "INACTIVE",
                  "family": "curler",
                  "volumes": [],
                  "taskDefinitionArn": "arn:aws:ecs:us-west-2:123456789012:task-definition/curler:1",
                  "containerDefinitions": [
                      {
                          "environment": [],
                          "name": "curler",
                          "mountPoints": [],
                          "image": "curl:latest",
                          "cpu": 100,
                          "portMappings": [],
                          "entryPoint": [],
                          "memory": 256,
                          "command": [
                              "curl -v http://example.com/"
                          ],
                          "essential": true,
                          "volumesFrom": []
                      }
                  ],
                  "revision": 1
              }
          }

       For more information, see Amazon ECS Task Definitions in the Amazon ECS
       Developer Guide.

OUTPUT
       taskDefinition -> (structure)
          The full description of the deregistered task.

          taskDefinitionArn -> (string)
              The full Amazon Resource Name (ARN) of the task definition.

          containerDefinitions -> (list)
              A list of container definitions in JSON format that describe the
              different containers that make up your task. For  more  informa-
              tion  about  container  definition  parameters and defaults, see
              Amazon ECS Task Definitions in the Amazon Elastic Container Ser-
              vice Developer Guide .

              (structure)
                 Container   definitions  are  used  in  task  definitions  to
                 describe the different containers that are launched  as  part
                 of a task.

                 name -> (string)
                     The  name of a container. If you're linking multiple con-
                     tainers together in a task definition, the  name  of  one
                     container  can  be  entered  in the links of another con-
                     tainer to connect  the  containers.  Up  to  255  letters
                     (uppercase  and  lowercase),  numbers,  underscores,  and
                     hyphens are allowed. This parameter maps to name  in  the
                     Create  a  container section of the Docker Remote API and
                     the --name option to docker run .

                 image -> (string)
                     The image used to  start  a  container.  This  string  is
                     passed  directly to the Docker daemon. By default, images
                     in the Docker Hub registry are available. Other reposito-
                     ries  are  specified with either `` repository-url /image
                     :tag `` or `` repository-url /image @*digest* `` . Up  to
                     255  letters (uppercase and lowercase), numbers, hyphens,
                     underscores, colons, periods, forward slashes, and number
                     signs  are  allowed.  This parameter maps to Image in the
                     Create a container section of the Docker Remote  API  and
                     the IMAGE parameter of docker run .

                     o When  a new task starts, the Amazon ECS container agent
                       pulls the latest version of the specified image and tag
                       for  the  container to use. However, subsequent updates
                       to a repository image aren't propagated to already run-
                       ning tasks.

                     o Images  in  Amazon ECR repositories can be specified by
                       either using the full registry/repository:tag  or  reg-
                       istry/repository@digest       .       For      example,
                       012345678910.dkr.ecr.<region-name>.amazon-
                       aws.com/<repository-name>:latest                     or
                       012345678910.dkr.ecr.<region-name>.amazon-
                       aws.com/<reposi-
                       tory-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAM-
                       PLE .

                     o Images  in  official  repositories  on Docker Hub use a
                       single name (for example, ubuntu or mongo ).

                     o Images in other repositories on Docker Hub  are  quali-
                       fied  with  an  organization  name  (for  example, ama-
                       zon/amazon-ecs-agent ).

                     o Images in other online repositories are qualified  fur-
                       ther  by  a domain name (for example, quay.io/assembly-
                       line/ubuntu ).

                 repositoryCredentials -> (structure)
                     The private repository authentication credentials to use.

                     credentialsParameter -> (string)
                        The  Amazon Resource Name (ARN) of the secret contain-
                        ing the private repository credentials.

                        NOTE:
                            When you use the Amazon ECS API,  CLI,  or  Amazon
                            Web Services SDK, if the secret exists in the same
                            Region as the task that you're launching then  you
                            can  use  either  the  full ARN or the name of the
                            secret. When you use the Amazon Web Services  Man-
                            agement  Console, you must specify the full ARN of
                            the secret.

                 cpu -> (integer)
                     The number of cpu units reserved for the container.  This
                     parameter  maps  to  CpuShares  in the Create a container
                     section of the Docker Remote  API  and  the  --cpu-shares
                     option to docker run .

                     This field is optional for tasks using the Fargate launch
                     type, and the only requirement is that the  total  amount
                     of CPU reserved for all containers within a task be lower
                     than the task-level cpu value.

                     NOTE:
                        You can determine the number of  CPU  units  that  are
                        available  per  EC2  instance  type by multiplying the
                        vCPUs listed for that instance type on the Amazon  EC2
                        Instances detail page by 1,024.

                     Linux  containers  share unallocated CPU units with other
                     containers on the container instance with the same  ratio
                     as their allocated amount. For example, if you run a sin-
                     gle-container task on a single-core  instance  type  with
                     512  CPU  units  specified for that container, and that's
                     the only task running on  the  container  instance,  that
                     container  could use the full 1,024 CPU unit share at any
                     given time. However, if you launched another copy of  the
                     same  task on that container instance, each task is guar-
                     anteed a minimum of 512 CPU units when needed.  Moreover,
                     each  container  could  float  to higher CPU usage if the
                     other container was not using it. If both tasks were 100%
                     active  all of the time, they would be limited to 512 CPU
                     units.

                     On Linux container instances, the Docker  daemon  on  the
                     container  instance  uses  the CPU value to calculate the
                     relative CPU share ratios  for  running  containers.  For
                     more  information, see CPU share constraint in the Docker
                     documentation. The minimum valid CPU share value that the
                     Linux  kernel  allows  is  2.  However, the CPU parameter
                     isn't required, and you can use CPU  values  below  2  in
                     your  container  definitions.  For  CPU  values  below  2
                     (including null), the behavior varies based on your  Ama-
                     zon ECS container agent version:

                     o Agent  versions  less  than or equal to 1.1.0: Null and
                       zero CPU values are passed to Docker as 0, which Docker
                       then  converts to 1,024 CPU shares. CPU values of 1 are
                       passed to Docker as 1, which the Linux kernel  converts
                       to two CPU shares.

                     o Agent  versions  greater  than or equal to 1.2.0: Null,
                       zero, and CPU values of 1 are passed to Docker as 2.

                     On Windows container instances, the CPU limit is enforced
                     as an absolute limit, or a quota. Windows containers only
                     have  access  to  the  specified  amount  of  CPU  that's
                     described  in  the  task  definition.  A null or zero CPU
                     value is passed to Docker as 0 , which Windows interprets
                     as 1% of one CPU.

                 memory -> (integer)
                     The  amount  (in  MiB)  of  memory to present to the con-
                     tainer. If your container attempts to exceed  the  memory
                     specified here, the container is killed. The total amount
                     of memory reserved for all containers within a task  must
                     be lower than the task memory value, if one is specified.
                     This parameter maps to Memory in the Create  a  container
                     section  of the Docker Remote API and the --memory option
                     to docker run .

                     If using the  Fargate  launch  type,  this  parameter  is
                     optional.

                     If  using  the EC2 launch type, you must specify either a
                     task-level  memory  value  or  a  container-level  memory
                     value.  If  you specify both a container-level memory and
                     memoryReservation value, memory must be greater than mem-
                     oryReservation  . If you specify memoryReservation , then
                     that  value  is  subtracted  from  the  available  memory
                     resources  for the container instance where the container
                     is placed. Otherwise, the value of memory is used.

                     The Docker 20.10.0 or later daemon reserves a minimum  of
                     6  MiB of memory for a container, so you should not spec-
                     ify fewer than 6 MiB of memory for your containers.

                     The Docker 19.03.13-ce or earlier daemon reserves a mini-
                     mum of 4 MiB of memory for a container, so you should not
                     specify fewer than 4 MiB of memory for your containers.

                 memoryReservation -> (integer)
                     The soft limit (in MiB) of memory to reserve for the con-
                     tainer.  When  system  memory  is under heavy contention,
                     Docker attempts to keep the container memory to this soft
                     limit.  However,  your  container can consume more memory
                     when it needs to, up to either the hard  limit  specified
                     with  the memory parameter (if applicable), or all of the
                     available memory on  the  container  instance,  whichever
                     comes  first. This parameter maps to MemoryReservation in
                     the Create a container section of the Docker  Remote  API
                     and the --memory-reservation option to docker run .

                     If  a  task-level memory value is not specified, you must
                     specify a non-zero integer for one or both of  memory  or
                     memoryReservation in a container definition. If you spec-
                     ify both, memory must be greater than memoryReservation .
                     If  you  specify  memoryReservation  , then that value is
                     subtracted from the available memory  resources  for  the
                     container  instance where the container is placed. Other-
                     wise, the value of memory is used.

                     For example, if your container normally uses 128  MiB  of
                     memory,  but occasionally bursts to 256 MiB of memory for
                     short periods of time, you can set a memoryReservation of
                     128 MiB, and a memory hard limit of 300 MiB. This config-
                     uration would allow the container to only reserve 128 MiB
                     of  memory  from the remaining resources on the container
                     instance, but also allow the container  to  consume  more
                     memory resources when needed.

                     The  Docker  daemon reserves a minimum of 4 MiB of memory
                     for a container. Therefore, we recommend that you specify
                     fewer than 4 MiB of memory for your containers.

                 links -> (list)
                     The links parameter allows containers to communicate with
                     each other without  the  need  for  port  mappings.  This
                     parameter is only supported if the network mode of a task
                     definition is bridge . The name:internalName construct is
                     analogous  to  name:alias in Docker links. Up to 255 let-
                     ters (uppercase and lowercase), numbers, underscores, and
                     hyphens  are  allowed. For more information about linking
                     Docker containers, go to Legacy container  links  in  the
                     Docker documentation. This parameter maps to Links in the
                     Create a container section of the Docker Remote  API  and
                     the --link option to docker run .

                     NOTE:
                        This  parameter  is not supported for Windows contain-
                        ers.

                     WARNING:
                        Containers that are collocated on a  single  container
                        instance  may  be  able to communicate with each other
                        without requiring links or host port mappings. Network
                        isolation  is achieved on the container instance using
                        security groups and VPC settings.

                     (string)

                 portMappings -> (list)
                     The list of port mappings for the  container.  Port  map-
                     pings  allow  containers to access ports on the host con-
                     tainer instance to send or receive traffic.

                     For task definitions that use the  awsvpc  network  mode,
                     only specify the containerPort . The hostPort can be left
                     blank or it must be the same value as the containerPort .

                     Port  mappings  on Windows use the NetNAT gateway address
                     rather than localhost . There's no loopback for port map-
                     pings  on  Windows,  so  you  can't  access a container's
                     mapped port from the host itself.

                     This parameter maps to PortBindings in the Create a  con-
                     tainer section of the Docker Remote API and the --publish
                     option to docker run . If the network mode of a task def-
                     inition is set to none , then you can't specify port map-
                     pings. If the network mode of a task definition is set to
                     host  ,  then host ports must either be undefined or they
                     must match the container port in the port mapping.

                     NOTE:
                        After a task reaches the RUNNING  status,  manual  and
                        automatic host and container port assignments are vis-
                        ible in the Network Bindings section  of  a  container
                        description for a selected task in the Amazon ECS con-
                        sole. The assignments are also visible in the network-
                        Bindings section  DescribeTasks responses.

                     (structure)
                        Port  mappings allow containers to access ports on the
                        host container instance to send  or  receive  traffic.
                        Port  mappings  are specified as part of the container
                        definition.

                        If you use containers in a task  with  the  awsvpc  or
                        host  network  mode,  specify  the exposed ports using
                        containerPort . The hostPort can be left blank  or  it
                        must be the same value as the containerPort .

                        NOTE:
                            You  can't expose the same container port for mul-
                            tiple protocols. If you attempt this, an error  is
                            returned.

                        After  a  task  reaches the RUNNING status, manual and
                        automatic host and container port assignments are vis-
                        ible  in the networkBindings section of  DescribeTasks
                        API responses.

                        containerPort -> (integer)
                            The port number on the container that's  bound  to
                            the  user-specified or automatically assigned host
                            port.

                            If you use containers in a task with the awsvpc or
                            host network mode, specify the exposed ports using
                            containerPort .

                            If you use containers in a task  with  the  bridge
                            network  mode and you specify a container port and
                            not a  host  port,  your  container  automatically
                            receives  a host port in the ephemeral port range.
                            For more information, see hostPort . Port mappings
                            that are automatically assigned in this way do not
                            count toward the 100 reserved  ports  limit  of  a
                            container instance.

                        hostPort -> (integer)
                            The  port  number  on  the  container  instance to
                            reserve for your container.

                            If you use containers in a task with the awsvpc or
                            host network mode, the hostPort can either be left
                            blank or set to the same value as  the  container-
                            Port .

                            If  you  use  containers in a task with the bridge
                            network mode, you can specify a non-reserved  host
                            port  for  your container port mapping, or you can
                            omit the hostPort (or set it to 0 ) while specify-
                            ing  a  containerPort and your container automati-
                            cally receives a port in the ephemeral port  range
                            for  your  container instance operating system and
                            Docker version.

                            The default ephemeral port range for  Docker  ver-
                            sion  1.6.0  and  later  is listed on the instance
                            under /proc/sys/net/ipv4/ip_local_port_range .  If
                            this  kernel parameter is unavailable, the default
                            ephemeral port range from 49153 through  65535  is
                            used. Do not attempt to specify a host port in the
                            ephemeral port range as  these  are  reserved  for
                            automatic  assignment.  In  general,  ports  below
                            32768 are outside of the ephemeral port range.

                            NOTE:
                               The default ephemeral  port  range  from  49153
                               through  65535  is  always used for Docker ver-
                               sions before 1.6.0.

                            The default reserved ports are  22  for  SSH,  the
                            Docker  ports  2375  and  2376, and the Amazon ECS
                            container agent ports 51678-51680. Any  host  port
                            that was previously specified in a running task is
                            also reserved while the task is running. That  is,
                            after a task stops, the host port is released. The
                            current  reserved  ports  are  displayed  in   the
                            remainingResources  of  DescribeContainerInstances
                            output. A container instance can have  up  to  100
                            reserved ports at a time. This number includes the
                            default  reserved  ports.  Automatically  assigned
                            ports  aren't  included  in the 100 reserved ports
                            quota.

                        protocol -> (string)
                            The protocol used for the port mapping. Valid val-
                            ues are tcp and udp . The default is tcp .

                 essential -> (boolean)
                     If  the  essential  parameter of a container is marked as
                     true , and that container fails or stops for any  reason,
                     all  other  containers  that  are  part  of  the task are
                     stopped. If the essential parameter  of  a  container  is
                     marked  as false , its failure doesn't affect the rest of
                     the containers in a task. If this parameter is omitted, a
                     container is assumed to be essential.

                     All  tasks must have at least one essential container. If
                     you have an application that's composed of multiple  con-
                     tainers, group containers that are used for a common pur-
                     pose into components, and separate the  different  compo-
                     nents  into  multiple task definitions. For more informa-
                     tion, see Application Architecture in the Amazon  Elastic
                     Container Service Developer Guide .

                 entryPoint -> (list)

                     WARNING:
                        Early versions of the Amazon ECS container agent don't
                        properly handle entryPoint  parameters.  If  you  have
                        problems  using  entryPoint  ,  update  your container
                        agent or enter your commands and arguments as  command
                        array items instead.

                     The  entry  point  that's  passed  to the container. This
                     parameter maps to Entrypoint in the  Create  a  container
                     section  of  the  Docker  Remote API and the --entrypoint
                     option  to  docker  run  .  For  more  information,   see
                     https://docs.docker.com/engine/reference/builder/#entrypoint
                     .

                     (string)

                 command -> (list)
                     The command that's passed to the container. This  parame-
                     ter  maps to Cmd in the Create a container section of the
                     Docker Remote API and the COMMAND parameter to docker run
                     .         For         more        information,        see
                     https://docs.docker.com/engine/reference/builder/#cmd   .
                     If there are multiple arguments, each argument is a sepa-
                     rated string in the array.

                     (string)

                 environment -> (list)
                     The environment variables to pass to  a  container.  This
                     parameter  maps  to Env in the Create a container section
                     of the Docker Remote API and the --env option  to  docker
                     run .

                     WARNING:
                        We  don't recommend that you use plaintext environment
                        variables for sensitive information, such  as  creden-
                        tial data.

                     (structure)
                        A key-value pair object.

                        name -> (string)
                            The  name  of  the key-value pair. For environment
                            variables, this is the  name  of  the  environment
                            variable.

                        value -> (string)
                            The  value  of the key-value pair. For environment
                            variables, this is the value  of  the  environment
                            variable.

                 environmentFiles -> (list)
                     A  list  of files containing the environment variables to
                     pass  to  a  container.  This  parameter  maps   to   the
                     --env-file option to docker run .

                     You  can  specify  up  to ten environment files. The file
                     must have a .env file extension. Each line in an environ-
                     ment  file  contains  an  environment  variable  in VARI-
                     ABLE=VALUE format. Lines beginning with # are treated  as
                     comments  and are ignored. For more information about the
                     environment variable file  syntax,  see  Declare  default
                     environment variables in file .

                     If  there  are  environment variables specified using the
                     environment parameter in  a  container  definition,  they
                     take  precedence  over  the variables contained within an
                     environment file. If multiple environment files are spec-
                     ified  that  contain the same variable, they're processed
                     from the top down. We recommend that you use unique vari-
                     able names. For more information, see Specifying Environ-
                     ment Variables in the Amazon  Elastic  Container  Service
                     Developer Guide .

                     (structure)
                        A  list  of files containing the environment variables
                        to pass to a container. You  can  specify  up  to  ten
                        environment  files.  The  file  must  have a .env file
                        extension. Each line in  an  environment  file  should
                        contain an environment variable in VARIABLE=VALUE for-
                        mat. Lines beginning with # are  treated  as  comments
                        and  are ignored. For more information about the envi-
                        ronment variable  file  syntax,  see  Declare  default
                        environment variables in file .

                        If there are environment variables specified using the
                        environment parameter in a container definition,  they
                        take precedence over the variables contained within an
                        environment file. If multiple  environment  files  are
                        specified that contain the same variable, they're pro-
                        cessed from the top down. We recommend  that  you  use
                        unique  variable  names.  For  more  information,  see
                        Specifying environment variables in the Amazon Elastic
                        Container Service Developer Guide .

                        This  parameter  is only supported for tasks hosted on
                        Fargate using the following platform versions:

                        o Linux platform version 1.4.0 or later.

                        o Windows platform version 1.0.0 or later.

                        value -> (string)
                            The Amazon Resource Name (ARN) of  the  Amazon  S3
                            object containing the environment variable file.

                        type -> (string)
                            The  file type to use. The only supported value is
                            s3 .

                 mountPoints -> (list)
                     The mount points for data volumes in your container.

                     This parameter maps to Volumes in the Create a  container
                     section  of the Docker Remote API and the --volume option
                     to docker run .

                     Windows containers can mount  whole  directories  on  the
                     same drive as $env:ProgramData . Windows containers can't
                     mount directories on a different drive, and  mount  point
                     can't be across drives.

                     (structure)
                        Details for a volume mount point that's used in a con-
                        tainer definition.

                        sourceVolume -> (string)
                            The name of the volume to mount. Must be a  volume
                            name referenced in the name parameter of task def-
                            inition volume .

                        containerPath -> (string)
                            The path on the container to mount the host volume
                            at.

                        readOnly -> (boolean)
                            If   this  value  is  true  ,  the  container  has
                            read-only access to the volume. If this  value  is
                            false  ,  then the container can write to the vol-
                            ume. The default value is false .

                 volumesFrom -> (list)
                     Data volumes to mount from another container. This param-
                     eter  maps  to VolumesFrom in the Create a container sec-
                     tion of the Docker  Remote  API  and  the  --volumes-from
                     option to docker run .

                     (structure)
                        Details on a data volume from another container in the
                        same task definition.

                        sourceContainer -> (string)
                            The name of another container within the same task
                            definition to mount volumes from.

                        readOnly -> (boolean)
                            If   this  value  is  true  ,  the  container  has
                            read-only access to the volume. If this  value  is
                            false  ,  then the container can write to the vol-
                            ume. The default value is false .

                 linuxParameters -> (structure)
                     Linux-specific modifications that are applied to the con-
                     tainer,  such  as  Linux  kernel  capabilities.  For more
                     information see  KernelCapabilities .

                     NOTE:
                        This parameter is not supported for  Windows  contain-
                        ers.

                     capabilities -> (structure)
                        The  Linux  capabilities  for  the  container that are
                        added to or dropped  from  the  default  configuration
                        provided by Docker.

                        NOTE:
                            For  tasks that use the Fargate launch type, capa-
                            bilities is supported for  all  platform  versions
                            but  the  add parameter is only supported if using
                            platform version 1.4.0 or later.

                        add -> (list)
                            The Linux capabilities for the container that have
                            been  added  to the default configuration provided
                            by Docker. This parameter maps to  CapAdd  in  the
                            Create  a  container  section of the Docker Remote
                            API and the --cap-add option to docker run .

                            NOTE:
                               Tasks launched on Fargate only  support  adding
                               the SYS_PTRACE kernel capability.

                            Valid    values:   "ALL"   |   "AUDIT_CONTROL"   |
                            "AUDIT_WRITE"  |  "BLOCK_SUSPEND"  |   "CHOWN"   |
                            "DAC_OVERRIDE"  |  "DAC_READ_SEARCH"  | "FOWNER" |
                            "FSETID" | "IPC_LOCK" |  "IPC_OWNER"  |  "KILL"  |
                            "LEASE"   |   "LINUX_IMMUTABLE"  |  "MAC_ADMIN"  |
                            "MAC_OVERRIDE"   |   "MKNOD"   |   "NET_ADMIN"   |
                            "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
                            "SETFCAP" | "SETGID"  |  "SETPCAP"  |  "SETUID"  |
                            "SYS_ADMIN"   |   "SYS_BOOT"   |   "SYS_CHROOT"  |
                            "SYS_MODULE"  |   "SYS_NICE"   |   "SYS_PACCT"   |
                            "SYS_PTRACE"  |  "SYS_RAWIO"  |  "SYS_RESOURCE"  |
                            "SYS_TIME"  |  "SYS_TTY_CONFIG"   |   "SYSLOG"   |
                            "WAKE_ALARM"

                            (string)

                        drop -> (list)
                            The Linux capabilities for the container that have
                            been removed from the default  configuration  pro-
                            vided by Docker. This parameter maps to CapDrop in
                            the Create  a  container  section  of  the  Docker
                            Remote API and the --cap-drop option to docker run
                            .

                            Valid   values:   "ALL"   |   "AUDIT_CONTROL"    |
                            "AUDIT_WRITE"   |   "BLOCK_SUSPEND"  |  "CHOWN"  |
                            "DAC_OVERRIDE" | "DAC_READ_SEARCH"  |  "FOWNER"  |
                            "FSETID"  |  "IPC_LOCK"  |  "IPC_OWNER" | "KILL" |
                            "LEASE"  |  "LINUX_IMMUTABLE"  |   "MAC_ADMIN"   |
                            "MAC_OVERRIDE"   |   "MKNOD"   |   "NET_ADMIN"   |
                            "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
                            "SETFCAP"  |  "SETGID"  |  "SETPCAP"  | "SETUID" |
                            "SYS_ADMIN"  |   "SYS_BOOT"   |   "SYS_CHROOT"   |
                            "SYS_MODULE"   |   "SYS_NICE"   |   "SYS_PACCT"  |
                            "SYS_PTRACE"  |  "SYS_RAWIO"  |  "SYS_RESOURCE"  |
                            "SYS_TIME"   |   "SYS_TTY_CONFIG"   |  "SYSLOG"  |
                            "WAKE_ALARM"

                            (string)

                     devices -> (list)
                        Any host devices to  expose  to  the  container.  This
                        parameter  maps  to  Devices in the Create a container
                        section of the Docker  Remote  API  and  the  --device
                        option to docker run .

                        NOTE:
                            If  you're using tasks that use the Fargate launch
                            type, the devices parameter isn't supported.

                        (structure)
                            An object representing a container  instance  host
                            device.

                            hostPath -> (string)
                               The  path  for the device on the host container
                               instance.

                            containerPath -> (string)
                               The path  inside  the  container  at  which  to
                               expose the host device.

                            permissions -> (list)
                               The explicit permissions to provide to the con-
                               tainer for the device.  By  default,  the  con-
                               tainer  has  permissions for read , write , and
                               mknod for the device.

                               (string)

                     initProcessEnabled -> (boolean)
                        Run an init process inside the container that forwards
                        signals  and  reaps  processes. This parameter maps to
                        the --init option  to  docker  run  .  This  parameter
                        requires  version  1.25  of  the  Docker Remote API or
                        greater on  your  container  instance.  To  check  the
                        Docker  Remote API version on your container instance,
                        log in to your container instance and run the  follow-
                        ing    command:    sudo    docker   version   --format
                        '{{.Server.APIVersion}}'

                     sharedMemorySize -> (integer)
                        The value for the size (in MiB) of the  /dev/shm  vol-
                        ume.  This  parameter maps to the --shm-size option to
                        docker run .

                        NOTE:
                            If you are using tasks that use the Fargate launch
                            type,  the  sharedMemorySize parameter is not sup-
                            ported.

                     tmpfs -> (list)
                        The container path, mount options, and size  (in  MiB)
                        of the tmpfs mount. This parameter maps to the --tmpfs
                        option to docker run .

                        NOTE:
                            If you're using tasks that use the Fargate  launch
                            type, the tmpfs parameter isn't supported.

                        (structure)
                            The container path, mount options, and size of the
                            tmpfs mount.

                            containerPath -> (string)
                               The absolute file path where the  tmpfs  volume
                               is to be mounted.

                            size -> (integer)
                               The  maximum size (in MiB) of the tmpfs volume.

                            mountOptions -> (list)
                               The list of tmpfs volume mount options.

                               Valid values: "defaults" | "ro" | "rw" | "suid"
                               |  "nosuid"  |  "dev"  |  "nodev"  |  "exec"  |
                               "noexec" |  "sync"  |  "async"  |  "dirsync"  |
                               "remount" | "mand" | "nomand" | "atime" | "noa-
                               time" | "diratime" | "nodiratime"  |  "bind"  |
                               "rbind"  | "unbindable" | "runbindable" | "pri-
                               vate" | "rprivate" |  "shared"  |  "rshared"  |
                               "slave"  | "rslave" | "relatime" | "norelatime"
                               | "strictatime" | "nostrictatime"  |  "mode"  |
                               "uid"  |  "gid"  |  "nr_inodes" | "nr_blocks" |
                               "mpol"

                               (string)

                     maxSwap -> (integer)
                        The total amount of swap memory (in MiB)  a  container
                        can  use.  This  parameter  will  be translated to the
                        --memory-swap option to docker  run  where  the  value
                        would  be  the  sum  of  the container memory plus the
                        maxSwap value.

                        If a maxSwap value of 0 is  specified,  the  container
                        will  not use swap. Accepted values are 0 or any posi-
                        tive integer. If the maxSwap parameter is omitted, the
                        container will use the swap configuration for the con-
                        tainer instance it is running on. A maxSwap value must
                        be set for the swappiness parameter to be used.

                        NOTE:
                            If  you're using tasks that use the Fargate launch
                            type, the maxSwap parameter isn't supported.

                     swappiness -> (integer)
                        This allows you to tune a container's  memory  swappi-
                        ness  behavior.  A  swappiness  value  of 0 will cause
                        swapping to not happen unless absolutely necessary.  A
                        swappiness value of 100 will cause pages to be swapped
                        very aggressively. Accepted values are  whole  numbers
                        between 0 and 100 . If the swappiness parameter is not
                        specified, a default value of 60 is used. If  a  value
                        is  not  specified  for maxSwap then this parameter is
                        ignored. This parameter maps to  the  --memory-swappi-
                        ness option to docker run .

                        NOTE:
                            If  you're using tasks that use the Fargate launch
                            type, the swappiness parameter isn't supported.

                 secrets -> (list)
                     The secrets to pass to the container. For  more  informa-
                     tion, see Specifying Sensitive Data in the Amazon Elastic
                     Container Service Developer Guide .

                     (structure)
                        An object representing the secret to  expose  to  your
                        container.  Secrets  can  be exposed to a container in
                        the following ways:

                        o To inject sensitive data  into  your  containers  as
                          environment  variables,  use  the  secrets container
                          definition parameter.

                        o To reference sensitive information in the  log  con-
                          figuration  of  a  container,  use the secretOptions
                          container definition parameter.

                        For more information, see Specifying Sensitive Data in
                        the Amazon Elastic Container Service Developer Guide .

                        name -> (string)
                            The name of the secret.

                        valueFrom -> (string)
                            The secret to expose to the  container.  The  sup-
                            ported  values  are  either  the  full  ARN of the
                            Secrets Manager secret or  the  full  ARN  of  the
                            parameter in the SSM Parameter Store.

                            NOTE:
                               If  the SSM Parameter Store parameter exists in
                               the same Region as the task  you're  launching,
                               then you can use either the full ARN or name of
                               the parameter. If the  parameter  exists  in  a
                               different  Region,  then  the  full ARN must be
                               specified.

                 dependsOn -> (list)
                     The dependencies defined for container startup and  shut-
                     down. A container can contain multiple dependencies. When
                     a dependency is defined for container startup,  for  con-
                     tainer shutdown it is reversed.

                     For  tasks  using  the  EC2  launch  type,  the container
                     instances require at least version  1.26.0  of  the  con-
                     tainer  agent  to enable container dependencies. However,
                     we recommend using the latest  container  agent  version.
                     For  information  about  checking  your agent version and
                     updating to the latest version, see Updating  the  Amazon
                     ECS  Container Agent in the Amazon Elastic Container Ser-
                     vice  Developer  Guide  .  If  you're  using  an   Amazon
                     ECS-optimized  Linux  AMI,  your  instance needs at least
                     version 1.26.0-1 of the ecs-init package.  If  your  con-
                     tainer  instances  are  launched from version 20190301 or
                     later, then they contain the  required  versions  of  the
                     container  agent and ecs-init . For more information, see
                     Amazon ECS-optimized Linux AMI in the Amazon Elastic Con-
                     tainer Service Developer Guide .

                     For tasks using the Fargate launch type, the task or ser-
                     vice requires the following platforms:

                     o Linux platform version 1.3.0 or later.

                     o Windows platform version 1.0.0 or later.

                     (structure)
                        The dependencies defined  for  container  startup  and
                        shutdown.  A  container can contain multiple dependen-
                        cies. When  a  dependency  is  defined  for  container
                        startup, for container shutdown it is reversed.

                        Your  Amazon  ECS container instances require at least
                        version 1.26.0 of the container agent to  enable  con-
                        tainer  dependencies.  However, we recommend using the
                        latest container agent version. For information  about
                        checking your agent version and updating to the latest
                        version, see Updating the Amazon ECS  Container  Agent
                        in  the  Amazon  Elastic  Container  Service Developer
                        Guide . If you're using an Amazon ECS-optimized  Linux
                        AMI,  your instance needs at least version 1.26.0-1 of
                        the ecs-init package. If your container instances  are
                        launched  from  version  20190301  or later, then they
                        contain the required versions of the  container  agent
                        and  ecs-init  .  For  more  information,  see  Amazon
                        ECS-optimized Linux AMI in  the  Amazon  Elastic  Con-
                        tainer Service Developer Guide .

                        NOTE:
                            For  tasks  that  use the Fargate launch type, the
                            task or service requires the following platforms:

                            o Linux platform version 1.3.0 or later.

                            o Windows platform version 1.0.0 or later.

                        containerName -> (string)
                            The name of a container.

                        condition -> (string)
                            The dependency condition  of  the  container.  The
                            following  are  the available conditions and their
                            behavior:

                            o START - This condition emulates the behavior  of
                              links  and  volumes  today.  It validates that a
                              dependent container is started before permitting
                              other containers to start.

                            o COMPLETE  -  This  condition  validates  that  a
                              dependent container runs to  completion  (exits)
                              before  permitting  other  containers  to start.
                              This can be useful for  nonessential  containers
                              that  run a script and then exit. This condition
                              can't be set on an essential container.

                            o SUCCESS - This condition is the same as COMPLETE
                              ,  but it also requires that the container exits
                              with a zero status. This condition can't be  set
                              on an essential container.

                            o HEALTHY  -  This  condition  validates  that the
                              dependent container  passes  its  Docker  health
                              check  before  permitting  other  containers  to
                              start. This requires  that  the  dependent  con-
                              tainer has health checks configured. This condi-
                              tion is confirmed only at task startup.

                 startTimeout -> (integer)
                     Time duration (in seconds) to wait before  giving  up  on
                     resolving  dependencies for a container. For example, you
                     specify two containers in a task definition with contain-
                     erA having a dependency on containerB reaching a COMPLETE
                     , SUCCESS , or HEALTHY status. If a startTimeout value is
                     specified for containerB and it doesn't reach the desired
                     status within that time then containerA gives up and  not
                     start.  This  results  in  the  task  transitioning  to a
                     STOPPED state.

                     NOTE:
                        When the ECS_CONTAINER_START_TIMEOUT  container  agent
                        configuration variable is used, it's enforced indepen-
                        dently from this start timeout value.

                     For tasks using the Fargate launch type, the task or ser-
                     vice requires the following platforms:

                     o Linux platform version 1.3.0 or later.

                     o Windows platform version 1.0.0 or later.

                     For  tasks  using  the  EC2  launch  type, your container
                     instances require at least version  1.26.0  of  the  con-
                     tainer  agent  to enable a container start timeout value.
                     However, we recommend using the  latest  container  agent
                     version.  For  information about checking your agent ver-
                     sion and updating to the latest version, see Updating the
                     Amazon  ECS  Container  Agent  in the Amazon Elastic Con-
                     tainer Service Developer Guide . If you're using an  Ama-
                     zon ECS-optimized Linux AMI, your instance needs at least
                     version 1.26.0-1 of the ecs-init package.  If  your  con-
                     tainer  instances  are  launched from version 20190301 or
                     later, then they contain the  required  versions  of  the
                     container  agent and ecs-init . For more information, see
                     Amazon ECS-optimized Linux AMI in the Amazon Elastic Con-
                     tainer Service Developer Guide .

                 stopTimeout -> (integer)
                     Time  duration  (in seconds) to wait before the container
                     is forcefully killed if it doesn't exit normally  on  its
                     own.

                     For tasks using the Fargate launch type, the task or ser-
                     vice requires the following platforms:

                     o Linux platform version 1.3.0 or later.

                     o Windows platform version 1.0.0 or later.

                     The max stop timeout value is  120  seconds  and  if  the
                     parameter  is not specified, the default value of 30 sec-
                     onds is used.

                     For tasks that use the EC2 launch type, if the  stopTime-
                     out parameter isn't specified, the value set for the Ama-
                     zon ECS container agent configuration  variable  ECS_CON-
                     TAINER_STOP_TIMEOUT  is  used. If neither the stopTimeout
                     parameter or the ECS_CONTAINER_STOP_TIMEOUT agent config-
                     uration  variable  are set, then the default values of 30
                     seconds for Linux containers and 30  seconds  on  Windows
                     containers  are used. Your container instances require at
                     least version 1.26.0 of the container agent to  enable  a
                     container stop timeout value. However, we recommend using
                     the latest container agent version. For information about
                     checking  your  agent  version and updating to the latest
                     version, see Updating the Amazon ECS Container  Agent  in
                     the Amazon Elastic Container Service Developer Guide . If
                     you're using an  Amazon  ECS-optimized  Linux  AMI,  your
                     instance  needs at least version 1.26.0-1 of the ecs-init
                     package. If your container instances  are  launched  from
                     version 20190301 or later, then they contain the required
                     versions of the container agent and ecs-init .  For  more
                     information,  see  Amazon  ECS-optimized Linux AMI in the
                     Amazon Elastic Container Service Developer Guide .

                 hostname -> (string)
                     The hostname to use for your  container.  This  parameter
                     maps to Hostname in the Create a container section of the
                     Docker Remote API and the --hostname option to docker run
                     .

                     NOTE:
                        The  hostname  parameter  is  not  supported if you're
                        using the awsvpc network mode.

                 user -> (string)
                     The user to use inside the container. This parameter maps
                     to  User  in the Create a container section of the Docker
                     Remote API and the --user option to docker run .

                     WARNING:
                        When running tasks using the host network mode,  don't
                        run  containers using the root user (UID 0). We recom-
                        mend using a non-root user for better security.

                     You can specify the user using the following formats.  If
                     specifying  a  UID or GID, you must specify it as a posi-
                     tive integer.

                     o user

                     o user:group

                     o uid

                     o uid:gid

                     o user:gid

                     o uid:group

                     NOTE:
                        This parameter is not supported for  Windows  contain-
                        ers.

                 workingDirectory -> (string)
                     The  working  directory  to  run commands inside the con-
                     tainer in. This  parameter  maps  to  WorkingDir  in  the
                     Create  a  container section of the Docker Remote API and
                     the --workdir option to docker run .

                 disableNetworking -> (boolean)
                     When this  parameter  is  true,  networking  is  disabled
                     within  the container. This parameter maps to NetworkDis-
                     abled in the Create a container  section  of  the  Docker
                     Remote API .

                     NOTE:
                        This  parameter  is not supported for Windows contain-
                        ers.

                 privileged -> (boolean)
                     When this parameter is true, the container is given  ele-
                     vated  privileges on the host container instance (similar
                     to the root user). This parameter maps to  Privileged  in
                     the  Create  a container section of the Docker Remote API
                     and the --privileged option to docker run .

                     NOTE:
                        This parameter is not supported for Windows containers
                        or tasks run on Fargate.

                 readonlyRootFilesystem -> (boolean)
                     When  this  parameter  is  true,  the  container is given
                     read-only access to its root file system. This  parameter
                     maps  to ReadonlyRootfs in the Create a container section
                     of the Docker Remote API and the  --read-only  option  to
                     docker run .

                     NOTE:
                        This  parameter  is not supported for Windows contain-
                        ers.

                 dnsServers -> (list)
                     A list of DNS servers that  are  presented  to  the  con-
                     tainer.  This  parameter maps to Dns in the Create a con-
                     tainer section of the Docker Remote  API  and  the  --dns
                     option to docker run .

                     NOTE:
                        This  parameter  is not supported for Windows contain-
                        ers.

                     (string)

                 dnsSearchDomains -> (list)
                     A list of DNS search domains that are  presented  to  the
                     container. This parameter maps to DnsSearch in the Create
                     a container section of the  Docker  Remote  API  and  the
                     --dns-search option to docker run .

                     NOTE:
                        This  parameter  is not supported for Windows contain-
                        ers.

                     (string)

                 extraHosts -> (list)
                     A list of hostnames and IP address mappings to append  to
                     the /etc/hosts file on the container. This parameter maps
                     to ExtraHosts in the Create a container  section  of  the
                     Docker Remote API and the --add-host option to docker run
                     .

                     NOTE:
                        This parameter isn't supported for Windows  containers
                        or tasks that use the awsvpc network mode.

                     (structure)
                        Hostnames and IP address entries that are added to the
                        /etc/hosts file of  a  container  via  the  extraHosts
                        parameter of its  ContainerDefinition .

                        hostname -> (string)
                            The hostname to use in the /etc/hosts entry.

                        ipAddress -> (string)
                            The IP address to use in the /etc/hosts entry.

                 dockerSecurityOptions -> (list)
                     A  list  of  strings to provide custom labels for SELinux
                     and AppArmor multi-level  security  systems.  This  field
                     isn't  valid  for  containers  in tasks using the Fargate
                     launch type.

                     With Windows containers, this parameter can  be  used  to
                     reference  a credential spec file when configuring a con-
                     tainer for  Active  Directory  authentication.  For  more
                     information,  see  Using  gMSAs for Windows Containers in
                     the Amazon Elastic Container Service Developer Guide .

                     This parameter maps to SecurityOpt in the Create  a  con-
                     tainer  section  of the Docker Remote API and the --secu-
                     rity-opt option to docker run .

                     NOTE:
                        The Amazon ECS container agent running on a  container
                        instance  must  register  with  the  ECS_SELINUX_CAPA-
                        BLE=true  or   ECS_APPARMOR_CAPABLE=true   environment
                        variables  before  containers  placed on that instance
                        can use these security options. For more  information,
                        see  Amazon  ECS  Container Agent Configuration in the
                        Amazon Elastic Container Service Developer Guide .

                     For more information about valid values, see  Docker  Run
                     Security Configuration .

                     Valid  values: "no-new-privileges" | "apparmor:PROFILE" |
                     "label:value" | "credentialspec:CredentialSpecFilePath"

                     (string)

                 interactive -> (boolean)
                     When this parameter is true , you can  deploy  container-
                     ized applications that require stdin or a tty to be allo-
                     cated. This parameter maps to OpenStdin in the  Create  a
                     container  section  of  the  Docker  Remote  API  and the
                     --interactive option to docker run .

                 pseudoTerminal -> (boolean)
                     When this parameter is true , a TTY  is  allocated.  This
                     parameter  maps  to Tty in the Create a container section
                     of the Docker Remote API and the --tty option  to  docker
                     run .

                 dockerLabels -> (map)
                     A  key/value  map of labels to add to the container. This
                     parameter maps to Labels in the Create a  container  sec-
                     tion  of  the Docker Remote API and the --label option to
                     docker run . This parameter requires version 1.18 of  the
                     Docker  Remote API or greater on your container instance.
                     To check the Docker Remote API version on your  container
                     instance,  log  in to your container instance and run the
                     following   command:   sudo   docker   version   --format
                     '{{.Server.APIVersion}}'

                     key -> (string)

                     value -> (string)

                 ulimits -> (list)
                     A  list  of  ulimits to set in the container. If a ulimit
                     value is specified in a task definition, it overrides the
                     default  values  set  by  Docker.  This parameter maps to
                     Ulimits in the Create a container section of  the  Docker
                     Remote  API and the --ulimit option to docker run . Valid
                     naming values are displayed in the  Ulimit data type.

                     Amazon ECS  tasks  hosted  on  Fargate  use  the  default
                     resource  limit  values  set by the operating system with
                     the exception of  the  nofile  resource  limit  parameter
                     which Fargate overrides. The nofile resource limit sets a
                     restriction on the number of open files that a  container
                     can  use.  The default nofile soft limit is 1024 and hard
                     limit is 4096 .

                     This parameter requires version 1.18 of the Docker Remote
                     API  or  greater on your container instance. To check the
                     Docker Remote API version on your container instance, log
                     in  to your container instance and run the following com-
                     mand: sudo  docker  version  --format  '{{.Server.APIVer-
                     sion}}'

                     NOTE:
                        This  parameter  is not supported for Windows contain-
                        ers.

                     (structure)
                        The ulimit settings to pass to the container.

                        Amazon ECS tasks hosted on  Fargate  use  the  default
                        resource limit values set by the operating system with
                        the exception of the nofile resource  limit  parameter
                        which  Fargate  overrides.  The  nofile resource limit
                        sets a restriction on the number of open files that  a
                        container  can  use.  The default nofile soft limit is
                        1024 and hard limit is 4096 .

                        name -> (string)
                            The type of the ulimit .

                        softLimit -> (integer)
                            The soft limit for the ulimit type.

                        hardLimit -> (integer)
                            The hard limit for the ulimit type.

                 logConfiguration -> (structure)
                     The log configuration specification for the container.

                     This parameter maps to LogConfig in  the  Create  a  con-
                     tainer   section   of  the  Docker  Remote  API  and  the
                     --log-driver option to docker run . By default,  contain-
                     ers  use  the  same logging driver that the Docker daemon
                     uses. However the container can use a  different  logging
                     driver  than the Docker daemon by specifying a log driver
                     with this parameter in the container definition. To use a
                     different  logging driver for a container, the log system
                     must be configured properly on the container instance (or
                     on  a  different  log server for remote logging options).
                     For more information about the options for different sup-
                     ported  log drivers, see Configure logging drivers in the
                     Docker documentation.

                     NOTE:
                        Amazon ECS currently supports a subset of the  logging
                        drivers  available  to the Docker daemon (shown in the
                        LogConfiguration data type).  Additional  log  drivers
                        may  be available in future releases of the Amazon ECS
                        container agent.

                     This parameter requires version 1.18 of the Docker Remote
                     API  or  greater on your container instance. To check the
                     Docker Remote API version on your container instance, log
                     in  to your container instance and run the following com-
                     mand: sudo  docker  version  --format  '{{.Server.APIVer-
                     sion}}'

                     NOTE:
                        The  Amazon ECS container agent running on a container
                        instance must register the logging  drivers  available
                        on  that instance with the ECS_AVAILABLE_LOGGING_DRIV-
                        ERS environment variable before containers  placed  on
                        that instance can use these log configuration options.
                        For more information, see Amazon ECS  Container  Agent
                        Configuration  in the Amazon Elastic Container Service
                        Developer Guide .

                     logDriver -> (string)
                        The log driver to use for the container.

                        For tasks on Fargate, the supported  log  drivers  are
                        awslogs , splunk , and awsfirelens .

                        For  tasks  hosted  on  Amazon EC2 instances, the sup-
                        ported log drivers are awslogs  ,  fluentd  ,  gelf  ,
                        json-file , journald , logentries ,``syslog`` , splunk
                        , and awsfirelens .

                        For more  information  about  using  the  awslogs  log
                        driver, see Using the awslogs log driver in the Amazon
                        Elastic Container Service Developer Guide .

                        For more information about using the  awsfirelens  log
                        driver,  see  Custom log routing in the Amazon Elastic
                        Container Service Developer Guide .

                        NOTE:
                            If you have a custom driver that isn't listed, you
                            can  fork  the  Amazon ECS container agent project
                            that's available on GitHub  and  customize  it  to
                            work  with that driver. We encourage you to submit
                            pull requests for changes that you would  like  to
                            have included. However, we don't currently provide
                            support for running modified copies of this  soft-
                            ware.

                     options -> (map)
                        The  configuration  options to send to the log driver.
                        This parameter requires version  1.19  of  the  Docker
                        Remote  API  or greater on your container instance. To
                        check the Docker Remote API version on your  container
                        instance,  log  in  to your container instance and run
                        the following command: sudo  docker  version  --format
                        '{{.Server.APIVersion}}'

                        key -> (string)

                        value -> (string)

                     secretOptions -> (list)
                        The secrets to pass to the log configuration. For more
                        information, see Specifying Sensitive Data in the Ama-
                        zon Elastic Container Service Developer Guide .

                        (structure)
                            An  object  representing  the  secret to expose to
                            your container. Secrets can be exposed to  a  con-
                            tainer in the following ways:

                            o To inject sensitive data into your containers as
                              environment variables, use the secrets container
                              definition parameter.

                            o To  reference  sensitive  information in the log
                              configuration of a container, use the  secretOp-
                              tions container definition parameter.

                            For  more  information,  see  Specifying Sensitive
                            Data  in  the  Amazon  Elastic  Container  Service
                            Developer Guide .

                            name -> (string)
                               The name of the secret.

                            valueFrom -> (string)
                               The secret to expose to the container. The sup-
                               ported values are either the full  ARN  of  the
                               Secrets  Manager  secret or the full ARN of the
                               parameter in the SSM Parameter Store.

                               NOTE:
                                   If the SSM Parameter Store parameter exists
                                   in  the  same  Region  as  the  task you're
                                   launching, then you can use either the full
                                   ARN or name of the parameter. If the param-
                                   eter exists in a different Region, then the
                                   full ARN must be specified.

                 healthCheck -> (structure)
                     The container health check command and associated config-
                     uration parameters for the container. This parameter maps
                     to  HealthCheck  in the Create a container section of the
                     Docker Remote API and the HEALTHCHECK parameter of docker
                     run .

                     command -> (list)
                        A  string array representing the command that the con-
                        tainer runs to determine if it is healthy. The  string
                        array must start with CMD to execute the command argu-
                        ments directly, or CMD-SHELL to run the  command  with
                        the container's default shell.

                        When  you  use the Amazon Web Services Management Con-
                        sole JSON panel, the Command Line  Interface,  or  the
                        APIs, enclose the list of commands in brackets.
                            [  "CMD-SHELL", "curl -f http://localhost/ || exit
                            1" ]

                        You don't need to include the brackets  when  you  use
                        the Amazon Web Services Management Console.
                            "CMD-SHELL", "curl -f http://localhost/ || exit 1"

                        An exit code of 0 indicates success, and non-zero exit
                        code  indicates  failure.  For  more  information, see
                        HealthCheck in the Create a container section  of  the
                        Docker Remote API .

                        (string)

                     interval -> (integer)
                        The  time  period in seconds between each health check
                        execution. You may specify between 5 and 300  seconds.
                        The default value is 30 seconds.

                     timeout -> (integer)
                        The  time period in seconds to wait for a health check
                        to succeed before it is considered a failure. You  may
                        specify between 2 and 60 seconds. The default value is
                        5.

                     retries -> (integer)
                        The number of times to retry  a  failed  health  check
                        before  the container is considered unhealthy. You may
                        specify between 1 and 10 retries. The default value is
                        3.

                     startPeriod -> (integer)
                        The  optional  grace period to provide containers time
                        to bootstrap before failed health checks count towards
                        the maximum number of retries. You can specify between
                        0 and 300 seconds. By default, the startPeriod is dis-
                        abled.

                        NOTE:
                            If  a health check succeeds within the startPeriod
                            , then the container is considered healthy and any
                            subsequent  failures count toward the maximum num-
                            ber of retries.

                 systemControls -> (list)
                     A list of namespaced kernel parameters to set in the con-
                     tainer.  This  parameter  maps to Sysctls in the Create a
                     container section  of  the  Docker  Remote  API  and  the
                     --sysctl option to docker run .

                     NOTE:
                        We  don't recommended that you specify network-related
                        systemControls parameters for multiple containers in a
                        single  task  that also uses either the awsvpc or host
                        network modes. For tasks that use the  awsvpc  network
                        mode,  the  container  that's  started last determines
                        which systemControls parameters take effect. For tasks
                        that  use  the  host network mode, it changes the con-
                        tainer instance's namespaced kernel parameters as well
                        as the containers.

                     (structure)
                        A  list  of namespaced kernel parameters to set in the
                        container. This  parameter  maps  to  Sysctls  in  the
                        Create  a  container  section of the Docker Remote API
                        and the --sysctl option to docker run .

                        We don't recommend that  you  specify  network-related
                        systemControls parameters for multiple containers in a
                        single task. This task also uses either the awsvpc  or
                        host  network  mode. It does it for the following rea-
                        sons.

                        o For tasks that use the awsvpc network mode,  if  you
                          set  systemControls for any container, it applies to
                          all containers in the task.  If  you  set  different
                          systemControls  for  multiple containers in a single
                          task, the container that's started  last  determines
                          which systemControls take effect.

                        o For  tasks  that use the host network mode, the sys-
                          temControls  parameter  applies  to  the   container
                          instance's kernel parameter and that of all contain-
                          ers of any tasks running on that container instance.

                        namespace -> (string)
                            The  namespaced  kernel  parameter  to set a value
                            for.

                        value -> (string)
                            The value  for  the  namespaced  kernel  parameter
                            that's specified in namespace .

                 resourceRequirements -> (list)
                     The  type  and  amount  of a resource to assign to a con-
                     tainer. The only supported resource is a GPU.

                     (structure)
                        The type and amount of a resource to assign to a  con-
                        tainer.  The  supported  resource  types  are GPUs and
                        Elastic Inference accelerators. For more  information,
                        see  Working  with  GPUs on Amazon ECS or Working with
                        Amazon Elastic Inference on Amazon ECS in  the  Amazon
                        Elastic Container Service Developer Guide

                        value -> (string)
                            The value for the specified resource type.

                            If  the  GPU type is used, the value is the number
                            of physical GPUs the Amazon  ECS  container  agent
                            reserves  for  the  container.  The number of GPUs
                            that's reserved for all containers in a task can't
                            exceed  the  number  of available GPUs on the con-
                            tainer instance that the task is launched on.

                            If the  InferenceAccelerator  type  is  used,  the
                            value  matches the deviceName for an  InferenceAc-
                            celerator specified in a task definition.

                        type -> (string)
                            The type of resource to assign to a container. The
                            supported values are GPU or InferenceAccelerator .

                 firelensConfiguration -> (structure)
                     The FireLens configuration for  the  container.  This  is
                     used  to specify and configure a log router for container
                     logs. For more information, see Custom Log Routing in the
                     Amazon Elastic Container Service Developer Guide .

                     type -> (string)
                        The log router to use. The valid values are fluentd or
                        fluentbit .

                     options -> (map)
                        The options to use when configuring  the  log  router.
                        This  field  is  optional and can be used to specify a
                        custom configuration file or to add  additional  meta-
                        data,  such as the task, task definition, cluster, and
                        container instance details to the log event. If speci-
                        fied,       the       syntax       to      use      is
                        "options":{"enable-ecs-log-meta-
                        data":"true|false","config-file-type:"s3|file","con-
                        fig-file-value":"arn:aws:s3:::mybucket/flu-
                        ent.conf|filepath"}   .   For  more  information,  see
                        Creating a Task Definition that Uses a  FireLens  Con-
                        figuration  in  the  Amazon  Elastic Container Service
                        Developer Guide .

                        NOTE:
                            Tasks hosted on Fargate only support the file con-
                            figuration file type.

                        key -> (string)

                        value -> (string)

          family -> (string)
              The name of a family that this task definition is registered to.
              Up to 255 characters are allowed. Letters  (both  uppercase  and
              lowercase  letters),  numbers,  hyphens (-), and underscores (_)
              are allowed.

              A family groups multiple versions of a task  definition.  Amazon
              ECS  gives  the  first  task definition that you registered to a
              family a revision number of 1. Amazon ECS gives sequential revi-
              sion numbers to each task definition that you add.

          taskRoleArn -> (string)
              The  short  name or full Amazon Resource Name (ARN) of the Iden-
              tity and Access Management role that grants  containers  in  the
              task permission to call Amazon Web Services APIs on your behalf.
              For more information, see Amazon ECS Task  Role  in  the  Amazon
              Elastic Container Service Developer Guide .

              IAM  roles for tasks on Windows require that the -EnableTaskIAM-
              Role option is set when you launch the Amazon ECS-optimized Win-
              dows  AMI. Your containers must also run some configuration code
              to use the feature. For more information, see Windows IAM  roles
              for  tasks  in  the  Amazon  Elastic Container Service Developer
              Guide .

          executionRoleArn -> (string)
              The Amazon Resource Name (ARN) of the task execution  role  that
              grants  the Amazon ECS container agent permission to make Amazon
              Web Services API calls on your behalf. The  task  execution  IAM
              role is required depending on the requirements of your task. For
              more information, see Amazon ECS task execution IAM role in  the
              Amazon Elastic Container Service Developer Guide .

          networkMode -> (string)
              The  Docker  networking  mode  to  use for the containers in the
              task. The valid values are none , bridge , awsvpc , and  host  .
              If no network mode is specified, the default is bridge .

              For  Amazon  ECS  tasks  on  Fargate, the awsvpc network mode is
              required. For Amazon ECS tasks on Amazon  EC2  Linux  instances,
              any network mode can be used. For Amazon ECS tasks on Amazon EC2
              Windows instances, <default> or awsvpc can be used. If the  net-
              work  mode  is set to none , you cannot specify port mappings in
              your container definitions, and the tasks containers do not have
              external  connectivity.  The host and awsvpc network modes offer
              the highest networking performance for containers  because  they
              use  the  EC2  network  stack instead of the virtualized network
              stack provided by the bridge mode.

              With the host and awsvpc network modes, exposed container  ports
              are mapped directly to the corresponding host port (for the host
              network mode) or the attached  elastic  network  interface  port
              (for  the  awsvpc network mode), so you cannot take advantage of
              dynamic host port mappings.

              WARNING:
                 When using the host network mode, you should not run contain-
                 ers  using the root user (UID 0). It is considered best prac-
                 tice to use a non-root user.

              If the network mode is awsvpc , the task is allocated an elastic
              network  interface, and you must specify a  NetworkConfiguration
              value when you create a service or run a task with the task def-
              inition. For more information, see Task Networking in the Amazon
              Elastic Container Service Developer Guide .

              If the network mode is host , you cannot run multiple instantia-
              tions  of the same task on a single container instance when port
              mappings are used.

              For more information, see Network settings  in  the  Docker  run
              reference .

          revision -> (integer)
              The revision of the task in a particular family. The revision is
              a version number of a task definition in a family. When you reg-
              ister  a task definition for the first time, the revision is 1 .
              Each time that you register a new revision of a task  definition
              in  the same family, the revision value always increases by one.
              This is even if you deregistered previous revisions in this fam-
              ily.

          volumes -> (list)
              The  list  of  data  volume  definitions  for the task. For more
              information, see Using data volumes in tasks in the Amazon Elas-
              tic Container Service Developer Guide .

              NOTE:
                 The host and sourcePath parameters aren't supported for tasks
                 run on Fargate.

              (structure)
                 A data volume that's used in a  task  definition.  For  tasks
                 that use the Amazon Elastic File System (Amazon EFS), specify
                 an efsVolumeConfiguration . For Windows tasks that use Amazon
                 FSx  for  Windows  File Server file system, specify a fsxWin-
                 dowsFileServerVolumeConfiguration .  For  tasks  that  use  a
                 Docker  volume,  specify  a  DockerVolumeConfiguration  . For
                 tasks that use a bind mount host volume, specify a  host  and
                 optional  sourcePath  .  For more information, see Using Data
                 Volumes in Tasks .

                 name -> (string)
                     The name of the volume. Up to 255 letters (uppercase  and
                     lowercase),   numbers,   underscores,   and  hyphens  are
                     allowed. This name  is  referenced  in  the  sourceVolume
                     parameter of container definition mountPoints .

                 host -> (structure)
                     This  parameter is specified when you use bind mount host
                     volumes. The contents of  the  host  parameter  determine
                     whether  your bind mount host volume persists on the host
                     container instance and where it's  stored.  If  the  host
                     parameter is empty, then the Docker daemon assigns a host
                     path for your data volume. However, the data isn't  guar-
                     anteed  to  persist after the containers that are associ-
                     ated with it stop running.

                     Windows containers can mount  whole  directories  on  the
                     same drive as $env:ProgramData . Windows containers can't
                     mount directories on a different drive, and  mount  point
                     can't  be  across  drives.  For  example,  you  can mount
                     C:\my\path:C:\my\path   and    D:\:D:\    ,    but    not
                     D:\my\path:C:\my\path or D:\:C:\my\path .

                     sourcePath -> (string)
                        When  the host parameter is used, specify a sourcePath
                        to declare the path on  the  host  container  instance
                        that's  presented  to the container. If this parameter
                        is empty, then the Docker daemon has assigned  a  host
                        path  for  you. If the host parameter contains a sour-
                        cePath file location, then the data volume persists at
                        the  specified location on the host container instance
                        until you delete it manually. If the sourcePath  value
                        doesn't  exist  on  the  host  container instance, the
                        Docker daemon creates it. If the location does  exist,
                        the contents of the source path folder are exported.

                        If  you're  using  the  Fargate launch type, the sour-
                        cePath parameter is not supported.

                 dockerVolumeConfiguration -> (structure)
                     This parameter is specified when you use Docker  volumes.

                     Windows  containers  only  support  the  use of the local
                     driver. To use bind mounts, specify  the  host  parameter
                     instead.

                     NOTE:
                        Docker  volumes  aren't supported by tasks run on Far-
                        gate.

                     scope -> (string)
                        The scope for the Docker volume  that  determines  its
                        lifecycle.  Docker  volumes  that are scoped to a task
                        are automatically provisioned when the task starts and
                        destroyed when the task stops. Docker volumes that are
                        scoped as shared persist after the task stops.

                     autoprovision -> (boolean)
                        If this value is true , the Docker volume  is  created
                        if it doesn't already exist.

                        NOTE:
                            This field is only used if the scope is shared .

                     driver -> (string)
                        The Docker volume driver to use. The driver value must
                        match the driver name provided by Docker because it is
                        used  for  task placement. If the driver was installed
                        using the Docker plugin CLI, use docker plugin  ls  to
                        retrieve the driver name from your container instance.
                        If the driver was installed using another method,  use
                        Docker  plugin  discovery to retrieve the driver name.
                        For more information, see Docker  plugin  discovery  .
                        This  parameter  maps to Driver in the Create a volume
                        section of the Docker  Remote  API  and  the  xxdriver
                        option to docker volume create .

                     driverOpts -> (map)
                        A   map   of  Docker  driver-specific  options  passed
                        through. This parameter  maps  to  DriverOpts  in  the
                        Create  a  volume section of the Docker Remote API and
                        the xxopt option to docker volume create .

                        key -> (string)

                        value -> (string)

                     labels -> (map)
                        Custom metadata to add to  your  Docker  volume.  This
                        parameter  maps  to Labels in the Create a volume sec-
                        tion of the Docker Remote API and the  xxlabel  option
                        to docker volume create .

                        key -> (string)

                        value -> (string)

                 efsVolumeConfiguration -> (structure)
                     This  parameter is specified when you use an Amazon Elas-
                     tic File System file system for task storage.

                     fileSystemId -> (string)
                        The Amazon EFS file system ID to use.

                     rootDirectory -> (string)
                        The directory within the Amazon  EFS  file  system  to
                        mount  as  the root directory inside the host. If this
                        parameter is omitted, the root of the Amazon EFS  vol-
                        ume  will  be  used.  Specifying  / will have the same
                        effect as omitting this parameter.

                        WARNING:
                            If an EFS access point is specified in the  autho-
                            rizationConfig , the root directory parameter must
                            either be omitted or set to / which  will  enforce
                            the path set on the EFS access point.

                     transitEncryption -> (string)
                        Determines whether to enable encryption for Amazon EFS
                        data in transit between the Amazon ECS  host  and  the
                        Amazon  EFS server. Transit encryption must be enabled
                        if Amazon EFS  IAM  authorization  is  used.  If  this
                        parameter is omitted, the default value of DISABLED is
                        used. For more information,  see  Encrypting  Data  in
                        Transit in the Amazon Elastic File System User Guide .

                     transitEncryptionPort -> (integer)
                        The port to use when sending  encrypted  data  between
                        the  Amazon ECS host and the Amazon EFS server. If you
                        do not specify a transit encryption port, it will  use
                        the  port selection strategy that the Amazon EFS mount
                        helper uses.  For  more  information,  see  EFS  Mount
                        Helper  in the Amazon Elastic File System User Guide .

                     authorizationConfig -> (structure)
                        The authorization configuration details for the Amazon
                        EFS file system.

                        accessPointId -> (string)
                            The  Amazon  EFS  access  point  ID  to use. If an
                            access point  is  specified,  the  root  directory
                            value specified in the EFSVolumeConfiguration must
                            either be omitted or set to / which  will  enforce
                            the path set on the EFS access point. If an access
                            point is used, transit encryption must be  enabled
                            in  the EFSVolumeConfiguration . For more informa-
                            tion, see Working with Amazon EFS Access Points in
                            the Amazon Elastic File System User Guide .

                        iam -> (string)
                            Determines  whether to use the Amazon ECS task IAM
                            role defined in a task  definition  when  mounting
                            the  Amazon  EFS  file system. If enabled, transit
                            encryption must be enabled in the EFSVolumeConfig-
                            uration  .  If  this  parameter  is  omitted,  the
                            default value of DISABLED is used. For more infor-
                            mation,  see Using Amazon EFS Access Points in the
                            Amazon Elastic Container Service Developer Guide .

                 fsxWindowsFileServerVolumeConfiguration -> (structure)
                     This  parameter  is specified when you use Amazon FSx for
                     Windows File Server file system for task storage.

                     fileSystemId -> (string)
                        The Amazon FSx for Windows File Server file system  ID
                        to use.

                     rootDirectory -> (string)
                        The  directory  within the Amazon FSx for Windows File
                        Server file system to  mount  as  the  root  directory
                        inside the host.

                     authorizationConfig -> (structure)
                        The authorization configuration details for the Amazon
                        FSx for Windows File Server file system.

                        credentialsParameter -> (string)
                            The authorization credential option  to  use.  The
                            authorization  credential  options can be provided
                            using either the Amazon Resource Name (ARN) of  an
                            Secrets  Manager  secret  or  SSM  Parameter Store
                            parameter. The ARNs refer to  the  stored  creden-
                            tials.

                        domain -> (string)
                            A   fully  qualified  domain  name  hosted  by  an
                            Directory Service  Managed  Microsoft  AD  (Active
                            Directory) or self-hosted AD on Amazon EC2.

          status -> (string)
              The status of the task definition.

          requiresAttributes -> (list)
              The container instance attributes required by your task. When an
              Amazon EC2 instance is registered to your  cluster,  the  Amazon
              ECS  container  agent  assigns  some  standard attributes to the
              instance. You can apply custom attributes. These  are  specified
              as  key-value  pairs using the Amazon ECS console or the  PutAt-
              tributes API. These attributes are used  when  determining  task
              placement  for  tasks  hosted  on Amazon EC2 instances. For more
              information, see Attributes in the Amazon Elastic Container Ser-
              vice Developer Guide .

              NOTE:
                 This parameter isn't supported for tasks run on Fargate.

              (structure)
                 An  attribute  is a name-value pair that's associated with an
                 Amazon ECS object. Attributes enable you to extend the Amazon
                 ECS  data  model by adding custom metadata to your resources.
                 For more information, see Attributes in  the  Amazon  Elastic
                 Container Service Developer Guide .

                 name -> (string)
                     The  name of the attribute. The name must contain between
                     1 and  128  characters.  The  name  may  contain  letters
                     (uppercase  and  lowercase), numbers, hyphens (-), under-
                     scores (_), forward slashes  (/),  back  slashes  (),  or
                     periods (.).

                 value -> (string)
                     The  value  of  the  attribute.  The  value  must contain
                     between 1 and 128  characters.  It  can  contain  letters
                     (uppercase  and  lowercase), numbers, hyphens (-), under-
                     scores (_), periods (.), at signs  (@),  forward  slashes
                     (/),  back  slashes  (), colons (:), or spaces. The value
                     can't can't start or end with a space.

                 targetType -> (string)
                     The type of the target to attach the attribute with. This
                     parameter  is required if you use the short form ID for a
                     resource instead of the full ARN.

                 targetId -> (string)
                     The ID of the target. You can specify the short  form  ID
                     for a resource or the full Amazon Resource Name (ARN).

          placementConstraints -> (list)
              An array of placement constraint objects to use for tasks.

              NOTE:
                 This parameter isn't supported for tasks run on Fargate.

              (structure)
                 An  object representing a constraint on task placement in the
                 task definition. For more  information,  see  Task  placement
                 constraints in the Amazon Elastic Container Service Developer
                 Guide .

                 NOTE:
                     Task placement constraints aren't supported for tasks run
                     on Fargate.

                 type -> (string)
                     The type of constraint. The MemberOf constraint restricts
                     selection to be from a group of valid candidates.

                 expression -> (string)
                     A cluster query language expression to apply to the  con-
                     straint. For more information, see Cluster query language
                     in the Amazon Elastic Container Service Developer Guide .

          compatibilities -> (list)
              The task launch types the task definition validated against dur-
              ing task definition  registration.  For  more  information,  see
              Amazon  ECS launch types in the Amazon Elastic Container Service
              Developer Guide .

              (string)

          runtimePlatform -> (structure)
              The operating system that your task definitions are running  on.
              A  platform family is specified only for tasks using the Fargate
              launch type.

              When you specify a task in a service, this value must match  the
              runtimePlatform value of the service.

              cpuArchitecture -> (string)
                 The CPU architecture.

                 You can run your Linux tasks on an ARM-based platform by set-
                 ting the value to ARM64 . This option is avaiable  for  tasks
                 that  run on Linuc Amazon EC2 instance or Linux containers on
                 Fargate.

              operatingSystemFamily -> (string)
                 The operating system.

          requiresCompatibilities -> (list)
              The task launch types the task definition was validated against.
              To determine which task launch types the task definition is val-
              idated for, see the  TaskDefinition$compatibilities parameter.

              (string)

          cpu -> (string)
              The number of cpu units used by the task. If  you  use  the  EC2
              launch  type,  this field is optional. Any value can be used. If
              you use the Fargate launch type, this  field  is  required.  You
              must  use one of the following values. The value that you choose
              determines your range of valid values for the memory  parameter.

              The  CPU  units  cannot be less than 1 vCPU when you use Windows
              containers on Fargate.

              o 256 (.25 vCPU) - Available memory values: 512 (0.5  GB),  1024
                (1 GB), 2048 (2 GB)

              o 512  (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2
                GB), 3072 (3 GB), 4096 (4 GB)

              o 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072  (3
                GB),  4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
                (8 GB)

              o 2048 (2 vCPU) - Available memory values: Between 4096  (4  GB)
                and 16384 (16 GB) in increments of 1024 (1 GB)

              o 4096  (4  vCPU) - Available memory values: Between 8192 (8 GB)
                and 30720 (30 GB) in increments of 1024 (1 GB)

          memory -> (string)
              The amount (in MiB) of memory used by the task.

              If your tasks runs on Amazon EC2  instances,  you  must  specify
              either  a  task-level  memory  value or a container-level memory
              value. This field is optional and any value can be  used.  If  a
              task-level memory value is specified, the container-level memory
              value  is  optional.  For  more   information   regarding   con-
              tainer-level     memory     and    memory    reservation,    see
              ContainerDefinition .

              If your tasks runs on Fargate, this field is required. You  must
              use one of the following values. The value you choose determines
              your range of valid values for the cpu parameter.

              o 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values:
                256 (.25 vCPU)

              o 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
                cpu values: 512 (.5 vCPU)

              o 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5  GB),  6144  (6
                GB),  7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1
                vCPU)

              o Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1
                GB) - Available cpu values: 2048 (2 vCPU)

              o Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1
                GB) - Available cpu values: 4096 (4 vCPU)

          inferenceAccelerators -> (list)
              The Elastic Inference accelerator  that's  associated  with  the
              task.

              (structure)
                 Details  on an Elastic Inference accelerator. For more infor-
                 mation, see Working with Amazon Elastic Inference  on  Amazon
                 ECS in the Amazon Elastic Container Service Developer Guide .

                 deviceName -> (string)
                     The Elastic Inference accelerator device name. The  devi-
                     ceName  must also be referenced in a container definition
                     as a  ResourceRequirement .

                 deviceType -> (string)
                     The Elastic Inference accelerator type to use.

          pidMode -> (string)
              The process namespace to use for the containers in the task. The
              valid  values  are host or task . If host is specified, then all
              containers within the tasks that specified the host PID mode  on
              the  same  container  instance  share the same process namespace
              with the host Amazon EC2 instance. If  task  is  specified,  all
              containers  within  the  specified  task  share the same process
              namespace. If no value is specified, the default  is  a  private
              namespace.  For more information, see PID settings in the Docker
              run reference .

              If the host PID mode is used, be aware that there is  a  height-
              ened risk of undesired process namespace expose. For more infor-
              mation, see Docker security .

              NOTE:
                 This parameter is not supported  for  Windows  containers  or
                 tasks run on Fargate.

          ipcMode -> (string)
              The  IPC  resource  namespace  to  use for the containers in the
              task. The valid values are host , task , or none .  If  host  is
              specified,  then  all containers within the tasks that specified
              the host IPC mode on the same container instance share the  same
              IPC  resources  with  the  host  Amazon EC2 instance. If task is
              specified, all containers within the specified  task  share  the
              same  IPC  resources.  If  none is specified, then IPC resources
              within the containers of a task are private and not shared  with
              other  containers  in a task or on the container instance. If no
              value is specified, then  the  IPC  resource  namespace  sharing
              depends  on the Docker daemon setting on the container instance.
              For more information, see IPC settings in the Docker run  refer-
              ence .

              If  the  host IPC mode is used, be aware that there is a height-
              ened risk of undesired IPC namespace expose. For  more  informa-
              tion, see Docker security .

              If you are setting namespaced kernel parameters using systemCon-
              trols for the containers in the task, the following  will  apply
              to your IPC resource namespace. For more information, see System
              Controls in the Amazon Elastic Container Service Developer Guide
              .

              o For  tasks  that  use the host IPC mode, IPC namespace related
                systemControls are not supported.

              o For tasks that use the task IPC mode,  IPC  namespace  related
                systemControls will apply to all containers within a task.

              NOTE:
                 This  parameter  is  not  supported for Windows containers or
                 tasks run on Fargate.

          proxyConfiguration -> (structure)
              The configuration details for the App Mesh proxy.

              Your Amazon ECS container instances  require  at  least  version
              1.26.0  of  the container agent and at least version 1.26.0-1 of
              the ecs-init package to enable a proxy  configuration.  If  your
              container  instances  are launched from the Amazon ECS optimized
              AMI version 20190301 or later, they contain  the  required  ver-
              sions  of  the  container agent and ecs-init . For more informa-
              tion, see Amazon ECS-optimized Linux AMI in the  Amazon  Elastic
              Container Service Developer Guide .

              type -> (string)
                 The proxy type. The only supported value is APPMESH .

              containerName -> (string)
                 The  name  of  the  container that will serve as the App Mesh
                 proxy.

              properties -> (list)
                 The set of network configuration parameters  to  provide  the
                 Container   Network  Interface  (CNI)  plugin,  specified  as
                 key-value pairs.

                 o IgnoredUID - (Required) The user ID (UID) of the proxy con-
                   tainer as defined by the user parameter in a container def-
                   inition. This is used to ensure the proxy ignores  its  own
                   traffic.  If  IgnoredGID  is  specified,  this field can be
                   empty.

                 o IgnoredGID - (Required) The group ID  (GID)  of  the  proxy
                   container  as  defined by the user parameter in a container
                   definition. This is used to ensure the  proxy  ignores  its
                   own  traffic. If IgnoredUID is specified, this field can be
                   empty.

                 o AppPorts - (Required) The list of ports that  the  applica-
                   tion  uses.  Network traffic to these ports is forwarded to
                   the ProxyIngressPort and ProxyEgressPort .

                 o ProxyIngressPort  -  (Required)  Specifies  the  port  that
                   incoming traffic to the AppPorts is directed to.

                 o ProxyEgressPort - (Required) Specifies the port that outgo-
                   ing traffic from the AppPorts is directed to.

                 o EgressIgnoredPorts - (Required) The egress traffic going to
                   the  specified  ports  is ignored and not redirected to the
                   ProxyEgressPort . It can be an empty list.

                 o EgressIgnoredIPs - (Required) The egress traffic  going  to
                   the specified IP addresses is ignored and not redirected to
                   the ProxyEgressPort . It can be an empty list.

                 (structure)
                     A key-value pair object.

                     name -> (string)
                        The name of the key-value pair. For environment  vari-
                        ables, this is the name of the environment variable.

                     value -> (string)
                        The value of the key-value pair. For environment vari-
                        ables, this is the value of the environment  variable.

          registeredAt -> (timestamp)
              The  Unix  timestamp  for  the time when the task definition was
              registered.

          deregisteredAt -> (timestamp)
              The Unix timestamp for the time when  the  task  definition  was
              deregistered.

          registeredBy -> (string)
              The principal that registered the task definition.

          ephemeralStorage -> (structure)
              The  ephemeral  storage  settings  to use for tasks run with the
              task definition.

              sizeInGiB -> (integer)
                 The total amount, in GiB, of ephemeral storage to set for the
                 task.  The  minimum supported value is 21 GiB and the maximum
                 supported value is 200 GiB.



                                                  DEREGISTER-TASK-DEFINITION()
