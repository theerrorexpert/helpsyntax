CREATE-TASK-SET()                                            CREATE-TASK-SET()



NAME
       create-task-set -

DESCRIPTION
       Create  a  task  set in the specified cluster and service. This is used
       when a service uses the EXTERNAL deployment controller type.  For  more
       information, see Amazon ECS Deployment Types in the Amazon Elastic Con-
       tainer Service Developer Guide .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-task-set
          --service <value>
          --cluster <value>
          [--external-id <value>]
          --task-definition <value>
          [--network-configuration <value>]
          [--load-balancers <value>]
          [--service-registries <value>]
          [--launch-type <value>]
          [--capacity-provider-strategy <value>]
          [--platform-version <value>]
          [--scale <value>]
          [--client-token <value>]
          [--tags <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --service (string)
          The short name or full Amazon Resource Name (ARN) of the service  to
          create the task set in.

       --cluster (string)
          The  short  name  or  full Amazon Resource Name (ARN) of the cluster
          that hosts the service to create the task set in.

       --external-id (string)
          An optional non-unique tag that identifies this task set in external
          systems. If the task set is associated with a service discovery reg-
          istry, the tasks in this task set will have the  ECS_TASK_SET_EXTER-
          NAL_ID Cloud Map attribute set to the provided value.

       --task-definition (string)
          The task definition for the tasks in the task set to use.

       --network-configuration (structure)
          An object representing the network configuration for a task set.

          awsvpcConfiguration -> (structure)
              The  VPC  subnets and security groups that are associated with a
              task.

              NOTE:
                 All specified subnets and security groups must  be  from  the
                 same VPC.

              subnets -> (list)
                 The  IDs  of the subnets associated with the task or service.
                 There's a limit of 16  subnets  that  can  be  specified  per
                 AwsVpcConfiguration .

                 NOTE:
                     All specified subnets must be from the same VPC.

                 (string)

              securityGroups -> (list)
                 The  IDs  of  the security groups associated with the task or
                 service. If you don't specify a security group,  the  default
                 security  group  for  the  VPC  is used. There's a limit of 5
                 security groups that can be specified per AwsVpcConfiguration
                 .

                 NOTE:
                     All  specified security groups must be from the same VPC.

                 (string)

              assignPublicIp -> (string)
                 Whether the task's elastic network interface receives a  pub-
                 lic IP address. The default value is DISABLED .

       Shorthand Syntax:

          awsvpcConfiguration={subnets=[string,string],securityGroups=[string,string],assignPublicIp=string}

       JSON Syntax:

          {
            "awsvpcConfiguration": {
              "subnets": ["string", ...],
              "securityGroups": ["string", ...],
              "assignPublicIp": "ENABLED"|"DISABLED"
            }
          }

       --load-balancers (list)
          A  load  balancer  object representing the load balancer to use with
          the task set. The supported load balancer types are either an Appli-
          cation Load Balancer or a Network Load Balancer.

          (structure)
              The  load  balancer  configuration to use with a service or task
              set.

              For specific notes and restrictions regarding the  use  of  load
              balancers with services and task sets, see the CreateService and
              CreateTaskSet actions.

              targetGroupArn -> (string)
                 The full Amazon Resource Name (ARN) of the Elastic Load  Bal-
                 ancing  target  group  or groups associated with a service or
                 task set.

                 A target group ARN is only specified when using  an  Applica-
                 tion  Load Balancer or Network Load Balancer. If you're using
                 a Classic Load Balancer, omit the target group ARN.

                 For services using the ECS  deployment  controller,  you  can
                 specify  one or multiple target groups. For more information,
                 see Registering Multiple Target Groups with a Service in  the
                 Amazon Elastic Container Service Developer Guide .

                 For  services  using  the  CODE_DEPLOY deployment controller,
                 you're required to define two target groups for the load bal-
                 ancer.  For  more information, see Blue/Green Deployment with
                 CodeDeploy in the Amazon Elastic Container Service  Developer
                 Guide .

                 WARNING:
                     If your service's task definition uses the awsvpc network
                     mode, you must choose ip as the target type, not instance
                     .  Do this when creating your target groups because tasks
                     that use the awsvpc network mode are associated  with  an
                     elastic  network  interface,  not an Amazon EC2 instance.
                     This network mode is  required  for  the  Fargate  launch
                     type.

              loadBalancerName -> (string)
                 The  name  of  the load balancer to associate with the Amazon
                 ECS service or task set.

                 A load balancer name is only specified when using  a  Classic
                 Load  Balancer. If you are using an Application Load Balancer
                 or a Network Load Balancer the load balancer  name  parameter
                 should be omitted.

              containerName -> (string)
                 The name of the container (as it appears in a container defi-
                 nition) to associate with the load balancer.

              containerPort -> (integer)
                 The port on the container to associate  with  the  load  bal-
                 ancer.  This  port  must correspond to a containerPort in the
                 task definition the tasks in the service are using. For tasks
                 that  use the EC2 launch type, the container instance they're
                 launched on must allow ingress traffic on the hostPort of the
                 port mapping.

       Shorthand Syntax:

          targetGroupArn=string,loadBalancerName=string,containerName=string,containerPort=integer ...

       JSON Syntax:

          [
            {
              "targetGroupArn": "string",
              "loadBalancerName": "string",
              "containerName": "string",
              "containerPort": integer
            }
            ...
          ]

       --service-registries (list)
          The  details  of  the service discovery registries to assign to this
          task set. For more information, see Service Discovery .

          (structure)
              The details for the service registry.

              registryArn -> (string)
                 The Amazon Resource Name (ARN) of the service  registry.  The
                 currently  supported  service registry is Cloud Map. For more
                 information, see CreateService .

              port -> (integer)
                 The port value used if your service discovery service  speci-
                 fied  an  SRV  record.  This  field might be used if both the
                 awsvpc network mode and SRV records are used.

              containerName -> (string)
                 The container name value to be used for your service  discov-
                 ery  service.  It's already specified in the task definition.
                 If the task definition that your service task specifies  uses
                 the  bridge or host network mode, you must specify a contain-
                 erName and containerPort combination from  the  task  defini-
                 tion. If the task definition that your service task specifies
                 uses the awsvpc network mode and a type  SRV  DNS  record  is
                 used,  you must specify either a containerName and container-
                 Port combination or a port value. However, you can't  specify
                 both.

              containerPort -> (integer)
                 The port value to be used for your service discovery service.
                 It's already specified in the task definition.  If  the  task
                 definition  your  service  task  specifies uses the bridge or
                 host network mode, you must specify a containerName and  con-
                 tainerPort  combination from the task definition. If the task
                 definition your service task specifies uses the  awsvpc  net-
                 work mode and a type SRV DNS record is used, you must specify
                 either a containerName and  containerPort  combination  or  a
                 port value. However, you can't specify both.

       Shorthand Syntax:

          registryArn=string,port=integer,containerName=string,containerPort=integer ...

       JSON Syntax:

          [
            {
              "registryArn": "string",
              "port": integer,
              "containerName": "string",
              "containerPort": integer
            }
            ...
          ]

       --launch-type (string)
          The launch type that new tasks in the task set uses. For more infor-
          mation, see Amazon ECS Launch Types in the Amazon Elastic  Container
          Service Developer Guide .

          If a launchType is specified, the capacityProviderStrategy parameter
          must be omitted.

          Possible values:

          o EC2

          o FARGATE

          o EXTERNAL

       --capacity-provider-strategy (list)
          The capacity provider strategy to use for the task set.

          A capacity provider  strategy  consists  of  one  or  more  capacity
          providers along with the base and weight to assign to them. A capac-
          ity provider must be associated with the cluster to  be  used  in  a
          capacity  provider strategy. The  PutClusterCapacityProviders API is
          used to associate a capacity provider with a cluster. Only  capacity
          providers with an ACTIVE or UPDATING status can be used.

          If a capacityProviderStrategy is specified, the launchType parameter
          must be omitted. If no  capacityProviderStrategy  or  launchType  is
          specified,  the  defaultCapacityProviderStrategy  for the cluster is
          used.

          If specifying a capacity provider that uses an Auto  Scaling  group,
          the   capacity  provider  must  already  be  created.  New  capacity
          providers can be created with the  CreateCapacityProvider API opera-
          tion.

          To  use  a  Fargate capacity provider, specify either the FARGATE or
          FARGATE_SPOT capacity providers. The Fargate capacity providers  are
          available  to  all  accounts  and  only need to be associated with a
          cluster to be used.

          The  PutClusterCapacityProviders API operation is used to update the
          list of available capacity providers for a cluster after the cluster
          is created.

          (structure)
              The details of a capacity provider strategy. A capacity provider
              strategy  can  be  set when using the  RunTask or  CreateCluster
              APIs or as the default capacity provider strategy for a  cluster
              with the  CreateCluster API.

              Only capacity providers that are already associated with a clus-
              ter and have an ACTIVE or UPDATING  status  can  be  used  in  a
              capacity provider strategy. The  PutClusterCapacityProviders API
              is used to associate a capacity provider with a cluster.

              If specifying a capacity provider  that  uses  an  Auto  Scaling
              group,  the  capacity provider must already be created. New Auto
              Scaling group capacity providers can be created with  the   Cre-
              ateCapacityProvider API operation.

              To  use  a Fargate capacity provider, specify either the FARGATE
              or  FARGATE_SPOT  capacity  providers.  The   Fargate   capacity
              providers  are  available  to  all  accounts and only need to be
              associated with a cluster to be  used  in  a  capacity  provider
              strategy.

              A capacity provider strategy may contain a maximum of 6 capacity
              providers.

              capacityProvider -> (string)
                 The short name of the capacity provider.

              weight -> (integer)
                 The weight value designates the relative  percentage  of  the
                 total  number of tasks launched that should use the specified
                 capacity provider. The weight value is taken into  considera-
                 tion after the base value, if defined, is satisfied.

                 If  no  weight  value is specified, the default value of 0 is
                 used. When multiple capacity providers are specified within a
                 capacity  provider  strategy,  at  least  one of the capacity
                 providers must have a weight value greater than zero and  any
                 capacity  providers with a weight of 0 can't be used to place
                 tasks. If you specify multiple capacity providers in a strat-
                 egy  that  all have a weight of 0 , any RunTask or CreateSer-
                 vice actions using the capacity provider strategy will  fail.

                 An  example scenario for using weights is defining a strategy
                 that contains two capacity providers and both have  a  weight
                 of  1  ,  then  when the base is satisfied, the tasks will be
                 split evenly across the two capacity  providers.  Using  that
                 same  logic,  if  you  specify  a  weight  of  1  for capaci-
                 tyProviderA and a weight of 4 for  capacityProviderB  ,  then
                 for  every one task that's run using capacityProviderA , four
                 tasks would use capacityProviderB .

              base -> (integer)
                 The base value designates how many tasks, at  a  minimum,  to
                 run  on  the  specified  capacity provider. Only one capacity
                 provider in a capacity provider  strategy  can  have  a  base
                 defined.  If no value is specified, the default value of 0 is
                 used.

       Shorthand Syntax:

          capacityProvider=string,weight=integer,base=integer ...

       JSON Syntax:

          [
            {
              "capacityProvider": "string",
              "weight": integer,
              "base": integer
            }
            ...
          ]

       --platform-version (string)
          The platform version that the tasks in the task set uses. A platform
          version  is  specified only for tasks using the Fargate launch type.
          If one isn't specified, the LATEST platform version is used.

       --scale (structure)
          A floating-point percentage of the desired number of tasks to  place
          and keep running in the task set.

          value -> (double)
              The  value, specified as a percent total of a service's desired-
              Count , to scale the  task  set.  Accepted  values  are  numbers
              between 0 and 100.

          unit -> (string)
              The unit of measure for the scale value.

       Shorthand Syntax:

          value=double,unit=string

       JSON Syntax:

          {
            "value": double,
            "unit": "PERCENT"
          }

       --client-token (string)
          The  identifier  that  you  provide to ensure the idempotency of the
          request. It's case sensitive and must be unique. It can be up to  32
          ASCII characters are allowed.

       --tags (list)
          The  metadata  that you apply to the task set to help you categorize
          and organize them. Each tag consists of a key and an optional value.
          You define both. When a service is deleted, the tags are deleted.

          The following basic restrictions apply to tags:

          o Maximum number of tags per resource - 50

          o For  each  resource, each tag key must be unique, and each tag key
            can have only one value.

          o Maximum key length - 128 Unicode characters in UTF-8

          o Maximum value length - 256 Unicode characters in UTF-8

          o If your tagging  schema  is  used  across  multiple  services  and
            resources,  remember  that other services may have restrictions on
            allowed characters. Generally  allowed  characters  are:  letters,
            numbers,  and  spaces  representable  in  UTF-8, and the following
            characters: + - = . _ : / @.

          o Tag keys and values are case-sensitive.

          o Do not use aws: , AWS: , or any upper or lowercase combination  of
            such  as  a prefix for either keys or values as it is reserved for
            Amazon Web Services use. You cannot edit or  delete  tag  keys  or
            values  with  this  prefix.  Tags  with  this  prefix do not count
            against your tags per resource limit.

          (structure)
              The metadata that you apply to a resource to help you categorize
              and  organize  them.  Each tag consists of a key and an optional
              value. You define them.

              The following basic restrictions apply to tags:

              o Maximum number of tags per resource - 50

              o For each resource, each tag key must be unique, and  each  tag
                key can have only one value.

              o Maximum key length - 128 Unicode characters in UTF-8

              o Maximum value length - 256 Unicode characters in UTF-8

              o If  your  tagging  schema is used across multiple services and
                resources, remember that other services may have  restrictions
                on  allowed characters. Generally allowed characters are: let-
                ters, numbers, and spaces representable in UTF-8, and the fol-
                lowing characters: + - = . _ : / @.

              o Tag keys and values are case-sensitive.

              o Do not use aws: , AWS: , or any upper or lowercase combination
                of such as a prefix  for  either  keys  or  values  as  it  is
                reserved  for  Amazon  Web  Services  use.  You cannot edit or
                delete tag keys or values with this  prefix.  Tags  with  this
                prefix do not count against your tags per resource limit.

              key -> (string)
                 One  part  of a key-value pair that make up a tag. A key is a
                 general label that acts like a category for more specific tag
                 values.

              value -> (string)
                 The  optional  part of a key-value pair that make up a tag. A
                 value acts as a descriptor within a tag category (key).

       Shorthand Syntax:

          key=string,value=string ...

       JSON Syntax:

          [
            {
              "key": "string",
              "value": "string"
            }
            ...
          ]

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To create a task set

       The following create-task-set example creates a task set in  a  service
       that uses an external deployment controller.

          aws ecs create-task-set \
              --cluster MyCluster \
              --service MyService \
              --task-definition MyTaskDefinition:2 \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-12344321],securityGroups=[sg-12344321]}"

       Output:

          {
              "taskSet": {
                  "id": "ecs-svc/1234567890123456789",
                  "taskSetArn": "arn:aws:ecs:us-west-2:123456789012:task-set/MyCluster/MyService/ecs-svc/1234567890123456789",
                  "status": "ACTIVE",
                  "taskDefinition": "arn:aws:ecs:us-west-2:123456789012:task-definition/MyTaskDefinition:2",
                  "computedDesiredCount": 0,
                  "pendingCount": 0,
                  "runningCount": 0,
                  "createdAt": 1557128360.711,
                  "updatedAt": 1557128360.711,
                  "launchType": "EC2",
                  "networkConfiguration": {
                      "awsvpcConfiguration": {
                          "subnets": [
                              "subnet-12344321"
                          ],
                          "securityGroups": [
                              "sg-12344321"
                          ],
                          "assignPublicIp": "DISABLED"
                      }
                  },
                  "loadBalancers": [],
                  "serviceRegistries": [],
                  "scale": {
                      "value": 0.0,
                      "unit": "PERCENT"
                  },
                  "stabilityStatus": "STABILIZING",
                  "stabilityStatusAt": 1557128360.711
              }
          }

OUTPUT
       taskSet -> (structure)
          Information  about a set of Amazon ECS tasks in either an CodeDeploy
          or an EXTERNAL deployment. A task set includes details such  as  the
          desired number of tasks, how many tasks are running, and whether the
          task set serves production traffic.

          id -> (string)
              The ID of the task set.

          taskSetArn -> (string)
              The Amazon Resource Name (ARN) of the task set.

          serviceArn -> (string)
              The Amazon Resource Name (ARN)  of  the  service  the  task  set
              exists in.

          clusterArn -> (string)
              The  Amazon  Resource Name (ARN) of the cluster that the service
              that hosts the task set exists in.

          startedBy -> (string)
              The tag specified when a task set is started. If  an  CodeDeploy
              deployment  created  the  task  set,  the startedBy parameter is
              CODE_DEPLOY . If an external deployment created  the  task  set,
              the startedBy field isn't used.

          externalId -> (string)
              The external ID associated with the task set.

              If  an  CodeDeploy deployment created a task set, the externalId
              parameter contains the CodeDeploy deployment ID.

              If a task set is created for an external deployment and is asso-
              ciated with a service discovery registry, the externalId parame-
              ter contains the ECS_TASK_SET_EXTERNAL_ID Cloud Map attribute.

          status -> (string)
              The status of the task set. The following describes each  state.
                 PRIMARY

              The task set is serving production traffic.
                 ACTIVE

              The task set isn't serving production traffic.
                 DRAINING

              The  tasks  in  the task set are being stopped, and their corre-
              sponding targets are being deregistered from their target group.

          taskDefinition -> (string)
              The task definition that the task set is using.

          computedDesiredCount -> (integer)
              The  computed desired count for the task set. This is calculated
              by multiplying the service's  desiredCount  by  the  task  set's
              scale  percentage. The result is always rounded up. For example,
              if the computed desired count is 1.2, it rounds up to 2 tasks.

          pendingCount -> (integer)
              The number of tasks in the task set that are in the PENDING sta-
              tus  during a deployment. A task in the PENDING state is prepar-
              ing to enter the RUNNING state. A task set  enters  the  PENDING
              status  when  it  launches  for  the  first  time  or  when it's
              restarted after being in the STOPPED state.

          runningCount -> (integer)
              The number of tasks in the task set that are in the RUNNING sta-
              tus  during a deployment. A task in the RUNNING state is running
              and ready for use.

          createdAt -> (timestamp)
              The Unix timestamp for the time when the task set was created.

          updatedAt -> (timestamp)
              The Unix timestamp for the time  when  the  task  set  was  last
              updated.

          launchType -> (string)
              The  launch  type  the tasks in the task set are using. For more
              information, see Amazon ECS launch types in the  Amazon  Elastic
              Container Service Developer Guide .

          capacityProviderStrategy -> (list)
              The capacity provider strategy that are associated with the task
              set.

              (structure)
                 The details of  a  capacity  provider  strategy.  A  capacity
                 provider strategy can be set when using the  RunTask or  Cre-
                 ateCluster APIs or as the default capacity provider  strategy
                 for a cluster with the  CreateCluster API.

                 Only  capacity  providers  that are already associated with a
                 cluster and have an ACTIVE or UPDATING status can be used  in
                 a   capacity   provider   strategy.   The   PutClusterCapaci-
                 tyProviders API is used to associate a capacity provider with
                 a cluster.

                 If  specifying  a capacity provider that uses an Auto Scaling
                 group, the capacity provider must  already  be  created.  New
                 Auto Scaling group capacity providers can be created with the
                 CreateCapacityProvider API operation.

                 To use a Fargate capacity provider, specify either  the  FAR-
                 GATE or FARGATE_SPOT capacity providers. The Fargate capacity
                 providers are available to all accounts and only need  to  be
                 associated  with  a cluster to be used in a capacity provider
                 strategy.

                 A capacity provider strategy  may  contain  a  maximum  of  6
                 capacity providers.

                 capacityProvider -> (string)
                     The short name of the capacity provider.

                 weight -> (integer)
                     The  weight  value  designates the relative percentage of
                     the total number of tasks launched that  should  use  the
                     specified  capacity  provider.  The weight value is taken
                     into consideration after the base value, if  defined,  is
                     satisfied.

                     If  no  weight value is specified, the default value of 0
                     is used. When multiple capacity providers  are  specified
                     within  a capacity provider strategy, at least one of the
                     capacity providers must have a weight value greater  than
                     zero  and any capacity providers with a weight of 0 can't
                     be used to place tasks. If you specify multiple  capacity
                     providers in a strategy that all have a weight of 0 , any
                     RunTask  or  CreateService  actions  using  the  capacity
                     provider strategy will fail.

                     An  example  scenario  for  using  weights  is defining a
                     strategy that contains two capacity  providers  and  both
                     have a weight of 1 , then when the base is satisfied, the
                     tasks will  be  split  evenly  across  the  two  capacity
                     providers. Using that same logic, if you specify a weight
                     of 1 for capacityProviderA and a weight of 4 for  capaci-
                     tyProviderB  ,  then  for every one task that's run using
                     capacityProviderA  ,  four  tasks   would   use   capaci-
                     tyProviderB .

                 base -> (integer)
                     The  base  value designates how many tasks, at a minimum,
                     to run on  the  specified  capacity  provider.  Only  one
                     capacity  provider  in  a  capacity provider strategy can
                     have a base  defined.  If  no  value  is  specified,  the
                     default value of 0 is used.

          platformVersion -> (string)
              The Fargate platform version where the tasks in the task set are
              running. A platform version is only specified for tasks  run  on
              Fargate.  For more information, see Fargate platform versions in
              the Amazon Elastic Container Service Developer Guide .

          platformFamily -> (string)
              The operating system that your tasks in the set are running  on.
              A  platform family is specified only for tasks that use the Far-
              gate launch type.

              All tasks in the set must have the same value.

          networkConfiguration -> (structure)
              The network configuration for the task set.

              awsvpcConfiguration -> (structure)
                 The VPC subnets and security groups that are associated  with
                 a task.

                 NOTE:
                     All  specified  subnets  and security groups must be from
                     the same VPC.

                 subnets -> (list)
                     The IDs of the subnets associated with the task  or  ser-
                     vice. There's a limit of 16 subnets that can be specified
                     per AwsVpcConfiguration .

                     NOTE:
                        All specified subnets must be from the same VPC.

                     (string)

                 securityGroups -> (list)
                     The IDs of the security groups associated with  the  task
                     or  service.  If  you don't specify a security group, the
                     default security group for the VPC  is  used.  There's  a
                     limit  of  5  security  groups  that can be specified per
                     AwsVpcConfiguration .

                     NOTE:
                        All specified security groups must be  from  the  same
                        VPC.

                     (string)

                 assignPublicIp -> (string)
                     Whether  the  task's elastic network interface receives a
                     public IP address. The default value is DISABLED .

          loadBalancers -> (list)
              Details on a load balancer that are used with a task set.

              (structure)
                 The load balancer configuration to use with a service or task
                 set.

                 For specific notes and restrictions regarding the use of load
                 balancers with services and task sets, see the  CreateService
                 and CreateTaskSet actions.

                 targetGroupArn -> (string)
                     The  full  Amazon Resource Name (ARN) of the Elastic Load
                     Balancing target group or groups associated with  a  ser-
                     vice or task set.

                     A target group ARN is only specified when using an Appli-
                     cation Load Balancer or Network Load Balancer. If  you're
                     using a Classic Load Balancer, omit the target group ARN.

                     For services using the ECS deployment controller, you can
                     specify  one or multiple target groups. For more informa-
                     tion, see Registering Multiple Target Groups with a  Ser-
                     vice  in  the  Amazon Elastic Container Service Developer
                     Guide .

                     For services using the CODE_DEPLOY deployment controller,
                     you're  required to define two target groups for the load
                     balancer. For more information, see Blue/Green Deployment
                     with  CodeDeploy  in the Amazon Elastic Container Service
                     Developer Guide .

                     WARNING:
                        If your service's task definition uses the awsvpc net-
                        work  mode, you must choose ip as the target type, not
                        instance . Do this when creating  your  target  groups
                        because  tasks  that  use  the awsvpc network mode are
                        associated with an elastic network interface,  not  an
                        Amazon EC2 instance. This network mode is required for
                        the Fargate launch type.

                 loadBalancerName -> (string)
                     The name of the load balancer to associate with the  Ama-
                     zon ECS service or task set.

                     A load balancer name is only specified when using a Clas-
                     sic Load Balancer. If you are using an  Application  Load
                     Balancer  or  a  Network  Load Balancer the load balancer
                     name parameter should be omitted.

                 containerName -> (string)
                     The name of the container (as it appears in  a  container
                     definition) to associate with the load balancer.

                 containerPort -> (integer)
                     The port on the container to associate with the load bal-
                     ancer. This port must correspond to  a  containerPort  in
                     the  task  definition the tasks in the service are using.
                     For tasks that use the EC2  launch  type,  the  container
                     instance  they're  launched on must allow ingress traffic
                     on the hostPort of the port mapping.

          serviceRegistries -> (list)
              The details for the service discovery registries  to  assign  to
              this task set. For more information, see Service discovery .

              (structure)
                 The details for the service registry.

                 registryArn -> (string)
                     The  Amazon  Resource Name (ARN) of the service registry.
                     The currently supported service registry  is  Cloud  Map.
                     For more information, see CreateService .

                 port -> (integer)
                     The  port  value  used  if your service discovery service
                     specified an SRV record. This field might be used if both
                     the awsvpc network mode and SRV records are used.

                 containerName -> (string)
                     The container name value to be used for your service dis-
                     covery service. It's already specified in the task  defi-
                     nition.  If  the  task  definition that your service task
                     specifies uses the bridge or host network mode, you  must
                     specify  a  containerName  and  containerPort combination
                     from the task definition. If  the  task  definition  that
                     your  service task specifies uses the awsvpc network mode
                     and a type SRV DNS  record  is  used,  you  must  specify
                     either a containerName and containerPort combination or a
                     port value. However, you can't specify both.

                 containerPort -> (integer)
                     The port value to be used for your service discovery ser-
                     vice.  It's  already specified in the task definition. If
                     the task definition your service task specifies uses  the
                     bridge  or host network mode, you must specify a contain-
                     erName and containerPort combination from the task  defi-
                     nition.  If  the task definition your service task speci-
                     fies uses the awsvpc network mode  and  a  type  SRV  DNS
                     record  is  used, you must specify either a containerName
                     and containerPort combination or a port  value.  However,
                     you can't specify both.

          scale -> (structure)
              A  floating-point  percentage of your desired number of tasks to
              place and keep running in the task set.

              value -> (double)
                 The value, specified  as  a  percent  total  of  a  service's
                 desiredCount  ,  to  scale  the task set. Accepted values are
                 numbers between 0 and 100.

              unit -> (string)
                 The unit of measure for the scale value.

          stabilityStatus -> (string)
              The stability status. This indicates whether the  task  set  has
              reached a steady state. If the following conditions are met, the
              task set sre in STEADY_STATE :

              o The task runningCount is equal to the computedDesiredCount .

              o The pendingCount is 0 .

              o There are no tasks that are running on container instances  in
                the DRAINING status.

              o All  tasks  are  reporting a healthy status from the load bal-
                ancers, service discovery, and container health checks.

              If any of those conditions  aren't  met,  the  stability  status
              returns STABILIZING .

          stabilityStatusAt -> (timestamp)
              The Unix timestamp for the time when the task set stability sta-
              tus was retrieved.

          tags -> (list)
              The metadata that you apply to the task set to help you  catego-
              rize  and  organize  them.  Each  tag  consists  of a key and an
              optional value. You define both.

              The following basic restrictions apply to tags:

              o Maximum number of tags per resource - 50

              o For each resource, each tag key must be unique, and  each  tag
                key can have only one value.

              o Maximum key length - 128 Unicode characters in UTF-8

              o Maximum value length - 256 Unicode characters in UTF-8

              o If  your  tagging  schema is used across multiple services and
                resources, remember that other services may have  restrictions
                on  allowed characters. Generally allowed characters are: let-
                ters, numbers, and spaces representable in UTF-8, and the fol-
                lowing characters: + - = . _ : / @.

              o Tag keys and values are case-sensitive.

              o Do not use aws: , AWS: , or any upper or lowercase combination
                of such as a prefix  for  either  keys  or  values  as  it  is
                reserved  for  Amazon  Web  Services  use.  You cannot edit or
                delete tag keys or values with this  prefix.  Tags  with  this
                prefix do not count against your tags per resource limit.

              (structure)
                 The metadata that you apply to a resource to help you catego-
                 rize and organize them. Each tag consists of  a  key  and  an
                 optional value. You define them.

                 The following basic restrictions apply to tags:

                 o Maximum number of tags per resource - 50

                 o For  each  resource,  each tag key must be unique, and each
                   tag key can have only one value.

                 o Maximum key length - 128 Unicode characters in UTF-8

                 o Maximum value length - 256 Unicode characters in UTF-8

                 o If your tagging schema is used across multiple services and
                   resources,  remember  that other services may have restric-
                   tions on allowed characters. Generally  allowed  characters
                   are:  letters,  numbers, and spaces representable in UTF-8,
                   and the following characters: + - = . _ : / @.

                 o Tag keys and values are case-sensitive.

                 o Do not use aws: , AWS: , or any upper or lowercase combina-
                   tion of such as a prefix for either keys or values as it is
                   reserved for Amazon Web Services use. You  cannot  edit  or
                   delete  tag keys or values with this prefix. Tags with this
                   prefix do not count against your tags per resource limit.

                 key -> (string)
                     One part of a key-value pair that make up a tag. A key is
                     a  general  label that acts like a category for more spe-
                     cific tag values.

                 value -> (string)
                     The optional part of a key-value pair that make up a tag.
                     A value acts as a descriptor within a tag category (key).



                                                             CREATE-TASK-SET()
