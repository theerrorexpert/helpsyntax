BATCH-UPDATE-TABLE-ROWS()                            BATCH-UPDATE-TABLE-ROWS()



NAME
       batch-update-table-rows -

DESCRIPTION
       The BatchUpdateTableRows API allows you to update one or more rows in a
       table in a workbook.

       You can specify the values to set in some or all of the columns in  the
       table  for  the specified rows. If a column is not explicitly specified
       in a particular row, then that column will not be updated for that row.
       To  clear out the data in a specific cell, you need to set the value as
       an empty string ("").

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            batch-update-table-rows
          --workbook-id <value>
          --table-id <value>
          --rows-to-update <value>
          [--client-request-token <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --workbook-id (string)
          The ID of the workbook where the rows are being updated.

          If a workbook with the specified id could not  be  found,  this  API
          throws ResourceNotFoundException.

       --table-id (string)
          The ID of the table where the rows are being updated.

          If a table with the specified id could not be found, this API throws
          ResourceNotFoundException.

       --rows-to-update (list)
          The list of rows to update in the table.  Each  item  in  this  list
          needs  to  contain the row id to update along with the map of column
          id to cell values for each column in  that  row  that  needs  to  be
          updated.  You need to specify at least one row in this list, and for
          each row, you need to specify at least one column to update.

          Note that if one of the row or column ids in the  request  does  not
          exist  in  the table, then the request fails and no updates are made
          to the table.

          (structure)
              Data needed to create a single row in a table  as  part  of  the
              BatchCreateTableRows request.

              rowId -> (string)
                 The id of the row that needs to be updated.

              cellsToUpdate -> (map)
                 A  map representing the cells to update in the given row. The
                 key is the column id  of  the  cell  and  the  value  is  the
                 CellInput  object  that  represents  the  data to set in that
                 cell.

                 key -> (string)

                 value -> (structure)
                     CellInput object contains the data needed  to  create  or
                     update cells in a table.

                     NOTE:
                        CellInput  object  has  only  a  facts field or a fact
                        field, but not both. A 400 bad request will be  thrown
                        if both fact and facts field are present.

                     fact -> (string)
                        Fact  represents the data that is entered into a cell.
                        This data can be free text or a formula. Formulas need
                        to start with the equals (=) sign.

                     facts -> (list)
                        A list representing the values that are entered into a
                        ROWSET cell. Facts list can have either only values or
                        rowIDs, and rowIDs should from the same table.

                        (string)

       Shorthand Syntax:

          rowId=string,cellsToUpdate={KeyName1={fact=string,facts=[string,string]},KeyName2={fact=string,facts=[string,string]}} ...

       JSON Syntax:

          [
            {
              "rowId": "string",
              "cellsToUpdate": {"string": {
                    "fact": "string",
                    "facts": ["string", ...]
                  }
                ...}
            }
            ...
          ]

       --client-request-token (string)
          The  request  token for performing the update action. Request tokens
          help to identify duplicate requests. If a call times  out  or  fails
          due  to  a transient error like a failed network connection, you can
          retry the call with the same request token. The service ensures that
          if  the  first  call  using  that request token is successfully per-
          formed, the second call will not perform the action again.

          Note that request tokens are valid only for a few minutes. You  can-
          not use request tokens to dedupe requests spanning hours or days.

       --cli-input-json  |  --cli-input-yaml (string) Reads arguments from the
       JSON string provided. The JSON string follows the  format  provided  by
       --generate-cli-skeleton. If other arguments are provided on the command
       line, those values will override the JSON-provided values.  It  is  not
       possible to pass arbitrary binary values using a JSON-provided value as
       the string will be taken literally. This may  not  be  specified  along
       with --cli-input-yaml.

       --generate-cli-skeleton  (string)  Prints  a  JSON skeleton to standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample  input  YAML that can be used with --cli-input-yaml. If provided
       with the value output, it validates the command inputs  and  returns  a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

OUTPUT
       workbookCursor -> (long)
          The  updated workbook cursor after adding the new rows at the end of
          the table.

       failedBatchItems -> (list)
          The list of batch items in the request that could not be updated  in
          the  table.  Each  element  in  this list contains one item from the
          request that could not be updated in the table along with the reason
          why that item could not be updated.

          (structure)
              A  single  item  in  a batch that failed to perform the intended
              action because of an error preventing it from succeeding.

              id -> (string)
                 The id of the batch item that failed. This is the batch  item
                 id  for  the  BatchCreateTableRows  and  BatchUpsertTableRows
                 operations and the row id for  the  BatchUpdateTableRows  and
                 BatchDeleteTableRows operations.

              errorMessage -> (string)
                 The error message that indicates why the batch item failed.



                                                     BATCH-UPDATE-TABLE-ROWS()
