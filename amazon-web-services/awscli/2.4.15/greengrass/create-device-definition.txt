CREATE-DEVICE-DEFINITION()                          CREATE-DEVICE-DEFINITION()



NAME
       create-device-definition -

DESCRIPTION
       Creates a device definition. You may provide the initial version of the
       device definition now or  use  ''CreateDeviceDefinitionVersion''  at  a
       later time.

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            create-device-definition
          [--amzn-client-token <value>]
          [--initial-version <value>]
          [--name <value>]
          [--tags <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --amzn-client-token  (string) A client token used to correlate requests
       and responses.

       --initial-version (structure) Information about the initial version  of
       the device definition.Devices -> (list)
          A list of devices in the definition version.

          (structure)
              Information about a device.

              CertificateArn -> (string)
                 The ARN of the certificate associated with the device.

              Id -> (string)
                 A descriptive or arbitrary ID for the device. This value must
                 be unique within the device definition version. Max length is
                 128 characters with pattern ''[a-zA-Z0-9:_-]+''.

              SyncShadow -> (boolean)
                 If  true,  the  device's  local  shadow will be automatically
                 synced with the cloud.

              ThingArn -> (string)
                 The thing ARN of the device.

       Shorthand Syntax:

          Devices=[{CertificateArn=string,Id=string,SyncShadow=boolean,ThingArn=string},{CertificateArn=string,Id=string,SyncShadow=boolean,ThingArn=string}]

       JSON Syntax:

          {
            "Devices": [
              {
                "CertificateArn": "string",
                "Id": "string",
                "SyncShadow": true|false,
                "ThingArn": "string"
              }
              ...
            ]
          }

       --name (string) The name of the device definition.

       --tags (map) Tag(s) to add to the new resource.key -> (string)
          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To create a device definition

       The following create-device-definition example creates a device defini-
       tion  that  contains  an initial device definition version. The initial
       version defines two  devices.   Before  you  can  create  a  Greengrass
       device,  you  must first create and provision the corresponding AWS IoT
       thing. This process includes the following iot commands that  you  must
       run to get the required information for the Greengrass command:

       o Create the AWS IoT thing that corresponds to the device:

            aws iot create-thing \
                --thing-name "InteriorTherm"

       Output:

          {
              "thingArn": "arn:aws:iot:us-west-2:123456789012:thing/InteriorTherm",
              "thingName": "InteriorTherm",
              "thingId": "01d4763c-78a6-46c6-92be-7add080394bf"
          }

       o Create  public  and  private  keys and the device certificate for the
         thing. This example uses the create-keys-and-certificate command  and
         requires  write  permissions to the current directory. Alternatively,
         you can use the create-certificate-from-csr command:

            aws iot create-keys-and-certificate \
                --set-as-active \
                --certificate-pem-outfile "myDevice.cert.pem" \
                --public-key-outfile "myDevice.public.key" \
                --private-key-outfile "myDevice.private.key"

       Output:

          {
              "certificateArn": "arn:aws:iot:us-west-2:123456789012:cert/66a415ec415668c2349a76170b64ac0878231c1e21ec83c10e92a18bd568eb92",
              "certificatePem": "-----BEGIN CERTIFICATE-----\nMIIDWTCAkGgAwIBATgIUCgq6EGqou6zFqWgIZRndgQEFW+gwDQYJKoZIhvc...KdGewQS\n-----END CERTIFICATE-----\n",
              "keyPair": {
                  "PublicKey": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBzrqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqKpRgnn6yq26U3y...wIDAQAB\n-----END PUBLIC KEY-----\n",
                  "PrivateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIABAKCAQEAqKpRgnn6yq26U3yt5YFZquyukfRjbMXDcNOK4rMCxDR...fvY4+te\n-----END RSA PRIVATE KEY-----\n"
              },
              "certificateId": "66a415ec415668c2349a76170b64ac0878231c1e21ec83c10e92a18bd568eb92"
          }

       o Create an AWS IoT policy that allows iot and greengrass actions.  For
         simplicity, the following policy allows actions on all resources, but
         your policy can be more restrictive:

            aws iot create-policy \
                --policy-name "GG_Devices" \
                --policy-document "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"iot:Publish\",\"iot:Subscribe\",\"iot:Connect\",\"iot:Receive\"],\"Resource\":[\"*\"]},{\"Effect\":\"Allow\",\"Action\":[\"iot:GetThingShadow\",\"iot:UpdateThingShadow\",\"iot:DeleteThingShadow\"],\"Resource\":[\"*\"]},{\"Effect\":\"Allow\",\"Action\":[\"greengrass:*\"],\"Resource\":[\"*\"]}]}"

       Output:

          {
              "policyName": "GG_Devices",
              "policyArn": "arn:aws:iot:us-west-2:123456789012:policy/GG_Devices",
              "policyDocument": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"iot:Publish\",\"iot:Subscribe\",\"iot:Connect\",\"iot:Receive\"],\"Resource\":[\"*\"]},{\"Effect\":\"Allow\",\"Action\":[\"iot:GetThingShadow\",\"iot:UpdateThingShadow\",\"iot:DeleteThingShadow\"],\"Resource\":[\"*\"]},{\"Effect\":\"Allow\",\"Action\":[\"greengrass:*\"],\"Resource\":[\"*\"]}]}",
              "policyVersionId": "1"
          }

       o Attach the policy to the certificate:

            aws iot attach-policy \
                --policy-name "GG_Devices" \
                --target "arn:aws:iot:us-west-2:123456789012:cert/66a415ec415668c2349a76170b64ac0878231c1e21ec83c10e92a18bd568eb92"

       o Attach the thing to the certificate

            aws iot attach-thing-principal \
                --thing-name "InteriorTherm" \
                --principal "arn:aws:iot:us-west-2:123456789012:cert/66a415ec415668c2349a76170b64ac0878231c1e21ec83c10e92a18bd568eb92"

       After you create and configure the IoT thing as shown  above,  use  the
       ThingArn  and CertificateArn from the first two commands in the follow-
       ing example.

          aws greengrass create-device-definition \
              --name "Sensors" \
              --initial-version "{\"Devices\":[{\"Id\":\"InteriorTherm\",\"ThingArn\":\"arn:aws:iot:us-west-2:123456789012:thing/InteriorTherm\",\"CertificateArn\":\"arn:aws:iot:us-west-2:123456789012:cert/66a415ec415668c2349a76170b64ac0878231c1e21ec83c10e92a18bd568eb92\",\"SyncShadow\":true},{\"Id\":\"ExteriorTherm\",\"ThingArn\":\"arn:aws:iot:us-west-2:123456789012:thing/ExteriorTherm\",\"CertificateArn\":\"arn:aws:iot:us-west-2:123456789012:cert/6c52ce1b47bde88a637e9ccdd45fe4e4c2c0a75a6866f8f63d980ee22fa51e02\",\"SyncShadow\":true}]}"

       Output:

          {
              "LatestVersionArn": "arn:aws:greengrass:us-west-2:123456789012:/greengrass/definition/devices/f9ba083d-5ad4-4534-9f86-026a45df1ccd/versions/3b5cc510-58c1-44b5-9d98-4ad858ffa795",
              "Name": "Sensors",
              "LastUpdatedTimestamp": "2019-09-11T00:11:06.197Z",
              "LatestVersion": "3b5cc510-58c1-44b5-9d98-4ad858ffa795",
              "CreationTimestamp": "2019-09-11T00:11:06.197Z",
              "Id": "f9ba083d-5ad4-4534-9f86-026a45df1ccd",
              "Arn": "arn:aws:greengrass:us-west-2:123456789012:/greengrass/definition/devices/f9ba083d-5ad4-4534-9f86-026a45df1ccd"
          }

OUTPUT
       Arn -> (string)
          The ARN of the definition.

       CreationTimestamp -> (string)
          The time, in milliseconds since the epoch, when the  definition  was
          created.

       Id -> (string)
          The ID of the definition.

       LastUpdatedTimestamp -> (string)
          The  time,  in milliseconds since the epoch, when the definition was
          last updated.

       LatestVersion -> (string)
          The ID of the latest version associated with the definition.

       LatestVersionArn -> (string)
          The ARN of the latest version associated with the definition.

       Name -> (string)
          The name of the definition.



                                                    CREATE-DEVICE-DEFINITION()
