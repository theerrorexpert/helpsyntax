CODEARTIFACT()                                                  CODEARTIFACT()



NAME
       codeartifact -

DESCRIPTION
       AWS CodeArtifact is a fully managed artifact repository compatible with
       language-native package managers and build tools such  as  npm,  Apache
       Maven,  and pip. You can use CodeArtifact to share packages with devel-
       opment teams and pull packages. Packages can be pulled from both public
       and  CodeArtifact  repositories.  You can also create an upstream rela-
       tionship between a  CodeArtifact  repository  and  another  repository,
       which  effectively  merges  their  contents from the point of view of a
       package manager client.
          AWS CodeArtifact Components

       Use the information in this guide to help you work with  the  following
       CodeArtifact components:

       o Repository : A CodeArtifact repository contains a set of package ver-
         sions , each of which maps to a set of assets, or files. Repositories
         are polyglot, so a single repository can contain packages of any sup-
         ported type. Each repository exposes endpoints for fetching and  pub-
         lishing  packages  using  tools like the ** npm ** CLI, the Maven CLI
         (** mvn ** ), and ** pip ** .

       o Domain : Repositories are aggregated into a higher-level entity known
         as  a  domain  .  All  package  assets and metadata are stored in the
         domain, but are consumed through repositories. A given package asset,
         such  as  a  Maven JAR file, is stored once per domain, no matter how
         many repositories it's present in. All of the assets and metadata  in
         a domain are encrypted with the same customer master key (CMK) stored
         in AWS Key Management Service (AWS KMS). Each repository is a  member
         of  a  single  domain  and  can't be moved to a different domain. The
         domain allows organizational policy to  be  applied  across  multiple
         repositories,  such  as which accounts can access repositories in the
         domain, and which public repositories can be used as sources of pack-
         ages.  Although  an organization can have multiple domains, we recom-
         mend a single production domain that contains all published artifacts
         so  that teams can find and share packages across their organization.

       o Package : A package is a bundle of software and the metadata required
         to  resolve  dependencies and install the software. CodeArtifact sup-
         ports npm , PyPI , and Maven  package  formats.  In  CodeArtifact,  a
         package consists of:

         o A name (for example, webpack is the name of a popular npm package)

         o An optional namespace (for example, @types in @types/node )

         o A set of versions (for example, 1.0.0 , 1.0.1 , 1.0.2 , etc.)

         o Package-level metadata (for example, npm tags)

       o Package  version : A version of a package, such as @types/node 12.6.9
         . The version number format and semantics vary for different  package
         formats.  For  example,  npm  package  versions  must  conform to the
         Semantic Versioning specification . In CodeArtifact, a  package  ver-
         sion consists of the version identifier, metadata at the package ver-
         sion level, and a set of assets.

       o Upstream repository : One repository is upstream of another when  the
         package  versions  in it can be accessed from the repository endpoint
         of the downstream repository, effectively merging the contents of the
         two  repositories  from  the  point of view of a client. CodeArtifact
         allows creating an upstream relationship between two repositories.

       o Asset : An individual file stored in CodeArtifact associated  with  a
         package version, such as an npm .tgz file or Maven POM and JAR files.

       CodeArtifact supports these operations:

       o AssociateExternalConnection : Adds an existing external connection to
         a repository.

       o CopyPackageVersions  : Copies package versions from one repository to
         another repository in the same domain.

       o CreateDomain : Creates a domain

       o CreateRepository : Creates a CodeArtifact repository in a domain.

       o DeleteDomain : Deletes a domain. You cannot delete a domain that con-
         tains repositories.

       o DeleteDomainPermissionsPolicy  :  Deletes the resource policy that is
         set on a domain.

       o DeletePackageVersions : Deletes versions of a package. After a  pack-
         age has been deleted, it can be republished, but its assets and meta-
         data cannot be restored because they have  been  permanently  removed
         from storage.

       o DeleteRepository : Deletes a repository.

       o DeleteRepositoryPermissionsPolicy  : Deletes the resource policy that
         is set on a repository.

       o DescribeDomain : Returns a  DomainDescription  object  that  contains
         information about the requested domain.

       o DescribePackageVersion  :  Returns a PackageVersionDescription object
         that contains details about a package version.

       o DescribeRepository : Returns a RepositoryDescription object that con-
         tains detailed information about the requested repository.

       o DisposePackageVersions  :  Disposes  versions of a package. A package
         version with the status Disposed cannot be restored because they have
         been permanently removed from storage.

       o DisassociateExternalConnection : Removes an existing external connec-
         tion from a repository.

       o GetAuthorizationToken : Generates a temporary authorization token for
         accessing  repositories  in  the domain. The token expires the autho-
         rization period has passed. The default authorization  period  is  12
         hours and can be customized to any length with a maximum of 12 hours.

       o GetDomainPermissionsPolicy : Returns the policy of a resource that is
         attached to the specified domain.

       o GetPackageVersionAsset  : Returns the contents of an asset that is in
         a package version.

       o GetPackageVersionReadme : Gets the readme file  or  descriptive  text
         for a package version.

       o GetRepositoryEndpoint  :  Returns  the endpoint of a repository for a
         specific package format. A repository has one endpoint for each pack-
         age format:

         o npm

         o pypi

         o maven

       o GetRepositoryPermissionsPolicy  : Returns the resource policy that is
         set on a repository.

       o ListDomains : Returns a list of DomainSummary objects. Each  returned
         DomainSummary object contains information about a domain.

       o ListPackages : Lists the packages in a repository.

       o ListPackageVersionAssets  : Lists the assets for a given package ver-
         sion.

       o ListPackageVersionDependencies : Returns a list of the direct  depen-
         dencies for a package version.

       o ListPackageVersions : Returns a list of package versions for a speci-
         fied package in a repository.

       o ListRepositories : Returns a list of repositories owned  by  the  AWS
         account that called this method.

       o ListRepositoriesInDomain  :  Returns  a list of the repositories in a
         domain.

       o PutDomainPermissionsPolicy : Attaches a resource policy to a  domain.

       o PutRepositoryPermissionsPolicy : Sets the resource policy on a repos-
         itory that specifies permissions to access it.

       o UpdatePackageVersionsStatus : Updates the status of one or more  ver-
         sions of a package.

       o UpdateRepository : Updates the properties of a repository.

AVAILABLE COMMANDS
       o associate-external-connection

       o copy-package-versions

       o create-domain

       o create-repository

       o delete-domain

       o delete-domain-permissions-policy

       o delete-package-versions

       o delete-repository

       o delete-repository-permissions-policy

       o describe-domain

       o describe-package-version

       o describe-repository

       o disassociate-external-connection

       o dispose-package-versions

       o get-authorization-token

       o get-domain-permissions-policy

       o get-package-version-asset

       o get-package-version-readme

       o get-repository-endpoint

       o get-repository-permissions-policy

       o help

       o list-domains

       o list-package-version-assets

       o list-package-version-dependencies

       o list-package-versions

       o list-packages

       o list-repositories

       o list-repositories-in-domain

       o list-tags-for-resource

       o login

       o put-domain-permissions-policy

       o put-repository-permissions-policy

       o tag-resource

       o untag-resource

       o update-package-versions-status

       o update-repository



                                                                CODEARTIFACT()
