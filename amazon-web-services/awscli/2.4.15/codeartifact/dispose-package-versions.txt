DISPOSE-PACKAGE-VERSIONS()                          DISPOSE-PACKAGE-VERSIONS()



NAME
       dispose-package-versions -

DESCRIPTION
       Deletes  the  assets in package versions and sets the package versions'
       status to Disposed . A disposed package version cannot be  restored  in
       your repository because its assets are deleted.

       To   view   all   disposed   package  versions  in  a  repository,  use
       ListPackageVersions and set the status parameter to Disposed .

       To  view  information   about   a   disposed   package   version,   use
       DescribePackageVersion .

       See also: AWS API Documentation

       See 'aws help' for descriptions of global parameters.

SYNOPSIS
            dispose-package-versions
          --domain <value>
          [--domain-owner <value>]
          --repository <value>
          --format <value>
          [--namespace <value>]
          --package <value>
          --versions <value>
          [--version-revisions <value>]
          [--expected-status <value>]
          [--cli-input-json | --cli-input-yaml]
          [--generate-cli-skeleton <value>]

OPTIONS
       --domain (string)
          The name of the domain that contains the repository you want to dis-
          pose.

       --domain-owner (string)
          The 12-digit account number of the AWS account that owns the domain.
          It does not include dashes or spaces.

       --repository (string)
          The  name  of  the repository that contains the package versions you
          want to dispose.

       --format (string)
          A format that specifies the type of package  versions  you  want  to
          dispose. The valid values are:

          o npm

          o pypi

          o maven

          Possible values:

          o npm

          o pypi

          o maven

          o nuget

       --namespace (string)
          The  namespace  of the package. The package component that specifies
          its namespace depends on its type. For example:

          o The namespace of a Maven package is its groupId .

          o The namespace of an npm package is its scope .

          o A Python package does not contain a  corresponding  component,  so
            Python packages do not have a namespace.

       --package (string)
          The name of the package with the versions you want to dispose.

       --versions (list)
          The versions of the package you want to dispose.

          (string)

       Syntax:

          "string" "string" ...

       --version-revisions (map)
          The revisions of the package versions you want to dispose.

          key -> (string)

          value -> (string)

       Shorthand Syntax:

          KeyName1=string,KeyName2=string

       JSON Syntax:

          {"string": "string"
            ...}

       --expected-status (string)
          The  expected status of the package version to dispose. Valid values
          are:

          o Published

          o Unfinished

          o Unlisted

          o Archived

          o Disposed

          Possible values:

          o Published

          o Unfinished

          o Unlisted

          o Archived

          o Disposed

          o Deleted

       --cli-input-json | --cli-input-yaml (string) Reads arguments  from  the
       JSON  string  provided.  The JSON string follows the format provided by
       --generate-cli-skeleton. If other arguments are provided on the command
       line,  those  values  will override the JSON-provided values. It is not
       possible to pass arbitrary binary values using a JSON-provided value as
       the  string  will  be  taken literally. This may not be specified along
       with --cli-input-yaml.

       --generate-cli-skeleton (string) Prints a  JSON  skeleton  to  standard
       output without sending an API request. If provided with no value or the
       value input, prints a sample input JSON that can be used as an argument
       for --cli-input-json. Similarly, if provided yaml-input it will print a
       sample input YAML that can be used with --cli-input-yaml.  If  provided
       with  the  value  output, it validates the command inputs and returns a
       sample output JSON for that command.

       See 'aws help' for descriptions of global parameters.

EXAMPLES
       To delete a package version's assets and set its status to Disposed

       The following dispose-package-versions example deletes  the  assets  of
       test-package version 4.0.0 and sets its status to Disposed.

          aws codeartifact dispose-package-versions \
              --domain test-domain \
              --repo test-repo \
              --format npm \
              --package test-package \
              --versions 4.0.0

       Output:

          {
              "successfulVersions": {
                  "4.0.0": {
                      "revision": "Ciqe5/9yicvkJT13b5/LdLpCyE6fqA7poa9qp+FilPs=",
                      "status": "Disposed"
                  }
              },
              "failedVersions": {}
          }

       For  more information, see Working with packages in CodeArtifact in the
       AWS CodeArtifact User Guide.

OUTPUT
       successfulVersions -> (map)
          A list of the package versions that were successfully disposed.

          key -> (string)

          value -> (structure)
              Contains the revision and status of a package version.

              revision -> (string)
                 The revision of a package version.

              status -> (string)
                 The status of a package version. Valid statuses are:

                 o Published

                 o Unfinished

                 o Unlisted

                 o Archived

                 o Disposed

       failedVersions -> (map)
          A PackageVersionError object that contains a map of errors codes for
          the  disposed package versions that failed. The possible error codes
          are:

          o ALREADY_EXISTS

          o MISMATCHED_REVISION

          o MISMATCHED_STATUS

          o NOT_ALLOWED

          o NOT_FOUND

          o SKIPPED

          key -> (string)

          value -> (structure)
              An error associated with package.

              errorCode -> (string)
                 The error code associated with the error. Valid  error  codes
                 are:

                 o ALREADY_EXISTS

                 o MISMATCHED_REVISION

                 o MISMATCHED_STATUS

                 o NOT_ALLOWED

                 o NOT_FOUND

                 o SKIPPED

              errorMessage -> (string)
                 The error message associated with the error.



                                                    DISPOSE-PACKAGE-VERSIONS()
